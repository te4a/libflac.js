// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != 'undefined';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string' && process.type != 'renderer';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {

}

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// include: /home/tema/libflac.js/libflac_pre.js
// libflac.js - port of libflac to JavaScript using emscripten


(function (root, factory) {

	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['module', 'require'], factory.bind(null, root));
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.

		// use process.env (if available) for reading Flac environment settings:
		var env = typeof process !== 'undefined' && process && process.env? process.env : root;
		factory(env, module, module.require);
	} else {
		// Browser globals
		root.Flac = factory(root);
	}

}(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : this, function (global, expLib, require) {
'use strict';

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["onRuntimeInitialized"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set (may happen, in case initialization was strictly synchronously),
		// do "pause" until sync initialization has run through
		setTimeout(function(){do_fire_event('ready', [{type: 'ready', target: _exported}], true);}, 0);
	} else {
		do_fire_event('ready', [{type: 'ready', target: _exported}], true);
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){

	Module["locateFile"] = function(fileName){
		var path = global.FLAC_SCRIPT_LOCATION || '';
		if(path[fileName]){
			return path[fileName];
		}
		path += path && !/\/$/.test(path)? '/' : '';
		return path + fileName;
	};

	//NOTE will be overwritten if emscripten has env specific implementation for this
	var readBinary = function(filePath){

		//for Node: use default implementation (copied from generated code):
		if(ENVIRONMENT_IS_NODE){
			var ret = read_(filePath, true);
			if (!ret.buffer) {
				ret = new Uint8Array(ret);
			}
			assert(ret.buffer);
			return ret;
		}

		//otherwise: try "fallback" to AJAX
		return new Promise(function(resolve, reject){
			var xhr = new XMLHttpRequest();
			xhr.responseType = "arraybuffer";
			xhr.addEventListener("load", function(evt){
				resolve(xhr.response);
			});
			xhr.addEventListener("error", function(err){
				reject(err);
			});
			xhr.open("GET", filePath);
			xhr.send();
		});
	};
}

//fallback for fetch && support file://-protocol: try read as binary if fetch fails
if(global && typeof global.fetch === 'function'){
	var _fetch = global.fetch;
	global.fetch = function(url){
		return _fetch.apply(null, arguments).catch(function(err){
			try{
				var result = readBinary(url);
				if(result && result.catch){
					result.catch(function(_err){throw err});
				}
				return result;
			} catch(_err){
				throw err;
			}
		});
	};
}
// end include: /home/tema/libflac.js/libflac_pre.js


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = (numericVersion[0] * 10000) + (numericVersion[1] * 100) + (numericVersion[2].split('-')[0] * 1);
  var minVersion = 160000;
  if (numericVersion < 160000) {
    throw new Error('This emscripten-generated code requires node v16.0.0 (detected v' + nodeVersion + ')');
  }

  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  scriptDirectory = __dirname + '/';

// include: node_shell_read.js
readBinary = (filename) => {
  // We need to re-wrap `file://` strings to URLs.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename);
  assert(Buffer.isBuffer(ret));
  return ret;
};

readAsync = async (filename, binary = true) => {
  // See the comment in the `readBinary` function.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename, binary ? undefined : 'utf8');
  assert(binary ? Buffer.isBuffer(ret) : typeof ret == 'string');
  return ret;
};
// end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof WorkerGlobalScope != 'undefined') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof WorkerGlobalScope != 'undefined')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = async (url) => {
    // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
    // See https://github.com/github/fetch/pull/92#issuecomment-140665932
    // Cordova or Electron apps are typically loaded from a file:// url.
    // So use XHR on webview if URL is a file URL.
    if (isFileURI(url)) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = () => {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            resolve(xhr.response);
            return;
          }
          reject(xhr.status);
        };
        xhr.onerror = reject;
        xhr.send(null);
      });
    }
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  ret.grow = function(by) {
    var old = this.length;
    this.length = this.length + by;
    return old;
  };
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 83968, "kFUBAAAAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAGxLAQAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISAEAWxMBACsTAQAAAAAACQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAMAAAB4TQEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAwAAACIUQEAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAP////8KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOEkBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAQxUBAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAABDFQEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAEMVAQAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAQxUBAAEAAAABAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAABDFQEAAQAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAEMVAQABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAJhUBAAEAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAmFQEAAQAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAPcUAQA=");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(16908288);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var _abort_js = env._abort_js;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var __stack_pointer = 65536;
 var tempRet0 = 0;
 var __stack_end = 0;
 var __stack_base = 0;
 var GOT_data_internal_FLAC__crc8_table = 65536;
 var GOT_data_internal_FLAC__crc16_table = 65792;
 var GOT_data_internal___table_base = 1;
 var GOT_data_internal___memory_base = 0;
 var GOT_data_internal_FLAC__OGG_MAPPING_MAGIC = 84128;
 var GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE = 72336;
 var GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN = 71272;
 var GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN = 71076;
 var GOT_data_internal_stdin = 72344;
 var GOT_func_internal_FLAC__lpc_restore_signal = 7;
 var GOT_func_internal_FLAC__lpc_restore_signal_wide = 8;
 var GOT_data_internal_FLAC__STREAM_SYNC_STRING = 71029;
 var GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN = 71184;
 var GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN = 71188;
 var GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN = 71192;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN = 71044;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN = 71048;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN = 71052;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN = 71056;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN = 71060;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN = 71064;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN = 71068;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN = 71072;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN = 71088;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN = 71084;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN = 71080;
 var GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN = 71268;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN = 71244;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN = 71240;
 var GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN = 71236;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN = 71132;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN = 71136;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN = 71140;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN = 71144;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN = 71148;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN = 71112;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN = 71100;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN = 71096;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN = 71092;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN = 71128;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN = 71124;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN = 71120;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN = 71116;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN = 71108;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN = 71104;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN = 71152;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN = 71156;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN = 71160;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN = 71164;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN = 71168;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN = 71172;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN = 71176;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN = 71180;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER = 71260;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER = 71264;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN = 71248;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN = 71252;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN = 71256;
 var GOT_data_internal_FLAC__OGG_MAPPING_NUM_HEADERS_LEN = 72340;
 var GOT_data_internal_FLAC__VENDOR_STRING = 84124;
 var GOT_data_internal_FLAC__FRAME_HEADER_SYNC_LEN = 71200;
 var GOT_data_internal_FLAC__FRAME_HEADER_SYNC = 71196;
 var GOT_data_internal_FLAC__FRAME_HEADER_RESERVED_LEN = 71204;
 var GOT_data_internal_FLAC__FRAME_HEADER_BLOCKING_STRATEGY_LEN = 71208;
 var GOT_data_internal_FLAC__FRAME_HEADER_BLOCK_SIZE_LEN = 71212;
 var GOT_data_internal_FLAC__FRAME_HEADER_SAMPLE_RATE_LEN = 71216;
 var GOT_data_internal_FLAC__FRAME_HEADER_CHANNEL_ASSIGNMENT_LEN = 71220;
 var GOT_data_internal_FLAC__FRAME_HEADER_BITS_PER_SAMPLE_LEN = 71224;
 var GOT_data_internal_FLAC__FRAME_HEADER_ZERO_PAD_LEN = 71228;
 var GOT_data_internal_FLAC__FRAME_HEADER_CRC_LEN = 71232;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_CONSTANT_BYTE_ALIGNED_MASK = 71288;
 var GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN = 71276;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN = 71280;
 var GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN = 71284;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_FIXED_BYTE_ALIGNED_MASK = 71296;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_LPC_BYTE_ALIGNED_MASK = 71300;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_VERBATIM_BYTE_ALIGNED_MASK = 71292;
 var GOT_data_internal_stdout = 76612;
 var GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients = 13;
 var GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients_wide = 14;
 var GOT_func_internal_FLAC__fixed_compute_best_predictor_wide = 15;
 var GOT_func_internal_FLAC__fixed_compute_best_predictor = 16;
 var GOT_func_internal_FLAC__lpc_compute_autocorrelation = 18;
 var GOT_data_internal_FLAC__STREAM_SYNC_LEN = 71040;
 var GOT_data_internal_FLAC__STREAM_SYNC = 71036;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function __errno_location() {
  return 84832 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = HEAP32[(0 + 83968 | 0) >> 2] | 0;
  $2 = ($0 + 7 | 0) & -8 | 0;
  $0 = $1 + $2 | 0;
  block2 : {
   block1 : {
    block : {
     if (!$2) {
      break block
     }
     if ($0 >>> 0 <= $1 >>> 0) {
      break block1
     }
    }
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break block2
    }
    if (emscripten_resize_heap($0 | 0) | 0) {
     break block2
    }
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return -1 | 0;
  }
  HEAP32[(0 + 83968 | 0) >> 2] = $0;
  return $1 | 0;
 }
 
 function abort() {
  _abort_js();
  wasm2js_trap();
 }
 
 function _emscripten_memcpy_bulkmem($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($2) {
   wasm2js_memory_copy($0, $1, $2)
  }
  return $0 | 0;
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  block : {
   if ($2 >>> 0 < 512 >>> 0) {
    break block
   }
   return _emscripten_memcpy_bulkmem($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
  }
  $3 = $0 + $2 | 0;
  block6 : {
   block1 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0 & 3 | 0) {
       break block2
      }
      $2 = $0;
      break block3;
     }
     block4 : {
      if ($2) {
       break block4
      }
      $2 = $0;
      break block3;
     }
     $2 = $0;
     label : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break block3
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label
      }
      break label;
     };
    }
    $4 = $3 & -4 | 0;
    block5 : {
     if ($3 >>> 0 < 64 >>> 0) {
      break block5
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break block5
     }
     label1 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break block6
    }
    label2 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label2
     }
     break block6;
    };
   }
   block7 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break block7
    }
    $2 = $0;
    break block6;
   }
   block8 : {
    $4 = $3 + -4 | 0;
    if ($0 >>> 0 <= $4 >>> 0) {
     break block8
    }
    $2 = $0;
    break block6;
   }
   $2 = $0;
   label3 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label3
    }
    break label3;
   };
  }
  block9 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break block9
   }
   label4 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label4
    }
    break label4;
   };
  }
  return $0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block : {
   if ($0) {
    break block
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_syscall_ret(__wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $4 = $3 + 16 | 0;
  $7 = 2;
  block5 : {
   block4 : {
    block2 : {
     block1 : {
      block : {
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break block
       }
       $5 = $4;
       break block1;
      }
      label : while (1) {
       $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break block2
       }
       block3 : {
        if (($1 | 0) > (-1 | 0)) {
         break block3
        }
        $5 = $4;
        break block4;
       }
       $8 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       $9 = $1 >>> 0 > $8 >>> 0;
       $5 = $4 + ($9 << 3 | 0) | 0;
       $8 = $1 - ($9 ? $8 : 0) | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $8 | 0;
       $4 = $4 + ($9 ? 12 : 4) | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - $8 | 0;
       $6 = $6 - $1 | 0;
       $4 = $5;
       $7 = $7 - $9 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $4 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label
       }
       break label;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break block4
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $1 = $2;
    break block5;
   }
   $1 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break block5
   }
   $1 = $2 - (HEAP32[($5 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function __lseek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $2 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2 ? -1 : $1;
  i64toi32_i32$2 = $2 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __lseek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __ofl_lock() {
  __lock(84844 | 0);
  return 84848 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(84844 | 0);
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  block2 : {
   block1 : {
    block : {
     if (!($0 & 3 | 0)) {
      break block
     }
     if (!$2) {
      break block
     }
     $4 = $1 & 255 | 0;
     label : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break block1
      }
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      $0 = $0 + 1 | 0;
      if (!($0 & 3 | 0)) {
       break block
      }
      if ($2) {
       continue label
      }
      break label;
     };
    }
    if (!$3) {
     break block2
    }
    block3 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
      break block3
     }
     if ($2 >>> 0 < 4 >>> 0) {
      break block3
     }
     $4 = Math_imul($1 & 255 | 0, 16843009);
     label1 : while (1) {
      $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
      if (((16843008 - $3 | 0 | $3 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block1
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if (!$2) {
     break block2
    }
   }
   $3 = $1 & 255 | 0;
   label2 : while (1) {
    block4 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break block4
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label2
    }
    break label2;
   };
  }
  return 0 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  block : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break block
   }
   block1 : {
    if ($3) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0 != 0.0) {
       break block2
      }
      $3 = 0;
      break block3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3) {
    break block1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3) {
    break block1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3 = 0, $3$hi = 0, $5 = 0, $2 = 0, $4 = 0, $4$hi = 0, $8 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $52 = 0, $53 = 0, $54 = 0, $23 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58 = 0, $58$hi = 0, $60$hi = 0, $79 = 0, $79$hi = 0, $92 = 0, $92$hi = 0, $95$hi = 0, $98 = 0, $98$hi = 0, $103 = 0, $103$hi = 0, $105 = 0, $105$hi = 0, $108 = 0, $109$hi = 0, $118$hi = 0, $122 = 0, $122$hi = 0, $133$hi = 0, $135 = 0, $135$hi = 0, $136$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$1;
  block3 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $47 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $47 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $47;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    $5 = $4;
    if (($5 + -15361 | 0) >>> 0 > 2045 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23 = $48;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$1 = $23;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = $5 + -15360 | 0;
    $4$hi = i64toi32_i32$0;
    block2 : {
     block1 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = 268435455;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break block1
      }
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      break block2;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$0 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block2
     }
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $39$hi;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$0 = 1048575;
    i64toi32_i32$3 = -1;
    $5 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $3;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $0 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $48$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $48$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
    break block3;
   }
   block4 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
     break block4
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block4
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = $0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $50 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $50 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $58 = $50;
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $51 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $51 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $60$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $58$hi;
    i64toi32_i32$2 = $58;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = $51;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 524288;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $3 = 2047;
    $3$hi = i64toi32_i32$2;
    break block3;
   }
   block5 : {
    if ($5 >>> 0 <= 17406 >>> 0) {
     break block5
    }
    i64toi32_i32$2 = 0;
    $3 = 2047;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $0 = 0;
    $0$hi = i64toi32_i32$2;
    break block3;
   }
   block6 : {
    i64toi32_i32$2 = $4$hi;
    $6 = !($4 | i64toi32_i32$2 | 0);
    $7 = $6 ? 15360 : 15361;
    $8 = $7 - $5 | 0;
    if (($8 | 0) <= (112 | 0)) {
     break block6
    }
    i64toi32_i32$2 = 0;
    $0 = 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$2;
    break block3;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $79 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $79$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $6;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$1 = $79$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? $3 : $79;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$3 | 0, 128 - $8 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$2 | 0, $8 | 0);
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $52 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $52 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $92 = $52;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $53 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $53 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $95$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $92$hi;
   i64toi32_i32$0 = $92;
   i64toi32_i32$3 = $95$hi;
   i64toi32_i32$5 = $53;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $0 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $0$hi = i64toi32_i32$3;
   block8 : {
    block7 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = 268435455;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $98 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $98$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $2;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
     $103 = i64toi32_i32$0;
     $103$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
     $105 = i64toi32_i32$2;
     $105$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $103$hi;
     i64toi32_i32$3 = $103;
     i64toi32_i32$2 = $105$hi;
     i64toi32_i32$5 = $105;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     $108 = ($7 | 0) != ($5 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
     i64toi32_i32$0 = 0;
     $109$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $98$hi;
     i64toi32_i32$5 = $98;
     i64toi32_i32$2 = $109$hi;
     i64toi32_i32$3 = $108;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $3;
     i64toi32_i32$5 = 134217728;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $0 = i64toi32_i32$1;
     $0$hi = i64toi32_i32$4;
     break block8;
    }
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = 134217728;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block8
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$5 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $118$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = $118$hi;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $0 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $122 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
   $122$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 1048575;
   i64toi32_i32$3 = -1;
   $5 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$1 = $122$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ? $122 : $0;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $0 = i64toi32_i32$4;
   $0$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 52;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $133$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$3 = $1;
  i64toi32_i32$5 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $135 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $135$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $133$hi;
  i64toi32_i32$4 = $54;
  i64toi32_i32$3 = $135$hi;
  i64toi32_i32$1 = $135;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $136$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $0$hi;
  i64toi32_i32$3 = $136$hi;
  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$1 = $0;
  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function __memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  block : {
   if (!$2) {
    break block
   }
   HEAP8[$0 >> 0] = $1;
   $3 = $0 + $2 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break block
   }
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break block
   }
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break block
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break block
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break block
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break block
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label
    }
    break label;
   };
  }
  return $0 | 0;
 }
 
 function emscripten_builtin_malloc($0) {
  $0 = $0 | 0;
  var $5 = 0, $4 = 0, $7 = 0, $8 = 0, $3 = 0, $2 = 0, $6 = 0, $12 = 0, $11 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10 = 0, i64toi32_i32$2 = 0, $1 = 0, $9 = 0, $87 = 0, $201 = 0, $1154 = 0, $1156 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block5 : {
   block88 : {
    block4 : {
     block6 : {
      block : {
       if ($0 >>> 0 > 244 >>> 0) {
        break block
       }
       block1 : {
        $2 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
        $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & 504 | 0;
        $4 = $3 >>> 3 | 0;
        $0 = $2 >>> $4 | 0;
        if (!($0 & 3 | 0)) {
         break block1
        }
        block3 : {
         block2 : {
          $3 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
          $0 = $3 << 3 | 0;
          $5 = $0 + 84892 | 0;
          $4 = HEAP32[($0 + 84900 | 0) >> 2] | 0;
          $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
          if (($5 | 0) != ($0 | 0)) {
           break block2
          }
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
          break block3;
         }
         if ($0 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block4
         }
         HEAP32[($0 + 12 | 0) >> 2] = $5;
         HEAP32[($5 + 8 | 0) >> 2] = $0;
        }
        $0 = $4 + 8 | 0;
        $3 = $3 << 3 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
        $4 = $4 + $3 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block5;
       }
       $6 = HEAP32[(0 + 84860 | 0) >> 2] | 0;
       if ($3 >>> 0 <= $6 >>> 0) {
        break block6
       }
       block7 : {
        if (!$0) {
         break block7
        }
        block9 : {
         block8 : {
          $87 = $0 << $4 | 0;
          $0 = 2 << $4 | 0;
          $5 = __wasm_ctz_i32($87 & ($0 | (0 - $0 | 0) | 0) | 0 | 0) | 0;
          $0 = $5 << 3 | 0;
          $7 = $0 + 84892 | 0;
          $0 = HEAP32[($0 + 84900 | 0) >> 2] | 0;
          $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if (($7 | 0) != ($4 | 0)) {
           break block8
          }
          $2 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
          HEAP32[(0 + 84852 | 0) >> 2] = $2;
          break block9;
         }
         if ($4 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
          break block4
         }
         HEAP32[($4 + 12 | 0) >> 2] = $7;
         HEAP32[($7 + 8 | 0) >> 2] = $4;
        }
        HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
        $7 = $0 + $3 | 0;
        $4 = $5 << 3 | 0;
        $3 = $4 - $3 | 0;
        HEAP32[($7 + 4 | 0) >> 2] = $3 | 1 | 0;
        HEAP32[($0 + $4 | 0) >> 2] = $3;
        block10 : {
         if (!$6) {
          break block10
         }
         $5 = ($6 & -8 | 0) + 84892 | 0;
         $4 = HEAP32[(0 + 84872 | 0) >> 2] | 0;
         block12 : {
          block11 : {
           $8 = 1 << ($6 >>> 3 | 0) | 0;
           if ($2 & $8 | 0) {
            break block11
           }
           HEAP32[(0 + 84852 | 0) >> 2] = $2 | $8 | 0;
           $8 = $5;
           break block12;
          }
          $8 = HEAP32[($5 + 8 | 0) >> 2] | 0;
          if ($8 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($5 + 8 | 0) >> 2] = $4;
         HEAP32[($8 + 12 | 0) >> 2] = $4;
         HEAP32[($4 + 12 | 0) >> 2] = $5;
         HEAP32[($4 + 8 | 0) >> 2] = $8;
        }
        $0 = $0 + 8 | 0;
        HEAP32[(0 + 84872 | 0) >> 2] = $7;
        HEAP32[(0 + 84860 | 0) >> 2] = $3;
        break block5;
       }
       $9 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
       if (!$9) {
        break block6
       }
       $7 = HEAP32[(((__wasm_ctz_i32($9 | 0) | 0) << 2 | 0) + 85156 | 0) >> 2] | 0;
       $4 = ((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
       $5 = $7;
       block14 : {
        label : while (1) {
         block13 : {
          $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
          if ($0) {
           break block13
          }
          $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
          if (!$0) {
           break block14
          }
         }
         $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
         $201 = $5;
         $5 = $5 >>> 0 < $4 >>> 0;
         $4 = $5 ? $201 : $4;
         $7 = $5 ? $0 : $7;
         $5 = $0;
         continue label;
        };
       }
       $10 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
       if ($7 >>> 0 < $10 >>> 0) {
        break block4
       }
       $11 = HEAP32[($7 + 24 | 0) >> 2] | 0;
       block16 : {
        block15 : {
         $0 = HEAP32[($7 + 12 | 0) >> 2] | 0;
         if (($0 | 0) == ($7 | 0)) {
          break block15
         }
         $5 = HEAP32[($7 + 8 | 0) >> 2] | 0;
         if ($5 >>> 0 < $10 >>> 0) {
          break block4
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break block4
         }
         if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break block4
         }
         HEAP32[($5 + 12 | 0) >> 2] = $0;
         HEAP32[($0 + 8 | 0) >> 2] = $5;
         break block16;
        }
        block19 : {
         block18 : {
          block17 : {
           $5 = HEAP32[($7 + 20 | 0) >> 2] | 0;
           if (!$5) {
            break block17
           }
           $8 = $7 + 20 | 0;
           break block18;
          }
          $5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
          if (!$5) {
           break block19
          }
          $8 = $7 + 16 | 0;
         }
         label1 : while (1) {
          $12 = $8;
          $0 = $5;
          $8 = $0 + 20 | 0;
          $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          $8 = $0 + 16 | 0;
          $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          break label1;
         };
         if ($12 >>> 0 < $10 >>> 0) {
          break block4
         }
         HEAP32[$12 >> 2] = 0;
         break block16;
        }
        $0 = 0;
       }
       block20 : {
        if (!$11) {
         break block20
        }
        block22 : {
         block21 : {
          $8 = HEAP32[($7 + 28 | 0) >> 2] | 0;
          $5 = ($8 << 2 | 0) + 85156 | 0;
          if (($7 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[$5 >> 2] = $0;
          if ($0) {
           break block22
          }
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9 & (__wasm_rotl_i32(-2 | 0, $8 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
          break block20;
         }
         if ($11 >>> 0 < $10 >>> 0) {
          break block4
         }
         block24 : {
          block23 : {
           if ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
            break block23
           }
           HEAP32[($11 + 16 | 0) >> 2] = $0;
           break block24;
          }
          HEAP32[($11 + 20 | 0) >> 2] = $0;
         }
         if (!$0) {
          break block20
         }
        }
        if ($0 >>> 0 < $10 >>> 0) {
         break block4
        }
        HEAP32[($0 + 24 | 0) >> 2] = $11;
        block25 : {
         $5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
         if (!$5) {
          break block25
         }
         if ($5 >>> 0 < $10 >>> 0) {
          break block4
         }
         HEAP32[($0 + 16 | 0) >> 2] = $5;
         HEAP32[($5 + 24 | 0) >> 2] = $0;
        }
        $5 = HEAP32[($7 + 20 | 0) >> 2] | 0;
        if (!$5) {
         break block20
        }
        if ($5 >>> 0 < $10 >>> 0) {
         break block4
        }
        HEAP32[($0 + 20 | 0) >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = $0;
       }
       block27 : {
        block26 : {
         if ($4 >>> 0 > 15 >>> 0) {
          break block26
         }
         $0 = $4 + $3 | 0;
         HEAP32[($7 + 4 | 0) >> 2] = $0 | 3 | 0;
         $0 = $7 + $0 | 0;
         HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
         break block27;
        }
        HEAP32[($7 + 4 | 0) >> 2] = $3 | 3 | 0;
        $3 = $7 + $3 | 0;
        HEAP32[($3 + 4 | 0) >> 2] = $4 | 1 | 0;
        HEAP32[($3 + $4 | 0) >> 2] = $4;
        block28 : {
         if (!$6) {
          break block28
         }
         $5 = ($6 & -8 | 0) + 84892 | 0;
         $0 = HEAP32[(0 + 84872 | 0) >> 2] | 0;
         block30 : {
          block29 : {
           $8 = 1 << ($6 >>> 3 | 0) | 0;
           if ($8 & $2 | 0) {
            break block29
           }
           HEAP32[(0 + 84852 | 0) >> 2] = $8 | $2 | 0;
           $8 = $5;
           break block30;
          }
          $8 = HEAP32[($5 + 8 | 0) >> 2] | 0;
          if ($8 >>> 0 < $10 >>> 0) {
           break block4
          }
         }
         HEAP32[($5 + 8 | 0) >> 2] = $0;
         HEAP32[($8 + 12 | 0) >> 2] = $0;
         HEAP32[($0 + 12 | 0) >> 2] = $5;
         HEAP32[($0 + 8 | 0) >> 2] = $8;
        }
        HEAP32[(0 + 84872 | 0) >> 2] = $3;
        HEAP32[(0 + 84860 | 0) >> 2] = $4;
       }
       $0 = $7 + 8 | 0;
       break block5;
      }
      $3 = -1;
      if ($0 >>> 0 > -65 >>> 0) {
       break block6
      }
      $4 = $0 + 11 | 0;
      $3 = $4 & -8 | 0;
      $11 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
      if (!$11) {
       break block6
      }
      $6 = 31;
      block31 : {
       if ($0 >>> 0 > 16777204 >>> 0) {
        break block31
       }
       $0 = Math_clz32($4 >>> 8 | 0);
       $6 = ((($3 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
      }
      $4 = 0 - $3 | 0;
      block37 : {
       block35 : {
        block33 : {
         block32 : {
          $5 = HEAP32[(($6 << 2 | 0) + 85156 | 0) >> 2] | 0;
          if ($5) {
           break block32
          }
          $0 = 0;
          $8 = 0;
          break block33;
         }
         $0 = 0;
         $7 = $3 << (($6 | 0) == (31 | 0) ? 0 : 25 - ($6 >>> 1 | 0) | 0) | 0;
         $8 = 0;
         label2 : while (1) {
          block34 : {
           $2 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
           if ($2 >>> 0 >= $4 >>> 0) {
            break block34
           }
           $4 = $2;
           $8 = $5;
           if ($4) {
            break block34
           }
           $4 = 0;
           $8 = $5;
           $0 = $5;
           break block35;
          }
          $2 = HEAP32[($5 + 20 | 0) >> 2] | 0;
          $12 = HEAP32[(($5 + (($7 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
          $0 = $2 ? (($2 | 0) == ($12 | 0) ? $0 : $2) : $0;
          $7 = $7 << 1 | 0;
          $5 = $12;
          if ($5) {
           continue label2
          }
          break label2;
         };
        }
        block36 : {
         if ($0 | $8 | 0) {
          break block36
         }
         $8 = 0;
         $0 = 2 << $6 | 0;
         $0 = ($0 | (0 - $0 | 0) | 0) & $11 | 0;
         if (!$0) {
          break block6
         }
         $0 = HEAP32[(((__wasm_ctz_i32($0 | 0) | 0) << 2 | 0) + 85156 | 0) >> 2] | 0;
        }
        if (!$0) {
         break block37
        }
       }
       label3 : while (1) {
        $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
        $7 = $2 >>> 0 < $4 >>> 0;
        block38 : {
         $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($5) {
          break block38
         }
         $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
        }
        $4 = $7 ? $2 : $4;
        $8 = $7 ? $0 : $8;
        $0 = $5;
        if ($0) {
         continue label3
        }
        break label3;
       };
      }
      if (!$8) {
       break block6
      }
      if ($4 >>> 0 >= ((HEAP32[(0 + 84860 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
       break block6
      }
      $12 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
      if ($8 >>> 0 < $12 >>> 0) {
       break block4
      }
      $6 = HEAP32[($8 + 24 | 0) >> 2] | 0;
      block40 : {
       block39 : {
        $0 = HEAP32[($8 + 12 | 0) >> 2] | 0;
        if (($0 | 0) == ($8 | 0)) {
         break block39
        }
        $5 = HEAP32[($8 + 8 | 0) >> 2] | 0;
        if ($5 >>> 0 < $12 >>> 0) {
         break block4
        }
        if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
         break block4
        }
        if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
         break block4
        }
        HEAP32[($5 + 12 | 0) >> 2] = $0;
        HEAP32[($0 + 8 | 0) >> 2] = $5;
        break block40;
       }
       block43 : {
        block42 : {
         block41 : {
          $5 = HEAP32[($8 + 20 | 0) >> 2] | 0;
          if (!$5) {
           break block41
          }
          $7 = $8 + 20 | 0;
          break block42;
         }
         $5 = HEAP32[($8 + 16 | 0) >> 2] | 0;
         if (!$5) {
          break block43
         }
         $7 = $8 + 16 | 0;
        }
        label4 : while (1) {
         $2 = $7;
         $0 = $5;
         $7 = $0 + 20 | 0;
         $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
         if ($5) {
          continue label4
         }
         $7 = $0 + 16 | 0;
         $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($5) {
          continue label4
         }
         break label4;
        };
        if ($2 >>> 0 < $12 >>> 0) {
         break block4
        }
        HEAP32[$2 >> 2] = 0;
        break block40;
       }
       $0 = 0;
      }
      block44 : {
       if (!$6) {
        break block44
       }
       block46 : {
        block45 : {
         $7 = HEAP32[($8 + 28 | 0) >> 2] | 0;
         $5 = ($7 << 2 | 0) + 85156 | 0;
         if (($8 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
          break block45
         }
         HEAP32[$5 >> 2] = $0;
         if ($0) {
          break block46
         }
         $11 = $11 & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0;
         HEAP32[(0 + 84856 | 0) >> 2] = $11;
         break block44;
        }
        if ($6 >>> 0 < $12 >>> 0) {
         break block4
        }
        block48 : {
         block47 : {
          if ((HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
           break block47
          }
          HEAP32[($6 + 16 | 0) >> 2] = $0;
          break block48;
         }
         HEAP32[($6 + 20 | 0) >> 2] = $0;
        }
        if (!$0) {
         break block44
        }
       }
       if ($0 >>> 0 < $12 >>> 0) {
        break block4
       }
       HEAP32[($0 + 24 | 0) >> 2] = $6;
       block49 : {
        $5 = HEAP32[($8 + 16 | 0) >> 2] | 0;
        if (!$5) {
         break block49
        }
        if ($5 >>> 0 < $12 >>> 0) {
         break block4
        }
        HEAP32[($0 + 16 | 0) >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = $0;
       }
       $5 = HEAP32[($8 + 20 | 0) >> 2] | 0;
       if (!$5) {
        break block44
       }
       if ($5 >>> 0 < $12 >>> 0) {
        break block4
       }
       HEAP32[($0 + 20 | 0) >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $0;
      }
      block51 : {
       block50 : {
        if ($4 >>> 0 > 15 >>> 0) {
         break block50
        }
        $0 = $4 + $3 | 0;
        HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
        $0 = $8 + $0 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block51;
       }
       HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
       $7 = $8 + $3 | 0;
       HEAP32[($7 + 4 | 0) >> 2] = $4 | 1 | 0;
       HEAP32[($7 + $4 | 0) >> 2] = $4;
       block52 : {
        if ($4 >>> 0 > 255 >>> 0) {
         break block52
        }
        $0 = ($4 & -8 | 0) + 84892 | 0;
        block54 : {
         block53 : {
          $3 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
          $4 = 1 << ($4 >>> 3 | 0) | 0;
          if ($3 & $4 | 0) {
           break block53
          }
          HEAP32[(0 + 84852 | 0) >> 2] = $3 | $4 | 0;
          $4 = $0;
          break block54;
         }
         $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         if ($4 >>> 0 < $12 >>> 0) {
          break block4
         }
        }
        HEAP32[($0 + 8 | 0) >> 2] = $7;
        HEAP32[($4 + 12 | 0) >> 2] = $7;
        HEAP32[($7 + 12 | 0) >> 2] = $0;
        HEAP32[($7 + 8 | 0) >> 2] = $4;
        break block51;
       }
       $0 = 31;
       block55 : {
        if ($4 >>> 0 > 16777215 >>> 0) {
         break block55
        }
        $0 = Math_clz32($4 >>> 8 | 0);
        $0 = ((($4 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
       }
       HEAP32[($7 + 28 | 0) >> 2] = $0;
       i64toi32_i32$1 = $7;
       i64toi32_i32$0 = 0;
       HEAP32[($7 + 16 | 0) >> 2] = 0;
       HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
       $3 = ($0 << 2 | 0) + 85156 | 0;
       block58 : {
        block57 : {
         block56 : {
          $5 = 1 << $0 | 0;
          if ($11 & $5 | 0) {
           break block56
          }
          HEAP32[(0 + 84856 | 0) >> 2] = $11 | $5 | 0;
          HEAP32[$3 >> 2] = $7;
          HEAP32[($7 + 24 | 0) >> 2] = $3;
          break block57;
         }
         $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
         $5 = HEAP32[$3 >> 2] | 0;
         label5 : while (1) {
          $3 = $5;
          if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
           break block58
          }
          $5 = $0 >>> 29 | 0;
          $0 = $0 << 1 | 0;
          $2 = $3 + ($5 & 4 | 0) | 0;
          $5 = HEAP32[($2 + 16 | 0) >> 2] | 0;
          if ($5) {
           continue label5
          }
          break label5;
         };
         $0 = $2 + 16 | 0;
         if ($0 >>> 0 < $12 >>> 0) {
          break block4
         }
         HEAP32[$0 >> 2] = $7;
         HEAP32[($7 + 24 | 0) >> 2] = $3;
        }
        HEAP32[($7 + 12 | 0) >> 2] = $7;
        HEAP32[($7 + 8 | 0) >> 2] = $7;
        break block51;
       }
       if ($3 >>> 0 < $12 >>> 0) {
        break block4
       }
       $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       if ($0 >>> 0 < $12 >>> 0) {
        break block4
       }
       HEAP32[($0 + 12 | 0) >> 2] = $7;
       HEAP32[($3 + 8 | 0) >> 2] = $7;
       HEAP32[($7 + 24 | 0) >> 2] = 0;
       HEAP32[($7 + 12 | 0) >> 2] = $3;
       HEAP32[($7 + 8 | 0) >> 2] = $0;
      }
      $0 = $8 + 8 | 0;
      break block5;
     }
     block59 : {
      $0 = HEAP32[(0 + 84860 | 0) >> 2] | 0;
      if ($0 >>> 0 < $3 >>> 0) {
       break block59
      }
      $4 = HEAP32[(0 + 84872 | 0) >> 2] | 0;
      block61 : {
       block60 : {
        $5 = $0 - $3 | 0;
        if ($5 >>> 0 < 16 >>> 0) {
         break block60
        }
        $7 = $4 + $3 | 0;
        HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
        HEAP32[($4 + $0 | 0) >> 2] = $5;
        HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
        break block61;
       }
       HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
       $0 = $4 + $0 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
       $7 = 0;
       $5 = 0;
      }
      HEAP32[(0 + 84860 | 0) >> 2] = $5;
      HEAP32[(0 + 84872 | 0) >> 2] = $7;
      $0 = $4 + 8 | 0;
      break block5;
     }
     block62 : {
      $7 = HEAP32[(0 + 84864 | 0) >> 2] | 0;
      if ($7 >>> 0 <= $3 >>> 0) {
       break block62
      }
      $4 = $7 - $3 | 0;
      HEAP32[(0 + 84864 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 84876 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 84876 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break block5;
     }
     block64 : {
      block63 : {
       if (!(HEAP32[(0 + 85324 | 0) >> 2] | 0)) {
        break block63
       }
       $4 = HEAP32[(0 + 85332 | 0) >> 2] | 0;
       break block64;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = -1;
      HEAP32[(i64toi32_i32$1 + 85336 | 0) >> 2] = -1;
      HEAP32[(i64toi32_i32$1 + 85340 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 4096;
      HEAP32[(i64toi32_i32$1 + 85328 | 0) >> 2] = 4096;
      HEAP32[(i64toi32_i32$1 + 85332 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(0 + 85324 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
      HEAP32[(0 + 85344 | 0) >> 2] = 0;
      HEAP32[(0 + 85296 | 0) >> 2] = 0;
      $4 = 4096;
     }
     $0 = 0;
     $6 = $3 + 47 | 0;
     $2 = $4 + $6 | 0;
     $12 = 0 - $4 | 0;
     $8 = $2 & $12 | 0;
     if ($8 >>> 0 <= $3 >>> 0) {
      break block5
     }
     $0 = 0;
     block65 : {
      $4 = HEAP32[(0 + 85292 | 0) >> 2] | 0;
      if (!$4) {
       break block65
      }
      $5 = HEAP32[(0 + 85284 | 0) >> 2] | 0;
      $11 = $5 + $8 | 0;
      if ($11 >>> 0 <= $5 >>> 0) {
       break block5
      }
      if ($11 >>> 0 > $4 >>> 0) {
       break block5
      }
     }
     block77 : {
      block74 : {
       block66 : {
        if ((HEAPU8[(0 + 85296 | 0) >> 0] | 0) & 4 | 0) {
         break block66
        }
        block70 : {
         block75 : {
          block73 : {
           block69 : {
            block67 : {
             $4 = HEAP32[(0 + 84876 | 0) >> 2] | 0;
             if (!$4) {
              break block67
             }
             $0 = 85300;
             label6 : while (1) {
              block68 : {
               $5 = HEAP32[$0 >> 2] | 0;
               if ($4 >>> 0 < $5 >>> 0) {
                break block68
               }
               if ($4 >>> 0 < ($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                break block69
               }
              }
              $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
              if ($0) {
               continue label6
              }
              break label6;
             };
            }
            $7 = sbrk(0 | 0) | 0;
            if (($7 | 0) == (-1 | 0)) {
             break block70
            }
            $2 = $8;
            block71 : {
             $0 = HEAP32[(0 + 85328 | 0) >> 2] | 0;
             $4 = $0 + -1 | 0;
             if (!($4 & $7 | 0)) {
              break block71
             }
             $2 = ($8 - $7 | 0) + (($4 + $7 | 0) & (0 - $0 | 0) | 0) | 0;
            }
            if ($2 >>> 0 <= $3 >>> 0) {
             break block70
            }
            block72 : {
             $0 = HEAP32[(0 + 85292 | 0) >> 2] | 0;
             if (!$0) {
              break block72
             }
             $4 = HEAP32[(0 + 85284 | 0) >> 2] | 0;
             $5 = $4 + $2 | 0;
             if ($5 >>> 0 <= $4 >>> 0) {
              break block70
             }
             if ($5 >>> 0 > $0 >>> 0) {
              break block70
             }
            }
            $0 = sbrk($2 | 0) | 0;
            if (($0 | 0) != ($7 | 0)) {
             break block73
            }
            break block74;
           }
           $2 = ($2 - $7 | 0) & $12 | 0;
           $7 = sbrk($2 | 0) | 0;
           if (($7 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
            break block75
           }
           $0 = $7;
          }
          if (($0 | 0) == (-1 | 0)) {
           break block70
          }
          block76 : {
           if ($2 >>> 0 < ($3 + 48 | 0) >>> 0) {
            break block76
           }
           $7 = $0;
           break block74;
          }
          $4 = HEAP32[(0 + 85332 | 0) >> 2] | 0;
          $4 = (($6 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
          if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
           break block70
          }
          $2 = $4 + $2 | 0;
          $7 = $0;
          break block74;
         }
         if (($7 | 0) != (-1 | 0)) {
          break block74
         }
        }
        HEAP32[(0 + 85296 | 0) >> 2] = HEAP32[(0 + 85296 | 0) >> 2] | 0 | 4 | 0;
       }
       $7 = sbrk($8 | 0) | 0;
       $0 = sbrk(0 | 0) | 0;
       if (($7 | 0) == (-1 | 0)) {
        break block77
       }
       if (($0 | 0) == (-1 | 0)) {
        break block77
       }
       if ($7 >>> 0 >= $0 >>> 0) {
        break block77
       }
       $2 = $0 - $7 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break block77
       }
      }
      $0 = (HEAP32[(0 + 85284 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 85284 | 0) >> 2] = $0;
      block78 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 85288 | 0) >> 2] | 0) >>> 0) {
        break block78
       }
       HEAP32[(0 + 85288 | 0) >> 2] = $0;
      }
      block84 : {
       block81 : {
        block80 : {
         block79 : {
          $4 = HEAP32[(0 + 84876 | 0) >> 2] | 0;
          if (!$4) {
           break block79
          }
          $0 = 85300;
          label7 : while (1) {
           $5 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($7 | 0) == ($5 + $8 | 0 | 0)) {
            break block80
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label7
           }
           break block81;
          };
         }
         block83 : {
          block82 : {
           $0 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
           if (!$0) {
            break block82
           }
           if ($7 >>> 0 >= $0 >>> 0) {
            break block83
           }
          }
          HEAP32[(0 + 84868 | 0) >> 2] = $7;
         }
         $0 = 0;
         HEAP32[(0 + 85304 | 0) >> 2] = $2;
         HEAP32[(0 + 85300 | 0) >> 2] = $7;
         HEAP32[(0 + 84884 | 0) >> 2] = -1;
         HEAP32[(0 + 84888 | 0) >> 2] = HEAP32[(0 + 85324 | 0) >> 2] | 0;
         HEAP32[(0 + 85312 | 0) >> 2] = 0;
         label8 : while (1) {
          $4 = $0 << 3 | 0;
          $5 = $4 + 84892 | 0;
          HEAP32[($4 + 84900 | 0) >> 2] = $5;
          HEAP32[($4 + 84904 | 0) >> 2] = $5;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label8
          }
          break label8;
         };
         $0 = $2 + -40 | 0;
         $4 = (-8 - $7 | 0) & 7 | 0;
         $5 = $0 - $4 | 0;
         HEAP32[(0 + 84864 | 0) >> 2] = $5;
         $4 = $7 + $4 | 0;
         HEAP32[(0 + 84876 | 0) >> 2] = $4;
         HEAP32[($4 + 4 | 0) >> 2] = $5 | 1 | 0;
         HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 84880 | 0) >> 2] = HEAP32[(0 + 85340 | 0) >> 2] | 0;
         break block84;
        }
        if ($4 >>> 0 >= $7 >>> 0) {
         break block81
        }
        if ($4 >>> 0 < $5 >>> 0) {
         break block81
        }
        if ((HEAP32[($0 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break block81
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = (-8 - $4 | 0) & 7 | 0;
        $5 = $4 + $0 | 0;
        HEAP32[(0 + 84876 | 0) >> 2] = $5;
        $7 = (HEAP32[(0 + 84864 | 0) >> 2] | 0) + $2 | 0;
        $0 = $7 - $0 | 0;
        HEAP32[(0 + 84864 | 0) >> 2] = $0;
        HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 84880 | 0) >> 2] = HEAP32[(0 + 85340 | 0) >> 2] | 0;
        break block84;
       }
       block85 : {
        if ($7 >>> 0 >= (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
         break block85
        }
        HEAP32[(0 + 84868 | 0) >> 2] = $7;
       }
       $5 = $7 + $2 | 0;
       $0 = 85300;
       block87 : {
        block86 : {
         label9 : while (1) {
          $8 = HEAP32[$0 >> 2] | 0;
          if (($8 | 0) == ($5 | 0)) {
           break block86
          }
          $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if ($0) {
           continue label9
          }
          break block87;
         };
        }
        if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
         break block88
        }
       }
       $0 = 85300;
       block90 : {
        label10 : while (1) {
         block89 : {
          $5 = HEAP32[$0 >> 2] | 0;
          if ($4 >>> 0 < $5 >>> 0) {
           break block89
          }
          $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
          if ($4 >>> 0 < $5 >>> 0) {
           break block90
          }
         }
         $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         continue label10;
        };
       }
       $0 = $2 + -40 | 0;
       $8 = (-8 - $7 | 0) & 7 | 0;
       $12 = $0 - $8 | 0;
       HEAP32[(0 + 84864 | 0) >> 2] = $12;
       $8 = $7 + $8 | 0;
       HEAP32[(0 + 84876 | 0) >> 2] = $8;
       HEAP32[($8 + 4 | 0) >> 2] = $12 | 1 | 0;
       HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
       HEAP32[(0 + 84880 | 0) >> 2] = HEAP32[(0 + 85340 | 0) >> 2] | 0;
       $0 = ($5 + ((39 - $5 | 0) & 7 | 0) | 0) + -47 | 0;
       $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
       HEAP32[($8 + 4 | 0) >> 2] = 27;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85308 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85312 | 0) >> 2] | 0;
       $1154 = i64toi32_i32$0;
       i64toi32_i32$0 = $8 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1154;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85300 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85304 | 0) >> 2] | 0;
       $1156 = i64toi32_i32$1;
       i64toi32_i32$1 = $8;
       HEAP32[($8 + 8 | 0) >> 2] = $1156;
       HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(0 + 85308 | 0) >> 2] = $8 + 8 | 0;
       HEAP32[(0 + 85304 | 0) >> 2] = $2;
       HEAP32[(0 + 85300 | 0) >> 2] = $7;
       HEAP32[(0 + 85312 | 0) >> 2] = 0;
       $0 = $8 + 24 | 0;
       label11 : while (1) {
        HEAP32[($0 + 4 | 0) >> 2] = 7;
        $7 = $0 + 8 | 0;
        $0 = $0 + 4 | 0;
        if ($7 >>> 0 < $5 >>> 0) {
         continue label11
        }
        break label11;
       };
       if (($8 | 0) == ($4 | 0)) {
        break block84
       }
       HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
       $7 = $8 - $4 | 0;
       HEAP32[($4 + 4 | 0) >> 2] = $7 | 1 | 0;
       HEAP32[$8 >> 2] = $7;
       block94 : {
        block91 : {
         if ($7 >>> 0 > 255 >>> 0) {
          break block91
         }
         $0 = ($7 & -8 | 0) + 84892 | 0;
         block93 : {
          block92 : {
           $5 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
           $7 = 1 << ($7 >>> 3 | 0) | 0;
           if ($5 & $7 | 0) {
            break block92
           }
           HEAP32[(0 + 84852 | 0) >> 2] = $5 | $7 | 0;
           $5 = $0;
           break block93;
          }
          $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if ($5 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($0 + 8 | 0) >> 2] = $4;
         HEAP32[($5 + 12 | 0) >> 2] = $4;
         $7 = 12;
         $8 = 8;
         break block94;
        }
        $0 = 31;
        block95 : {
         if ($7 >>> 0 > 16777215 >>> 0) {
          break block95
         }
         $0 = Math_clz32($7 >>> 8 | 0);
         $0 = ((($7 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
        }
        HEAP32[($4 + 28 | 0) >> 2] = $0;
        i64toi32_i32$1 = $4;
        i64toi32_i32$0 = 0;
        HEAP32[($4 + 16 | 0) >> 2] = 0;
        HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
        $5 = ($0 << 2 | 0) + 85156 | 0;
        block98 : {
         block97 : {
          block96 : {
           $8 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
           $2 = 1 << $0 | 0;
           if ($8 & $2 | 0) {
            break block96
           }
           HEAP32[(0 + 84856 | 0) >> 2] = $8 | $2 | 0;
           HEAP32[$5 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $5;
           break block97;
          }
          $0 = $7 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
          $8 = HEAP32[$5 >> 2] | 0;
          label12 : while (1) {
           $5 = $8;
           if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7 | 0)) {
            break block98
           }
           $8 = $0 >>> 29 | 0;
           $0 = $0 << 1 | 0;
           $2 = $5 + ($8 & 4 | 0) | 0;
           $8 = HEAP32[($2 + 16 | 0) >> 2] | 0;
           if ($8) {
            continue label12
           }
           break label12;
          };
          $0 = $2 + 16 | 0;
          if ($0 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
          HEAP32[$0 >> 2] = $4;
          HEAP32[($4 + 24 | 0) >> 2] = $5;
         }
         $7 = 8;
         $8 = 12;
         $5 = $4;
         $0 = $5;
         break block94;
        }
        $7 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
        if ($5 >>> 0 < $7 >>> 0) {
         break block4
        }
        $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
        if ($0 >>> 0 < $7 >>> 0) {
         break block4
        }
        HEAP32[($0 + 12 | 0) >> 2] = $4;
        HEAP32[($5 + 8 | 0) >> 2] = $4;
        HEAP32[($4 + 8 | 0) >> 2] = $0;
        $0 = 0;
        $7 = 24;
        $8 = 12;
       }
       HEAP32[($4 + $8 | 0) >> 2] = $5;
       HEAP32[($4 + $7 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 84864 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break block77
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 84864 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 84876 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 84876 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break block5;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0 = 0;
     break block5;
    }
    abort();
    wasm2js_trap();
   }
   HEAP32[$0 >> 2] = $7;
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
   $0 = prepend_alloc($7 | 0, $8 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function prepend_alloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $8 = 0, $6 = 0, $9 = 0, $7 = 0, $3 = 0, $353 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = $0 + ((-8 - $0 | 0) & 7 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $2 | 3 | 0;
  $4 = $1 + ((-8 - $1 | 0) & 7 | 0) | 0;
  $5 = $3 + $2 | 0;
  $0 = $4 - $5 | 0;
  block6 : {
   block1 : {
    block : {
     if (($4 | 0) != (HEAP32[(0 + 84876 | 0) >> 2] | 0 | 0)) {
      break block
     }
     HEAP32[(0 + 84876 | 0) >> 2] = $5;
     $2 = (HEAP32[(0 + 84864 | 0) >> 2] | 0) + $0 | 0;
     HEAP32[(0 + 84864 | 0) >> 2] = $2;
     HEAP32[($5 + 4 | 0) >> 2] = $2 | 1 | 0;
     break block1;
    }
    block2 : {
     if (($4 | 0) != (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
      break block2
     }
     HEAP32[(0 + 84872 | 0) >> 2] = $5;
     $2 = (HEAP32[(0 + 84860 | 0) >> 2] | 0) + $0 | 0;
     HEAP32[(0 + 84860 | 0) >> 2] = $2;
     HEAP32[($5 + 4 | 0) >> 2] = $2 | 1 | 0;
     HEAP32[($5 + $2 | 0) >> 2] = $2;
     break block1;
    }
    block3 : {
     $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     if (($6 & 3 | 0 | 0) != (1 | 0)) {
      break block3
     }
     $2 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     block8 : {
      block4 : {
       if ($6 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
        $7 = $6 >>> 3 | 0;
        $8 = ($7 << 3 | 0) + 84892 | 0;
        if (($1 | 0) == ($8 | 0)) {
         break block5
        }
        if ($1 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break block6
        }
       }
       block7 : {
        if (($2 | 0) != ($1 | 0)) {
         break block7
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
        break block8;
       }
       block9 : {
        if (($2 | 0) == ($8 | 0)) {
         break block9
        }
        if ($2 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break block6
        }
       }
       HEAP32[($1 + 12 | 0) >> 2] = $2;
       HEAP32[($2 + 8 | 0) >> 2] = $1;
       break block8;
      }
      $9 = HEAP32[($4 + 24 | 0) >> 2] | 0;
      block11 : {
       block10 : {
        if (($2 | 0) == ($4 | 0)) {
         break block10
        }
        $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
        if ($1 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break block6
        }
        if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break block6
        }
        HEAP32[($1 + 12 | 0) >> 2] = $2;
        HEAP32[($2 + 8 | 0) >> 2] = $1;
        break block11;
       }
       block14 : {
        block13 : {
         block12 : {
          $1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
          if (!$1) {
           break block12
          }
          $8 = $4 + 20 | 0;
          break block13;
         }
         $1 = HEAP32[($4 + 16 | 0) >> 2] | 0;
         if (!$1) {
          break block14
         }
         $8 = $4 + 16 | 0;
        }
        label : while (1) {
         $7 = $8;
         $2 = $1;
         $8 = $2 + 20 | 0;
         $1 = HEAP32[($2 + 20 | 0) >> 2] | 0;
         if ($1) {
          continue label
         }
         $8 = $2 + 16 | 0;
         $1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
         if ($1) {
          continue label
         }
         break label;
        };
        if ($7 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        HEAP32[$7 >> 2] = 0;
        break block11;
       }
       $2 = 0;
      }
      if (!$9) {
       break block8
      }
      block16 : {
       block15 : {
        $8 = HEAP32[($4 + 28 | 0) >> 2] | 0;
        $1 = ($8 << 2 | 0) + 85156 | 0;
        if (($4 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break block16
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
        break block8;
       }
       if ($9 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
        break block6
       }
       block18 : {
        block17 : {
         if ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block17
         }
         HEAP32[($9 + 16 | 0) >> 2] = $2;
         break block18;
        }
        HEAP32[($9 + 20 | 0) >> 2] = $2;
       }
       if (!$2) {
        break block8
       }
      }
      $8 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
      if ($2 >>> 0 < $8 >>> 0) {
       break block6
      }
      HEAP32[($2 + 24 | 0) >> 2] = $9;
      block19 : {
       $1 = HEAP32[($4 + 16 | 0) >> 2] | 0;
       if (!$1) {
        break block19
       }
       if ($1 >>> 0 < $8 >>> 0) {
        break block6
       }
       HEAP32[($2 + 16 | 0) >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $2;
      }
      $1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
      if (!$1) {
       break block8
      }
      if ($1 >>> 0 < $8 >>> 0) {
       break block6
      }
      HEAP32[($2 + 20 | 0) >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $2;
     }
     $2 = $6 & -8 | 0;
     $0 = $2 + $0 | 0;
     $4 = $4 + $2 | 0;
     $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($4 + 4 | 0) >> 2] = $6 & -2 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($5 + $0 | 0) >> 2] = $0;
    block20 : {
     if ($0 >>> 0 > 255 >>> 0) {
      break block20
     }
     $2 = ($0 & -8 | 0) + 84892 | 0;
     block22 : {
      block21 : {
       $1 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
       $0 = 1 << ($0 >>> 3 | 0) | 0;
       if ($1 & $0 | 0) {
        break block21
       }
       HEAP32[(0 + 84852 | 0) >> 2] = $1 | $0 | 0;
       $0 = $2;
       break block22;
      }
      $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      if ($0 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
     }
     HEAP32[($2 + 8 | 0) >> 2] = $5;
     HEAP32[($0 + 12 | 0) >> 2] = $5;
     HEAP32[($5 + 12 | 0) >> 2] = $2;
     HEAP32[($5 + 8 | 0) >> 2] = $0;
     break block1;
    }
    $2 = 31;
    block23 : {
     if ($0 >>> 0 > 16777215 >>> 0) {
      break block23
     }
     $2 = Math_clz32($0 >>> 8 | 0);
     $2 = ((($0 >>> (38 - $2 | 0) | 0) & 1 | 0) - ($2 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($5 + 28 | 0) >> 2] = $2;
    HEAP32[($5 + 16 | 0) >> 2] = 0;
    HEAP32[($5 + 20 | 0) >> 2] = 0;
    $1 = ($2 << 2 | 0) + 85156 | 0;
    block26 : {
     block25 : {
      block24 : {
       $8 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
       $4 = 1 << $2 | 0;
       if ($8 & $4 | 0) {
        break block24
       }
       HEAP32[(0 + 84856 | 0) >> 2] = $8 | $4 | 0;
       HEAP32[$1 >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $1;
       break block25;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $8 = HEAP32[$1 >> 2] | 0;
      label1 : while (1) {
       $1 = $8;
       if (((HEAP32[($1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break block26
       }
       $8 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $4 = $1 + ($8 & 4 | 0) | 0;
       $8 = HEAP32[($4 + 16 | 0) >> 2] | 0;
       if ($8) {
        continue label1
       }
       break label1;
      };
      $2 = $4 + 16 | 0;
      if ($2 >>> 0 < (HEAP32[(0 + 84868 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
      HEAP32[$2 >> 2] = $5;
      HEAP32[($5 + 24 | 0) >> 2] = $1;
     }
     HEAP32[($5 + 12 | 0) >> 2] = $5;
     HEAP32[($5 + 8 | 0) >> 2] = $5;
     break block1;
    }
    $0 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
    if ($1 >>> 0 < $0 >>> 0) {
     break block6
    }
    $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($2 >>> 0 < $0 >>> 0) {
     break block6
    }
    HEAP32[($2 + 12 | 0) >> 2] = $5;
    HEAP32[($1 + 8 | 0) >> 2] = $5;
    HEAP32[($5 + 24 | 0) >> 2] = 0;
    HEAP32[($5 + 12 | 0) >> 2] = $1;
    HEAP32[($5 + 8 | 0) >> 2] = $2;
   }
   return $3 + 8 | 0 | 0;
  }
  abort();
  wasm2js_trap();
 }
 
 function emscripten_builtin_free($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $1 = 0, $6 = 0, $4 = 0, $2 = 0, $7 = 0, $8 = 0, $10 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block1 : {
   block : {
    if (!$0) {
     break block
    }
    $1 = $0 + -8 | 0;
    $2 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
    if ($1 >>> 0 < $2 >>> 0) {
     break block1
    }
    $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    if (($3 & 3 | 0 | 0) == (1 | 0)) {
     break block1
    }
    $0 = $3 & -8 | 0;
    $4 = $1 + $0 | 0;
    block2 : {
     if ($3 & 1 | 0) {
      break block2
     }
     if (!($3 & 2 | 0)) {
      break block
     }
     $5 = HEAP32[$1 >> 2] | 0;
     $1 = $1 - $5 | 0;
     if ($1 >>> 0 < $2 >>> 0) {
      break block1
     }
     $0 = $5 + $0 | 0;
     block3 : {
      if (($1 | 0) == (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      block4 : {
       if ($5 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        $7 = $5 >>> 3 | 0;
        $5 = ($7 << 3 | 0) + 84892 | 0;
        if (($6 | 0) == ($5 | 0)) {
         break block5
        }
        if ($6 >>> 0 < $2 >>> 0) {
         break block1
        }
        if ((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break block1
        }
       }
       block6 : {
        if (($3 | 0) != ($6 | 0)) {
         break block6
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
        break block2;
       }
       block7 : {
        if (($3 | 0) == ($5 | 0)) {
         break block7
        }
        if ($3 >>> 0 < $2 >>> 0) {
         break block1
        }
        if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break block1
        }
       }
       HEAP32[($6 + 12 | 0) >> 2] = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $6;
       break block2;
      }
      $8 = HEAP32[($1 + 24 | 0) >> 2] | 0;
      block9 : {
       block8 : {
        if (($3 | 0) == ($1 | 0)) {
         break block8
        }
        $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        if ($5 >>> 0 < $2 >>> 0) {
         break block1
        }
        if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break block1
        }
        if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break block1
        }
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        break block9;
       }
       block12 : {
        block11 : {
         block10 : {
          $5 = HEAP32[($1 + 20 | 0) >> 2] | 0;
          if (!$5) {
           break block10
          }
          $6 = $1 + 20 | 0;
          break block11;
         }
         $5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
         if (!$5) {
          break block12
         }
         $6 = $1 + 16 | 0;
        }
        label : while (1) {
         $7 = $6;
         $3 = $5;
         $6 = $3 + 20 | 0;
         $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
         if ($5) {
          continue label
         }
         $6 = $3 + 16 | 0;
         $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($5) {
          continue label
         }
         break label;
        };
        if ($7 >>> 0 < $2 >>> 0) {
         break block1
        }
        HEAP32[$7 >> 2] = 0;
        break block9;
       }
       $3 = 0;
      }
      if (!$8) {
       break block2
      }
      block14 : {
       block13 : {
        $6 = HEAP32[($1 + 28 | 0) >> 2] | 0;
        $5 = ($6 << 2 | 0) + 85156 | 0;
        if (($1 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
         break block13
        }
        HEAP32[$5 >> 2] = $3;
        if ($3) {
         break block14
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
        break block2;
       }
       if ($8 >>> 0 < $2 >>> 0) {
        break block1
       }
       block16 : {
        block15 : {
         if ((HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
          break block15
         }
         HEAP32[($8 + 16 | 0) >> 2] = $3;
         break block16;
        }
        HEAP32[($8 + 20 | 0) >> 2] = $3;
       }
       if (!$3) {
        break block2
       }
      }
      if ($3 >>> 0 < $2 >>> 0) {
       break block1
      }
      HEAP32[($3 + 24 | 0) >> 2] = $8;
      block17 : {
       $5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
       if (!$5) {
        break block17
       }
       if ($5 >>> 0 < $2 >>> 0) {
        break block1
       }
       HEAP32[($3 + 16 | 0) >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $3;
      }
      $5 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      if (!$5) {
       break block2
      }
      if ($5 >>> 0 < $2 >>> 0) {
       break block1
      }
      HEAP32[($3 + 20 | 0) >> 2] = $5;
      HEAP32[($5 + 24 | 0) >> 2] = $3;
      break block2;
     }
     $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break block2
     }
     HEAP32[(0 + 84860 | 0) >> 2] = $0;
     HEAP32[($4 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[$4 >> 2] = $0;
     return;
    }
    if ($1 >>> 0 >= $4 >>> 0) {
     break block1
    }
    $7 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    if (!($7 & 1 | 0)) {
     break block1
    }
    block36 : {
     block18 : {
      if ($7 & 2 | 0) {
       break block18
      }
      block19 : {
       if (($4 | 0) != (HEAP32[(0 + 84876 | 0) >> 2] | 0 | 0)) {
        break block19
       }
       HEAP32[(0 + 84876 | 0) >> 2] = $1;
       $0 = (HEAP32[(0 + 84864 | 0) >> 2] | 0) + $0 | 0;
       HEAP32[(0 + 84864 | 0) >> 2] = $0;
       HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
       if (($1 | 0) != (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
        break block
       }
       HEAP32[(0 + 84860 | 0) >> 2] = 0;
       HEAP32[(0 + 84872 | 0) >> 2] = 0;
       return;
      }
      block20 : {
       $9 = HEAP32[(0 + 84872 | 0) >> 2] | 0;
       if (($4 | 0) != ($9 | 0)) {
        break block20
       }
       HEAP32[(0 + 84872 | 0) >> 2] = $1;
       $0 = (HEAP32[(0 + 84860 | 0) >> 2] | 0) + $0 | 0;
       HEAP32[(0 + 84860 | 0) >> 2] = $0;
       HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
       HEAP32[($1 + $0 | 0) >> 2] = $0;
       return;
      }
      $3 = HEAP32[($4 + 12 | 0) >> 2] | 0;
      block24 : {
       block21 : {
        if ($7 >>> 0 > 255 >>> 0) {
         break block21
        }
        block22 : {
         $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         $8 = $7 >>> 3 | 0;
         $6 = ($8 << 3 | 0) + 84892 | 0;
         if (($5 | 0) == ($6 | 0)) {
          break block22
         }
         if ($5 >>> 0 < $2 >>> 0) {
          break block1
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block1
         }
        }
        block23 : {
         if (($3 | 0) != ($5 | 0)) {
          break block23
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
         break block24;
        }
        block25 : {
         if (($3 | 0) == ($6 | 0)) {
          break block25
         }
         if ($3 >>> 0 < $2 >>> 0) {
          break block1
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block1
         }
        }
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        break block24;
       }
       $10 = HEAP32[($4 + 24 | 0) >> 2] | 0;
       block27 : {
        block26 : {
         if (($3 | 0) == ($4 | 0)) {
          break block26
         }
         $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         if ($5 >>> 0 < $2 >>> 0) {
          break block1
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block1
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break block1
         }
         HEAP32[($5 + 12 | 0) >> 2] = $3;
         HEAP32[($3 + 8 | 0) >> 2] = $5;
         break block27;
        }
        block30 : {
         block29 : {
          block28 : {
           $5 = HEAP32[($4 + 20 | 0) >> 2] | 0;
           if (!$5) {
            break block28
           }
           $6 = $4 + 20 | 0;
           break block29;
          }
          $5 = HEAP32[($4 + 16 | 0) >> 2] | 0;
          if (!$5) {
           break block30
          }
          $6 = $4 + 16 | 0;
         }
         label1 : while (1) {
          $8 = $6;
          $3 = $5;
          $6 = $3 + 20 | 0;
          $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          $6 = $3 + 16 | 0;
          $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          break label1;
         };
         if ($8 >>> 0 < $2 >>> 0) {
          break block1
         }
         HEAP32[$8 >> 2] = 0;
         break block27;
        }
        $3 = 0;
       }
       if (!$10) {
        break block24
       }
       block32 : {
        block31 : {
         $6 = HEAP32[($4 + 28 | 0) >> 2] | 0;
         $5 = ($6 << 2 | 0) + 85156 | 0;
         if (($4 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
          break block31
         }
         HEAP32[$5 >> 2] = $3;
         if ($3) {
          break block32
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
         break block24;
        }
        if ($10 >>> 0 < $2 >>> 0) {
         break block1
        }
        block34 : {
         block33 : {
          if ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
           break block33
          }
          HEAP32[($10 + 16 | 0) >> 2] = $3;
          break block34;
         }
         HEAP32[($10 + 20 | 0) >> 2] = $3;
        }
        if (!$3) {
         break block24
        }
       }
       if ($3 >>> 0 < $2 >>> 0) {
        break block1
       }
       HEAP32[($3 + 24 | 0) >> 2] = $10;
       block35 : {
        $5 = HEAP32[($4 + 16 | 0) >> 2] | 0;
        if (!$5) {
         break block35
        }
        if ($5 >>> 0 < $2 >>> 0) {
         break block1
        }
        HEAP32[($3 + 16 | 0) >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = $3;
       }
       $5 = HEAP32[($4 + 20 | 0) >> 2] | 0;
       if (!$5) {
        break block24
       }
       if ($5 >>> 0 < $2 >>> 0) {
        break block1
       }
       HEAP32[($3 + 20 | 0) >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $3;
      }
      $0 = ($7 & -8 | 0) + $0 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      if (($1 | 0) != ($9 | 0)) {
       break block36
      }
      HEAP32[(0 + 84860 | 0) >> 2] = $0;
      return;
     }
     HEAP32[($4 + 4 | 0) >> 2] = $7 & -2 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
    }
    block37 : {
     if ($0 >>> 0 > 255 >>> 0) {
      break block37
     }
     $3 = ($0 & -8 | 0) + 84892 | 0;
     block39 : {
      block38 : {
       $5 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
       $0 = 1 << ($0 >>> 3 | 0) | 0;
       if ($5 & $0 | 0) {
        break block38
       }
       HEAP32[(0 + 84852 | 0) >> 2] = $5 | $0 | 0;
       $0 = $3;
       break block39;
      }
      $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      if ($0 >>> 0 < $2 >>> 0) {
       break block1
      }
     }
     HEAP32[($3 + 8 | 0) >> 2] = $1;
     HEAP32[($0 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 12 | 0) >> 2] = $3;
     HEAP32[($1 + 8 | 0) >> 2] = $0;
     return;
    }
    $3 = 31;
    block40 : {
     if ($0 >>> 0 > 16777215 >>> 0) {
      break block40
     }
     $3 = Math_clz32($0 >>> 8 | 0);
     $3 = ((($0 >>> (38 - $3 | 0) | 0) & 1 | 0) - ($3 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($1 + 28 | 0) >> 2] = $3;
    HEAP32[($1 + 16 | 0) >> 2] = 0;
    HEAP32[($1 + 20 | 0) >> 2] = 0;
    $6 = ($3 << 2 | 0) + 85156 | 0;
    block44 : {
     block43 : {
      block42 : {
       block41 : {
        $5 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
        $4 = 1 << $3 | 0;
        if ($5 & $4 | 0) {
         break block41
        }
        HEAP32[(0 + 84856 | 0) >> 2] = $5 | $4 | 0;
        HEAP32[$6 >> 2] = $1;
        $0 = 8;
        $3 = 24;
        break block42;
       }
       $3 = $0 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
       $6 = HEAP32[$6 >> 2] | 0;
       label2 : while (1) {
        $5 = $6;
        if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
         break block43
        }
        $6 = $3 >>> 29 | 0;
        $3 = $3 << 1 | 0;
        $4 = $5 + ($6 & 4 | 0) | 0;
        $6 = HEAP32[($4 + 16 | 0) >> 2] | 0;
        if ($6) {
         continue label2
        }
        break label2;
       };
       $0 = $4 + 16 | 0;
       if ($0 >>> 0 < $2 >>> 0) {
        break block1
       }
       HEAP32[$0 >> 2] = $1;
       $0 = 8;
       $3 = 24;
       $6 = $5;
      }
      $5 = $1;
      $4 = $5;
      break block44;
     }
     if ($5 >>> 0 < $2 >>> 0) {
      break block1
     }
     $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     if ($6 >>> 0 < $2 >>> 0) {
      break block1
     }
     HEAP32[($6 + 12 | 0) >> 2] = $1;
     HEAP32[($5 + 8 | 0) >> 2] = $1;
     $4 = 0;
     $0 = 24;
     $3 = 8;
    }
    HEAP32[($1 + $3 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = $5;
    HEAP32[($1 + $0 | 0) >> 2] = $4;
    $1 = (HEAP32[(0 + 84884 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 84884 | 0) >> 2] = $1 ? $1 : -1;
   }
   return;
  }
  abort();
  wasm2js_trap();
 }
 
 function emscripten_builtin_realloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block : {
   if ($0) {
    break block
   }
   return emscripten_builtin_malloc($1 | 0) | 0 | 0;
  }
  block1 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break block1
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  block2 : {
   $2 = try_realloc_chunk($0 + -8 | 0 | 0, ($1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2) {
    break block2
   }
   return $2 + 8 | 0 | 0;
  }
  block3 : {
   $2 = emscripten_builtin_malloc($1 | 0) | 0;
   if ($2) {
    break block3
   }
   return 0 | 0;
  }
  $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
  $3 = ($3 & 3 | 0 ? -4 : -8) + ($3 & -8 | 0) | 0;
  __memcpy($2 | 0, $0 | 0, ($3 >>> 0 < $1 >>> 0 ? $3 : $1) | 0) | 0;
  emscripten_builtin_free($0 | 0);
  return $2 | 0;
 }
 
 function try_realloc_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $6 = 0, $7 = 0, $3 = 0, $2 = 0, $10 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block2 : {
   block : {
    $2 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
    if ($0 >>> 0 < $2 >>> 0) {
     break block
    }
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $4 = $3 & 3 | 0;
    if (($4 | 0) == (1 | 0)) {
     break block
    }
    $5 = $3 & -8 | 0;
    if (!$5) {
     break block
    }
    $6 = $0 + $5 | 0;
    $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    if (!($7 & 1 | 0)) {
     break block
    }
    block1 : {
     if ($4) {
      break block1
     }
     $4 = 0;
     if ($1 >>> 0 < 256 >>> 0) {
      break block2
     }
     block3 : {
      if ($5 >>> 0 < ($1 + 4 | 0) >>> 0) {
       break block3
      }
      $4 = $0;
      if (($5 - $1 | 0) >>> 0 <= ((HEAP32[(0 + 85332 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
       break block2
      }
     }
     $4 = 0;
     break block2;
    }
    block4 : {
     if ($5 >>> 0 < $1 >>> 0) {
      break block4
     }
     block5 : {
      $5 = $5 - $1 | 0;
      if ($5 >>> 0 < 16 >>> 0) {
       break block5
      }
      HEAP32[($0 + 4 | 0) >> 2] = $1 | ($3 & 1 | 0) | 0 | 2 | 0;
      $1 = $0 + $1 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $5 | 3 | 0;
      HEAP32[($6 + 4 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0 | 1 | 0;
      dispose_chunk($1 | 0, $5 | 0);
     }
     return $0 | 0;
    }
    $4 = 0;
    block6 : {
     if (($6 | 0) != (HEAP32[(0 + 84876 | 0) >> 2] | 0 | 0)) {
      break block6
     }
     $5 = (HEAP32[(0 + 84864 | 0) >> 2] | 0) + $5 | 0;
     if ($5 >>> 0 <= $1 >>> 0) {
      break block2
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1 | ($3 & 1 | 0) | 0 | 2 | 0;
     $3 = $0 + $1 | 0;
     $5 = $5 - $1 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $5 | 1 | 0;
     HEAP32[(0 + 84864 | 0) >> 2] = $5;
     HEAP32[(0 + 84876 | 0) >> 2] = $3;
     return $0 | 0;
    }
    block7 : {
     if (($6 | 0) != (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
      break block7
     }
     $4 = 0;
     $5 = (HEAP32[(0 + 84860 | 0) >> 2] | 0) + $5 | 0;
     if ($5 >>> 0 < $1 >>> 0) {
      break block2
     }
     block9 : {
      block8 : {
       $4 = $5 - $1 | 0;
       if ($4 >>> 0 < 16 >>> 0) {
        break block8
       }
       HEAP32[($0 + 4 | 0) >> 2] = $1 | ($3 & 1 | 0) | 0 | 2 | 0;
       $1 = $0 + $1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $4 | 1 | 0;
       $5 = $0 + $5 | 0;
       HEAP32[$5 >> 2] = $4;
       HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) & -2 | 0;
       break block9;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $5 | 0 | 2 | 0;
      $5 = $0 + $5 | 0;
      HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4 = 0;
      $1 = 0;
     }
     HEAP32[(0 + 84872 | 0) >> 2] = $1;
     HEAP32[(0 + 84860 | 0) >> 2] = $4;
     return $0 | 0;
    }
    $4 = 0;
    if ($7 & 2 | 0) {
     break block2
    }
    $8 = ($7 & -8 | 0) + $5 | 0;
    if ($8 >>> 0 < $1 >>> 0) {
     break block2
    }
    $5 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    block13 : {
     block10 : {
      if ($7 >>> 0 > 255 >>> 0) {
       break block10
      }
      block11 : {
       $4 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       $9 = $7 >>> 3 | 0;
       $7 = ($9 << 3 | 0) + 84892 | 0;
       if (($4 | 0) == ($7 | 0)) {
        break block11
       }
       if ($4 >>> 0 < $2 >>> 0) {
        break block
       }
       if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break block
       }
      }
      block12 : {
       if (($5 | 0) != ($4 | 0)) {
        break block12
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
       break block13;
      }
      block14 : {
       if (($5 | 0) == ($7 | 0)) {
        break block14
       }
       if ($5 >>> 0 < $2 >>> 0) {
        break block
       }
       if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break block
       }
      }
      HEAP32[($4 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $4;
      break block13;
     }
     $10 = HEAP32[($6 + 24 | 0) >> 2] | 0;
     block16 : {
      block15 : {
       if (($5 | 0) == ($6 | 0)) {
        break block15
       }
       $4 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       if ($4 >>> 0 < $2 >>> 0) {
        break block
       }
       if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break block
       }
       if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break block
       }
       HEAP32[($4 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $4;
       break block16;
      }
      block19 : {
       block18 : {
        block17 : {
         $4 = HEAP32[($6 + 20 | 0) >> 2] | 0;
         if (!$4) {
          break block17
         }
         $7 = $6 + 20 | 0;
         break block18;
        }
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if (!$4) {
         break block19
        }
        $7 = $6 + 16 | 0;
       }
       label : while (1) {
        $9 = $7;
        $5 = $4;
        $7 = $5 + 20 | 0;
        $4 = HEAP32[($5 + 20 | 0) >> 2] | 0;
        if ($4) {
         continue label
        }
        $7 = $5 + 16 | 0;
        $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label
        }
        break label;
       };
       if ($9 >>> 0 < $2 >>> 0) {
        break block
       }
       HEAP32[$9 >> 2] = 0;
       break block16;
      }
      $5 = 0;
     }
     if (!$10) {
      break block13
     }
     block21 : {
      block20 : {
       $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
       $4 = ($7 << 2 | 0) + 85156 | 0;
       if (($6 | 0) != (HEAP32[$4 >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[$4 >> 2] = $5;
       if ($5) {
        break block21
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
       break block13;
      }
      if ($10 >>> 0 < $2 >>> 0) {
       break block
      }
      block23 : {
       block22 : {
        if ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
         break block22
        }
        HEAP32[($10 + 16 | 0) >> 2] = $5;
        break block23;
       }
       HEAP32[($10 + 20 | 0) >> 2] = $5;
      }
      if (!$5) {
       break block13
      }
     }
     if ($5 >>> 0 < $2 >>> 0) {
      break block
     }
     HEAP32[($5 + 24 | 0) >> 2] = $10;
     block24 : {
      $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
      if (!$4) {
       break block24
      }
      if ($4 >>> 0 < $2 >>> 0) {
       break block
      }
      HEAP32[($5 + 16 | 0) >> 2] = $4;
      HEAP32[($4 + 24 | 0) >> 2] = $5;
     }
     $4 = HEAP32[($6 + 20 | 0) >> 2] | 0;
     if (!$4) {
      break block13
     }
     if ($4 >>> 0 < $2 >>> 0) {
      break block
     }
     HEAP32[($5 + 20 | 0) >> 2] = $4;
     HEAP32[($4 + 24 | 0) >> 2] = $5;
    }
    block25 : {
     $5 = $8 - $1 | 0;
     if ($5 >>> 0 > 15 >>> 0) {
      break block25
     }
     HEAP32[($0 + 4 | 0) >> 2] = $3 & 1 | 0 | $8 | 0 | 2 | 0;
     $5 = $0 + $8 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
     return $0 | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1 | ($3 & 1 | 0) | 0 | 2 | 0;
    $1 = $0 + $1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $5 | 3 | 0;
    $3 = $0 + $8 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $5 | 0);
    return $0 | 0;
   }
   abort();
   wasm2js_trap();
  }
  return $4 | 0;
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $2 = 0, $4 = 0, $8 = 0, $7 = 0, $10 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = $0 + $1 | 0;
  block3 : {
   block2 : {
    block1 : {
     block : {
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (!($3 & 1 | 0)) {
       break block
      }
      $4 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
      break block1;
     }
     if (!($3 & 2 | 0)) {
      break block2
     }
     $5 = HEAP32[$0 >> 2] | 0;
     $0 = $0 - $5 | 0;
     $4 = HEAP32[(0 + 84868 | 0) >> 2] | 0;
     if ($0 >>> 0 < $4 >>> 0) {
      break block3
     }
     $1 = $5 + $1 | 0;
     block4 : {
      if (($0 | 0) == (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
       break block4
      }
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      block5 : {
       if ($5 >>> 0 > 255 >>> 0) {
        break block5
       }
       block6 : {
        $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $7 = $5 >>> 3 | 0;
        $5 = ($7 << 3 | 0) + 84892 | 0;
        if (($6 | 0) == ($5 | 0)) {
         break block6
        }
        if ($6 >>> 0 < $4 >>> 0) {
         break block3
        }
        if ((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break block3
        }
       }
       block7 : {
        if (($3 | 0) != ($6 | 0)) {
         break block7
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
        break block1;
       }
       block8 : {
        if (($3 | 0) == ($5 | 0)) {
         break block8
        }
        if ($3 >>> 0 < $4 >>> 0) {
         break block3
        }
        if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break block3
        }
       }
       HEAP32[($6 + 12 | 0) >> 2] = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $6;
       break block1;
      }
      $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      block10 : {
       block9 : {
        if (($3 | 0) == ($0 | 0)) {
         break block9
        }
        $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if ($5 >>> 0 < $4 >>> 0) {
         break block3
        }
        if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break block3
        }
        if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
         break block3
        }
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        break block10;
       }
       block13 : {
        block12 : {
         block11 : {
          $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
          if (!$5) {
           break block11
          }
          $6 = $0 + 20 | 0;
          break block12;
         }
         $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if (!$5) {
          break block13
         }
         $6 = $0 + 16 | 0;
        }
        label : while (1) {
         $7 = $6;
         $3 = $5;
         $6 = $3 + 20 | 0;
         $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
         if ($5) {
          continue label
         }
         $6 = $3 + 16 | 0;
         $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($5) {
          continue label
         }
         break label;
        };
        if ($7 >>> 0 < $4 >>> 0) {
         break block3
        }
        HEAP32[$7 >> 2] = 0;
        break block10;
       }
       $3 = 0;
      }
      if (!$8) {
       break block1
      }
      block15 : {
       block14 : {
        $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
        $5 = ($6 << 2 | 0) + 85156 | 0;
        if (($0 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
         break block14
        }
        HEAP32[$5 >> 2] = $3;
        if ($3) {
         break block15
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
        break block1;
       }
       if ($8 >>> 0 < $4 >>> 0) {
        break block3
       }
       block17 : {
        block16 : {
         if ((HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
          break block16
         }
         HEAP32[($8 + 16 | 0) >> 2] = $3;
         break block17;
        }
        HEAP32[($8 + 20 | 0) >> 2] = $3;
       }
       if (!$3) {
        break block1
       }
      }
      if ($3 >>> 0 < $4 >>> 0) {
       break block3
      }
      HEAP32[($3 + 24 | 0) >> 2] = $8;
      block18 : {
       $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$5) {
        break block18
       }
       if ($5 >>> 0 < $4 >>> 0) {
        break block3
       }
       HEAP32[($3 + 16 | 0) >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $3;
      }
      $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$5) {
       break block1
      }
      if ($5 >>> 0 < $4 >>> 0) {
       break block3
      }
      HEAP32[($3 + 20 | 0) >> 2] = $5;
      HEAP32[($5 + 24 | 0) >> 2] = $3;
      break block1;
     }
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break block1
     }
     HEAP32[(0 + 84860 | 0) >> 2] = $1;
     HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[$2 >> 2] = $1;
     return;
    }
    if ($2 >>> 0 < $4 >>> 0) {
     break block3
    }
    block37 : {
     block19 : {
      $8 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if ($8 & 2 | 0) {
       break block19
      }
      block20 : {
       if (($2 | 0) != (HEAP32[(0 + 84876 | 0) >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[(0 + 84876 | 0) >> 2] = $0;
       $1 = (HEAP32[(0 + 84864 | 0) >> 2] | 0) + $1 | 0;
       HEAP32[(0 + 84864 | 0) >> 2] = $1;
       HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
       if (($0 | 0) != (HEAP32[(0 + 84872 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[(0 + 84860 | 0) >> 2] = 0;
       HEAP32[(0 + 84872 | 0) >> 2] = 0;
       return;
      }
      block21 : {
       $9 = HEAP32[(0 + 84872 | 0) >> 2] | 0;
       if (($2 | 0) != ($9 | 0)) {
        break block21
       }
       HEAP32[(0 + 84872 | 0) >> 2] = $0;
       $1 = (HEAP32[(0 + 84860 | 0) >> 2] | 0) + $1 | 0;
       HEAP32[(0 + 84860 | 0) >> 2] = $1;
       HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
       HEAP32[($0 + $1 | 0) >> 2] = $1;
       return;
      }
      $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      block25 : {
       block22 : {
        if ($8 >>> 0 > 255 >>> 0) {
         break block22
        }
        block23 : {
         $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         $7 = $8 >>> 3 | 0;
         $6 = ($7 << 3 | 0) + 84892 | 0;
         if (($5 | 0) == ($6 | 0)) {
          break block23
         }
         if ($5 >>> 0 < $4 >>> 0) {
          break block3
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break block3
         }
        }
        block24 : {
         if (($3 | 0) != ($5 | 0)) {
          break block24
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84852 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84852 | 0) >> 2] = wasm2js_i32$1;
         break block25;
        }
        block26 : {
         if (($3 | 0) == ($6 | 0)) {
          break block26
         }
         if ($3 >>> 0 < $4 >>> 0) {
          break block3
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break block3
         }
        }
        HEAP32[($5 + 12 | 0) >> 2] = $3;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        break block25;
       }
       $10 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       block28 : {
        block27 : {
         if (($3 | 0) == ($2 | 0)) {
          break block27
         }
         $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         if ($5 >>> 0 < $4 >>> 0) {
          break block3
         }
         if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break block3
         }
         if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break block3
         }
         HEAP32[($5 + 12 | 0) >> 2] = $3;
         HEAP32[($3 + 8 | 0) >> 2] = $5;
         break block28;
        }
        block31 : {
         block30 : {
          block29 : {
           $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
           if (!$5) {
            break block29
           }
           $6 = $2 + 20 | 0;
           break block30;
          }
          $5 = HEAP32[($2 + 16 | 0) >> 2] | 0;
          if (!$5) {
           break block31
          }
          $6 = $2 + 16 | 0;
         }
         label1 : while (1) {
          $7 = $6;
          $3 = $5;
          $6 = $3 + 20 | 0;
          $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          $6 = $3 + 16 | 0;
          $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
          if ($5) {
           continue label1
          }
          break label1;
         };
         if ($7 >>> 0 < $4 >>> 0) {
          break block3
         }
         HEAP32[$7 >> 2] = 0;
         break block28;
        }
        $3 = 0;
       }
       if (!$10) {
        break block25
       }
       block33 : {
        block32 : {
         $6 = HEAP32[($2 + 28 | 0) >> 2] | 0;
         $5 = ($6 << 2 | 0) + 85156 | 0;
         if (($2 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
          break block32
         }
         HEAP32[$5 >> 2] = $3;
         if ($3) {
          break block33
         }
         (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 84856 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84856 | 0) >> 2] = wasm2js_i32$1;
         break block25;
        }
        if ($10 >>> 0 < $4 >>> 0) {
         break block3
        }
        block35 : {
         block34 : {
          if ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
           break block34
          }
          HEAP32[($10 + 16 | 0) >> 2] = $3;
          break block35;
         }
         HEAP32[($10 + 20 | 0) >> 2] = $3;
        }
        if (!$3) {
         break block25
        }
       }
       if ($3 >>> 0 < $4 >>> 0) {
        break block3
       }
       HEAP32[($3 + 24 | 0) >> 2] = $10;
       block36 : {
        $5 = HEAP32[($2 + 16 | 0) >> 2] | 0;
        if (!$5) {
         break block36
        }
        if ($5 >>> 0 < $4 >>> 0) {
         break block3
        }
        HEAP32[($3 + 16 | 0) >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = $3;
       }
       $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       if (!$5) {
        break block25
       }
       if ($5 >>> 0 < $4 >>> 0) {
        break block3
       }
       HEAP32[($3 + 20 | 0) >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $3;
      }
      $1 = ($8 & -8 | 0) + $1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      if (($0 | 0) != ($9 | 0)) {
       break block37
      }
      HEAP32[(0 + 84860 | 0) >> 2] = $1;
      return;
     }
     HEAP32[($2 + 4 | 0) >> 2] = $8 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
    }
    block38 : {
     if ($1 >>> 0 > 255 >>> 0) {
      break block38
     }
     $3 = ($1 & -8 | 0) + 84892 | 0;
     block40 : {
      block39 : {
       $5 = HEAP32[(0 + 84852 | 0) >> 2] | 0;
       $1 = 1 << ($1 >>> 3 | 0) | 0;
       if ($5 & $1 | 0) {
        break block39
       }
       HEAP32[(0 + 84852 | 0) >> 2] = $5 | $1 | 0;
       $1 = $3;
       break block40;
      }
      $1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      if ($1 >>> 0 < $4 >>> 0) {
       break block3
      }
     }
     HEAP32[($3 + 8 | 0) >> 2] = $0;
     HEAP32[($1 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $3;
     HEAP32[($0 + 8 | 0) >> 2] = $1;
     return;
    }
    $3 = 31;
    block41 : {
     if ($1 >>> 0 > 16777215 >>> 0) {
      break block41
     }
     $3 = Math_clz32($1 >>> 8 | 0);
     $3 = ((($1 >>> (38 - $3 | 0) | 0) & 1 | 0) - ($3 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $3;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    $5 = ($3 << 2 | 0) + 85156 | 0;
    block44 : {
     block43 : {
      block42 : {
       $6 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
       $2 = 1 << $3 | 0;
       if ($6 & $2 | 0) {
        break block42
       }
       HEAP32[(0 + 84856 | 0) >> 2] = $6 | $2 | 0;
       HEAP32[$5 >> 2] = $0;
       HEAP32[($0 + 24 | 0) >> 2] = $5;
       break block43;
      }
      $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$5 >> 2] | 0;
      label2 : while (1) {
       $5 = $6;
       if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
        break block44
       }
       $6 = $3 >>> 29 | 0;
       $3 = $3 << 1 | 0;
       $2 = $5 + ($6 & 4 | 0) | 0;
       $6 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       if ($6) {
        continue label2
       }
       break label2;
      };
      $1 = $2 + 16 | 0;
      if ($1 >>> 0 < $4 >>> 0) {
       break block3
      }
      HEAP32[$1 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $5;
     }
     HEAP32[($0 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 8 | 0) >> 2] = $0;
     return;
    }
    if ($5 >>> 0 < $4 >>> 0) {
     break block3
    }
    $1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break block3
    }
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($5 + 8 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    HEAP32[($0 + 12 | 0) >> 2] = $5;
    HEAP32[($0 + 8 | 0) >> 2] = $1;
   }
   return;
  }
  abort();
  wasm2js_trap();
 }
 
 function emscripten_builtin_calloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$3 = 0, $11 = 0, $6$hi = 0, $8$hi = 0, $16 = 0, i64toi32_i32$2 = 0;
  block1 : {
   block : {
    if ($0) {
     break block
    }
    $2 = 0;
    break block1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2 = i64toi32_i32$1;
   if (($1 | $0 | 0) >>> 0 < 65536 >>> 0) {
    break block1
   }
   $16 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = ($11 | 0) != (0 | 0) ? -1 : $16;
  }
  block2 : {
   $0 = emscripten_builtin_malloc($2 | 0) | 0;
   if (!$0) {
    break block2
   }
   if (!((HEAPU8[($0 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break block2
   }
   __memset($0 | 0, 0 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function FLAC__crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $6 = 0, $3 = 0, $5 = 0;
  block1 : {
   block : {
    if ($1) {
     break block
    }
    $2 = 0;
    break block1;
   }
   $3 = $1 & 3 | 0;
   $4 = 0;
   block3 : {
    block2 : {
     if ($1 >>> 0 >= 4 >>> 0) {
      break block2
     }
     $2 = 0;
     $1 = $0;
     break block3;
    }
    $5 = $1 & -4 | 0;
    $2 = 0;
    $6 = 0;
    label : while (1) {
     $1 = GOT_data_internal_FLAC__crc8_table;
     $2 = HEAPU8[($1 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($1 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($1 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($1 + ((HEAPU8[$0 >> 0] | 0) ^ ($2 & 255 | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
     $1 = $0 + 4 | 0;
     $0 = $1;
     $6 = $6 + 4 | 0;
     if (($6 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$3) {
    break block1
   }
   label1 : while (1) {
    $0 = HEAPU8[$1 >> 0] | 0;
    $2 = HEAPU8[(GOT_data_internal_FLAC__crc8_table + ($0 ^ ($2 & 255 | 0) | 0) | 0) >> 0] | 0;
    $1 = $1 + 1 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue label1
    }
    break label1;
   };
  }
  return $2 & 255 | 0 | 0;
 }
 
 function FLAC__crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0;
  $2 = 0;
  block : {
   if ($1 >>> 0 <= 7 >>> 0) {
    break block
   }
   label : while (1) {
    $3 = HEAPU8[$0 >> 0] | 0 | ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    $4 = GOT_data_internal_FLAC__crc16_table;
    $2 = ($3 << 8 | 0 | ($3 >>> 8 | 0) | 0) ^ $2 | 0;
    $2 = (((((((HEAPU16[(($4 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($4 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 1 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 1 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 1 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($4 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -8 | 0;
    if ($1 >>> 0 > 7 >>> 0) {
     continue label
    }
    break label;
   };
  }
  block1 : {
   if (!$1) {
    break block1
   }
   block3 : {
    block2 : {
     if ($1 & 1 | 0) {
      break block2
     }
     $4 = $1;
     break block3;
    }
    $4 = HEAPU8[$0 >> 0] | 0;
    $2 = (HEAPU16[(GOT_data_internal_FLAC__crc16_table + (($4 ^ (($2 & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ ($2 << 8 | 0) | 0;
    $0 = $0 + 1 | 0;
    $4 = $1 + -1 | 0;
   }
   if (($1 | 0) == (1 | 0)) {
    break block1
   }
   label1 : while (1) {
    $3 = HEAPU8[$0 >> 0] | 0;
    $1 = GOT_data_internal_FLAC__crc16_table;
    $3 = HEAPU16[($1 + (($3 ^ (($2 & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $2 = (HEAPU16[($1 + ((((($3 ^ ($2 << 8 | 0) | 0) & 65280 | 0) >>> 8 | 0) ^ (HEAPU8[($0 + 1 | 0) >> 0] | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ ($3 << 8 | 0) | 0;
    $0 = $0 + 2 | 0;
    $4 = $4 + -2 | 0;
    if ($4) {
     continue label1
    }
    break label1;
   };
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function FLAC__crc16_update_words32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $40 = 0;
  block : {
   if ($1 >>> 0 < 2 >>> 0) {
    break block
   }
   label : while (1) {
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = GOT_data_internal_FLAC__crc16_table;
    $2 = $2 ^ ($3 >>> 16 | 0) | 0;
    $40 = (((HEAPU16[(($4 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($4 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + (($3 >>> 7 | 0) & 510 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + (($3 & 255 | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0;
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = ((($40 ^ (HEAPU16[(($4 + (($3 >>> 23 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + (($3 >>> 15 | 0) & 510 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + (($3 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($4 + (($3 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -2 | 0;
    if ($1 >>> 0 > 1 >>> 0) {
     continue label
    }
    break label;
   };
  }
  block1 : {
   if (!$1) {
    break block1
   }
   $4 = HEAP32[$0 >> 2] | 0;
   $0 = GOT_data_internal_FLAC__crc16_table;
   $3 = $2 ^ ($4 >>> 16 | 0) | 0;
   $2 = (((HEAPU16[(($0 + (($3 & 255 | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) ^ (HEAPU16[(($0 + (($3 >>> 7 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($0 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($0 + (($4 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function FLAC__bitreader_new() {
  return emscripten_builtin_calloc(1 | 0, 44 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  emscripten_builtin_free($0 | 0);
 }
 
 function FLAC__bitreader_free($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__bitreader_init($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 4 | 0) >> 2] = 2048;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = emscripten_builtin_malloc(8192 | 0) | 0;
  HEAP32[$0 >> 2] = $3;
  block : {
   if ($3) {
    break block
   }
   return 0 | 0;
  }
  HEAP32[($0 + 40 | 0) >> 2] = $2;
  HEAP32[($0 + 36 | 0) >> 2] = $1;
  return 1 | 0;
 }
 
 function FLAC__bitreader_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 1 | 0;
 }
 
 function FLAC__bitreader_reset_read_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $1;
  i64toi32_i32$1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function FLAC__bitreader_get_read_crc16($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $6 = 0, $5 = 0, $7 = 0, $3 = 0, $1 = 0, $58 = 0, $77 = 0;
  block1 : {
   block : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($1 >>> 0 > $2 >>> 0) {
     break block
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = $2;
    break block1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   block2 : {
    $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($5) {
     break block2
    }
    $4 = $2;
    break block1;
   }
   $4 = $2 + 1 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $4;
   $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   block3 : {
    if ($5 >>> 0 > 31 >>> 0) {
     break block3
    }
    $2 = HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] | 0;
    $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (24 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $6 = (($6 << 8 | 0) & 65280 | 0) ^ $7 | 0;
    if ($5 >>> 0 > 23 >>> 0) {
     break block3
    }
    $58 = ($7 << 8 | 0) & 65280 | 0;
    $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (16 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $6 = $58 ^ $7 | 0;
    if ($5 >>> 0 > 15 >>> 0) {
     break block3
    }
    $77 = ($7 << 8 | 0) & 65280 | 0;
    $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (8 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $6 = $77 ^ $7 | 0;
    if (($5 | 16 | 0) >>> 0 > 23 >>> 0) {
     break block3
    }
    $6 = (($7 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (0 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
   }
   HEAP32[($0 + 32 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $6;
  }
  $4 = FLAC__crc16_update_words32($3 + ($4 << 2 | 0) | 0 | 0, $1 - $4 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $4;
  block4 : {
   $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (!$3) {
    break block4
   }
   $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if ($2 >>> 0 >= $3 >>> 0) {
    break block4
   }
   $1 = HEAP32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label : while (1) {
    $4 = (($4 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + ((($4 >>> 8 | 0) ^ (($1 >>> (24 - $2 | 0) | 0) & 255 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $2 = $2 + 8 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue label
    }
    break label;
   };
   HEAP32[($0 + 32 | 0) >> 2] = $2;
   HEAP32[($0 + 24 | 0) >> 2] = $4;
  }
  return $4 | 0;
 }
 
 function FLAC__bitreader_is_consumed_byte_aligned($0) {
  $0 = $0 | 0;
  return !((HEAPU8[($0 + 20 | 0) >> 0] | 0) & 7 | 0) | 0;
 }
 
 function FLAC__bitreader_bits_left_for_byte_alignment($0) {
  $0 = $0 | 0;
  return 8 - ((HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_get_input_bits_unconsumed($0) {
  $0 = $0 | 0;
  return ((((HEAP32[($0 + 8 | 0) >> 2] | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0;
  block6 : {
   block5 : {
    block : {
     if (!$2) {
      break block
     }
     block1 : {
      label : while (1) {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       if ((((($3 - $4 | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - $5 | 0) >>> 0 >= $2 >>> 0) {
        break block1
       }
       if (bitreader_read_from_client_($0 | 0) | 0) {
        continue label
       }
       break label;
      };
      return 0 | 0;
     }
     block2 : {
      if ($3 >>> 0 <= $4 >>> 0) {
       break block2
      }
      block3 : {
       if (!$5) {
        break block3
       }
       $6 = HEAP32[$0 >> 2] | 0;
       $3 = (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) & (-1 >>> $5 | 0) | 0;
       block4 : {
        $4 = 32 - $5 | 0;
        if ($2 >>> 0 >= $4 >>> 0) {
         break block4
        }
        HEAP32[$1 >> 2] = $3 >>> ($4 - $2 | 0) | 0;
        HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
        break block5;
       }
       HEAP32[$1 >> 2] = $3;
       HEAP32[($0 + 20 | 0) >> 2] = 0;
       $5 = 1;
       HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
       if (($2 | 0) == ($4 | 0)) {
        break block6
       }
       $2 = $2 - $4 | 0;
       $5 = (HEAP32[$1 >> 2] | 0) << $2 | 0;
       HEAP32[$1 >> 2] = $5;
       HEAP32[$1 >> 2] = (HEAP32[($6 + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> (32 - $2 | 0) | 0 | $5 | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       return 1 | 0;
      }
      $5 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
      block7 : {
       if ($2 >>> 0 > 31 >>> 0) {
        break block7
       }
       HEAP32[$1 >> 2] = $5 >>> (32 - $2 | 0) | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       break block5;
      }
      HEAP32[$1 >> 2] = $5;
      HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
      return 1 | 0;
     }
     $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     block8 : {
      if (!$5) {
       break block8
      }
      HEAP32[$1 >> 2] = ($4 & (-1 >>> $5 | 0) | 0) >>> (32 - ($2 + $5 | 0) | 0) | 0;
      HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
      break block5;
     }
     HEAP32[$1 >> 2] = $4 >>> (32 - $2 | 0) | 0;
     HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
     break block5;
    }
    HEAP32[$1 >> 2] = 0;
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function bitreader_read_from_client_($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $2 = 0, $8 = 0, $7 = 0, $5 = 0, $6 = 0, $1 = 0, $9 = 0, $67 = 0, $86 = 0, $244 = 0, $10 = 0, $282 = 0, $301 = 0, $320 = 0, $339 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block1 : {
   block : {
    $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($2) {
     break block
    }
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    break block1;
   }
   block3 : {
    block2 : {
     $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if ($2 >>> 0 > $4 >>> 0) {
      break block2
     }
     $5 = HEAP32[$0 >> 2] | 0;
     $3 = $4;
     break block3;
    }
    $5 = HEAP32[$0 >> 2] | 0;
    block4 : {
     $6 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     if ($6) {
      break block4
     }
     $3 = $4;
     break block3;
    }
    $3 = $4 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $3;
    $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    block5 : {
     if ($6 >>> 0 > 31 >>> 0) {
      break block5
     }
     $4 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
     $8 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($4 >>> (24 - $6 | 0) | 0) & 255 | 0) ^ ($7 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $7 = (($7 << 8 | 0) & 65280 | 0) ^ $8 | 0;
     if ($6 >>> 0 > 23 >>> 0) {
      break block5
     }
     $67 = ($8 << 8 | 0) & 65280 | 0;
     $8 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($4 >>> (16 - $6 | 0) | 0) & 255 | 0) ^ ($7 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $7 = $67 ^ $8 | 0;
     if ($6 >>> 0 > 15 >>> 0) {
      break block5
     }
     $86 = ($8 << 8 | 0) & 65280 | 0;
     $8 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($4 >>> (8 - $6 | 0) | 0) & 255 | 0) ^ ($7 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $7 = $86 ^ $8 | 0;
     if (($6 | 16 | 0) >>> 0 > 23 >>> 0) {
      break block5
     }
     $7 = (($8 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($4 >>> (0 - $6 | 0) | 0) & 255 | 0) ^ ($7 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    }
    HEAP32[($0 + 32 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = $7;
   }
   $2 = FLAC__crc16_update_words32($5 + ($3 << 2 | 0) | 0 | 0, $2 - $3 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $2;
   block6 : {
    $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $3 = (((HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != (0 | 0)) | 0) << 2 | 0;
    if (!$3) {
     break block6
    }
    $4 = HEAP32[$0 >> 2] | 0;
    wasm2js_memory_copy($4, $4 + ($2 << 2 | 0) | 0, $3);
   }
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   $3 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $3;
  }
  $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) - $3 | 0) << 2 | 0;
  $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $5 - $2 | 0;
  $4 = 0;
  block7 : {
   if (($5 | 0) == ($2 | 0)) {
    break block7
   }
   $3 = (HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0;
   $5 = $3 + $2 | 0;
   block8 : {
    if (!$2) {
     break block8
    }
    $2 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $2 << 24 | 0 | (($2 & 65280 | 0) << 8 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
   }
   if (!(FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($5, $1 + 12 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0) | 0)) {
    break block7
   }
   block9 : {
    $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    $9 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $7 = ((($2 + ($8 << 2 | 0) | 0) + $9 | 0) + 3 | 0) >>> 2 | 0;
    if ($8 >>> 0 >= $7 >>> 0) {
     break block9
    }
    $5 = HEAP32[$0 >> 2] | 0;
    $2 = $8;
    block10 : {
     $6 = ($7 - $2 | 0) & 3 | 0;
     if (!$6) {
      break block10
     }
     $4 = 0;
     label : while (1) {
      $3 = $5 + ($2 << 2 | 0) | 0;
      $244 = $3;
      $3 = HEAP32[$3 >> 2] | 0;
      HEAP32[$244 >> 2] = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      $2 = $2 + 1 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($6 | 0)) {
       continue label
      }
      break label;
     };
    }
    block11 : {
     if (($8 - $7 | 0) >>> 0 > -4 >>> 0) {
      break block11
     }
     $6 = $5 + 12 | 0;
     $8 = $5 + 8 | 0;
     $10 = $5 + 4 | 0;
     label1 : while (1) {
      $3 = $2 << 2 | 0;
      $4 = $5 + $3 | 0;
      $282 = $4;
      $4 = HEAP32[$4 >> 2] | 0;
      HEAP32[$282 >> 2] = $4 << 24 | 0 | (($4 & 65280 | 0) << 8 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      $4 = $10 + $3 | 0;
      $301 = $4;
      $4 = HEAP32[$4 >> 2] | 0;
      HEAP32[$301 >> 2] = $4 << 24 | 0 | (($4 & 65280 | 0) << 8 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      $4 = $8 + $3 | 0;
      $320 = $4;
      $4 = HEAP32[$4 >> 2] | 0;
      HEAP32[$320 >> 2] = $4 << 24 | 0 | (($4 & 65280 | 0) << 8 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      $3 = $6 + $3 | 0;
      $339 = $3;
      $3 = HEAP32[$3 >> 2] | 0;
      HEAP32[$339 >> 2] = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      $2 = $2 + 4 | 0;
      if (($2 | 0) != ($7 | 0)) {
       continue label1
      }
      break label1;
     };
    }
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $2 = $2 + $9 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 & 3 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = (($2 >>> 2 | 0) + $8 | 0) & 1073741823 | 0;
   $4 = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block1 : {
   block : {
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 | 0) | 0) {
     break block
    }
    $0 = 0;
    break block1;
   }
   $0 = 1;
   $2 = 1 << ($2 + -1 | 0) | 0;
   HEAP32[$1 >> 2] = ((HEAP32[($3 + 12 | 0) >> 2] | 0) ^ $2 | 0) - $2 | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint64($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4 = 0, $15 = 0, $5 = 0, $5$hi = 0, $25$hi = 0, $27 = 0, $27$hi = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block1 : {
   block2 : {
    block : {
     if ($2 >>> 0 < 33 >>> 0) {
      break block
     }
     $4 = 0;
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 + -32 | 0 | 0) | 0)) {
      break block1
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, 32 | 0) | 0)) {
      break block1
     }
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $15 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $15 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $27 = i64toi32_i32$0;
     $27$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $5$hi = i64toi32_i32$0;
     break block2;
    }
    block3 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, $2 | 0) | 0) {
      break block3
     }
     $4 = 0;
     break block1;
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $5 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = $1;
   HEAP32[i64toi32_i32$0 >> 2] = $5;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = 1;
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 0;
  block : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   HEAP32[$1 >> 2] = (HEAP32[($2 + 12 | 0) >> 2] | 0) << 24 | 0 | ($6 << 16 | 0 | ($4 | ($5 << 8 | 0) | 0) | 0) | 0;
   $3 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__bitreader_skip_bits_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block3 : {
   block : {
    if (!$1) {
     break block
    }
    block1 : {
     $3 = (HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0;
     if (!$3) {
      break block1
     }
     block2 : {
      $3 = 8 - $3 | 0;
      $3 = $3 >>> 0 < $1 >>> 0 ? $3 : $1;
      if (FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $3 | 0) | 0) {
       break block2
      }
      $0 = 0;
      break block3;
     }
     $1 = $1 - $3 | 0;
    }
    block9 : {
     block4 : {
      if ($1 >>> 0 < 8 >>> 0) {
       break block4
      }
      $3 = $1 >>> 3 | 0;
      block10 : {
       label2 : while (1) {
        block5 : {
         if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
          break block5
         }
         block6 : {
          if ($3 >>> 0 <= 3 >>> 0) {
           break block6
          }
          label : while (1) {
           block8 : {
            block7 : {
             $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
             if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
              break block7
             }
             HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
             $3 = $3 + -4 | 0;
             break block8;
            }
            if (!(bitreader_read_from_client_($0 | 0) | 0)) {
             break block9
            }
           }
           if ($3 >>> 0 > 3 >>> 0) {
            continue label
           }
           break label;
          };
          if (!$3) {
           break block10
          }
         }
         label1 : while (1) {
          if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
           break block9
          }
          $3 = $3 + -1 | 0;
          if (!$3) {
           break block10
          }
          continue label1;
         };
        }
        if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
         break block9
        }
        $3 = $3 + -1 | 0;
        if ($3) {
         continue label2
        }
        break label2;
       };
      }
      $1 = $1 & 7 | 0;
     }
     if (!$1) {
      break block
     }
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $1 | 0) | 0) {
      break block
     }
     $0 = 0;
     break block3;
    }
    $0 = 0;
    break block3;
   }
   $0 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitreader_skip_byte_block_aligned_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 1;
  block : {
   if (!$1) {
    break block
   }
   block5 : {
    label2 : while (1) {
     block1 : {
      if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
       break block1
      }
      block2 : {
       if ($1 >>> 0 < 4 >>> 0) {
        break block2
       }
       label : while (1) {
        block4 : {
         block3 : {
          $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
          if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
           break block3
          }
          HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
          $1 = $1 + -4 | 0;
          break block4;
         }
         if (!(bitreader_read_from_client_($0 | 0) | 0)) {
          break block5
         }
        }
        if ($1 >>> 0 > 3 >>> 0) {
         continue label
        }
        break label;
       };
       if ($1) {
        break block2
       }
       $3 = 1;
       break block;
      }
      label1 : while (1) {
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
        break block5
       }
       $1 = $1 + -1 | 0;
       if ($1) {
        continue label1
       }
       break block;
      };
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
      break block5
     }
     $1 = $1 + -1 | 0;
     if ($1) {
      continue label2
     }
     break block;
    };
   }
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__bitreader_read_byte_block_aligned_no_crc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block1 : {
   block : {
    if ($2) {
     break block
    }
    $4 = 1;
    break block1;
   }
   label2 : while (1) {
    block2 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break block2
     }
     block3 : {
      if ($2 >>> 0 < 4 >>> 0) {
       break block3
      }
      label : while (1) {
       block5 : {
        block4 : {
         $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
         $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
         $5 = $4 << 24 | 0 | (($4 & 65280 | 0) << 8 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
         HEAP8[$1 >> 0] = $5;
         HEAP8[($1 + 1 | 0) >> 0] = $5 >>> 8 | 0;
         HEAP8[($1 + 2 | 0) >> 0] = $5 >>> 16 | 0;
         HEAP8[($1 + 3 | 0) >> 0] = $5 >>> 24 | 0;
         $2 = $2 + -4 | 0;
         $1 = $1 + 4 | 0;
         break block5;
        }
        if (bitreader_read_from_client_($0 | 0) | 0) {
         break block5
        }
        $4 = 0;
        break block1;
       }
       if ($2 >>> 0 > 3 >>> 0) {
        continue label
       }
       break label;
      };
      if ($2) {
       break block3
      }
      $4 = 1;
      break block1;
     }
     label1 : while (1) {
      block6 : {
       if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
        break block6
       }
       $4 = 0;
       break block1;
      }
      HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $4 = 1;
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      if ($2) {
       continue label1
      }
      break block1;
     };
    }
    block7 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
      break block7
     }
     $4 = 0;
     break block1;
    }
    HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
    $4 = 1;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label2
    }
    break label2;
   };
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0;
  HEAP32[$1 >> 2] = 0;
  block5 : {
   block4 : {
    block1 : {
     block3 : {
      label1 : while (1) {
       $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       block : {
        $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
        if ($3 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
         break block
        }
        $4 = HEAP32[$0 >> 2] | 0;
        $3 = (HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] | 0) << $2 | 0;
        if ($3) {
         break block1
        }
        HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) - $2 | 0) + 32 | 0;
        $2 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($0 + 16 | 0) >> 2] = $3;
        if ($3 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
         break block
        }
        label : while (1) {
         $3 = HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] | 0;
         if ($3) {
          break block1
         }
         HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 32 | 0;
         $2 = 0;
         HEAP32[($0 + 20 | 0) >> 2] = 0;
         $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($0 + 16 | 0) >> 2] = $3;
         if ($3 >>> 0 < (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
          continue label
         }
         break label;
        };
       }
       block2 : {
        $4 = (HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0;
        if ($4 >>> 0 <= $2 >>> 0) {
         break block2
        }
        $5 = HEAP32[$1 >> 2] | 0;
        $3 = ((HEAP32[((HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0) & (-1 << (32 - $4 | 0) | 0) | 0) << $2 | 0;
        if ($3) {
         break block3
        }
        HEAP32[$1 >> 2] = ($4 - $2 | 0) + $5 | 0;
        HEAP32[($0 + 20 | 0) >> 2] = $4;
       }
       if (bitreader_read_from_client_($0 | 0) | 0) {
        continue label1
       }
       break label1;
      };
      return 0 | 0;
     }
     $3 = Math_clz32($3);
     HEAP32[$1 >> 2] = $5 + $3 | 0;
     $3 = ($3 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
     break block4;
    }
    $2 = Math_clz32($3);
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $2 | 0;
    $3 = 1;
    $1 = ($2 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    if ($1 >>> 0 < 32 >>> 0) {
     break block5
    }
    HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
    $3 = 0;
   }
   HEAP32[($0 + 20 | 0) >> 2] = $3;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_read_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $13 = 0, $15 = 0, $9 = 0, $4 = 0, $12 = 0, $8 = 0, $10 = 0, $5 = 0, $6 = 0, $11 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = $1 + ($2 << 2 | 0) | 0;
  block3 : {
   block1 : {
    block : {
     if ($3) {
      break block
     }
     if (!$2) {
      break block1
     }
     label : while (1) {
      block2 : {
       if (FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0) {
        break block2
       }
       $6 = 0;
       break block3;
      }
      $6 = 1;
      $2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
      $1 = $1 + 4 | 0;
      if ($1 >>> 0 < $5 >>> 0) {
       continue label
      }
      break block3;
     };
    }
    $6 = 0;
    block6 : {
     block5 : {
      block4 : {
       $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if ($7 >>> 0 < $8 >>> 0) {
        break block4
       }
       $9 = 0;
       break block5;
      }
      $10 = HEAP32[$0 >> 2] | 0;
      $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
      $2 = 0;
      break block6;
     }
     $2 = 1;
    }
    label3 : while (1) {
     block18 : {
      block16 : {
       block17 : {
        block15 : {
         block8 : {
          switch ($2 | 0) {
          case 0:
           $13 = 32 - $11 | 0;
           block12 : {
            block9 : {
             if ($1 >>> 0 >= $5 >>> 0) {
              break block9
             }
             $14 = 32 - $3 | 0;
             label2 : while (1) {
              $2 = $7;
              $9 = $13;
              block11 : {
               block10 : {
                if (!$12) {
                 break block10
                }
                $9 = Math_clz32($12);
                $15 = $9;
                break block11;
               }
               label1 : while (1) {
                $2 = $2 + 1 | 0;
                if ($2 >>> 0 >= $8 >>> 0) {
                 break block12
                }
                $12 = HEAP32[($10 + ($2 << 2 | 0) | 0) >> 2] | 0;
                $15 = Math_clz32($12);
                $9 = $15 + $9 | 0;
                if (!$12) {
                 continue label1
                }
                break label1;
               };
              }
              $7 = ($12 << $15 | 0) << 1 | 0;
              $15 = $7 >>> $14 | 0;
              block14 : {
               block13 : {
                $13 = ($13 + ($9 ^ -1 | 0) | 0) & 31 | 0;
                if ($13 >>> 0 < $3 >>> 0) {
                 break block13
                }
                $12 = $7 << $3 | 0;
                $13 = $13 - $3 | 0;
                $7 = $2;
                break block14;
               }
               $7 = $2 + 1 | 0;
               if ($7 >>> 0 >= $8 >>> 0) {
                break block15
               }
               $2 = HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0;
               $13 = $13 + $14 | 0;
               $12 = $2 << (32 - $13 | 0) | 0;
               $15 = $2 >>> $13 | 0 | $15 | 0;
              }
              HEAP32[($4 + 12 | 0) >> 2] = $15;
              $2 = $15 | ($9 << $3 | 0) | 0;
              HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
              $1 = $1 + 4 | 0;
              if ($1 >>> 0 < $5 >>> 0) {
               continue label2
              }
              break label2;
             };
            }
            $2 = $7 >>> 0 < $8 >>> 0;
            HEAP32[($0 + 16 | 0) >> 2] = $7 + (!$13 & $2 | 0) | 0;
            HEAP32[($0 + 20 | 0) >> 2] = 32 - ($13 ? $13 : $2 << 5 | 0) | 0;
            break block1;
           }
           HEAP32[($0 + 20 | 0) >> 2] = 0;
           $2 = $7 + 1 | 0;
           HEAP32[($0 + 16 | 0) >> 2] = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
           break block16;
          default:
           break block8;
          };
         }
         if (!(FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0)) {
          break block3
         }
         $9 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + $9 | 0;
         HEAP32[($4 + 8 | 0) >> 2] = $9;
         $15 = 0;
         $13 = 0;
         break block17;
        }
        HEAP32[($0 + 16 | 0) >> 2] = $7;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
       }
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, $3 - $13 | 0 | 0) | 0)) {
        break block3
       }
       $2 = $9 << $3 | 0;
       $15 = HEAP32[($4 + 12 | 0) >> 2] | 0 | $15 | 0;
       HEAP32[($4 + 12 | 0) >> 2] = $15;
       $9 = 0;
       $2 = $2 | $15 | 0;
       HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
       $1 = $1 + 4 | 0;
       $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if ($7 >>> 0 < $8 >>> 0) {
        break block18
       }
       if ($1 >>> 0 >= $5 >>> 0) {
        break block18
       }
      }
      $2 = 1;
      continue label3;
     }
     $10 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
     $2 = 0;
     continue label3;
    };
   }
   $6 = 1;
  }
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $4 = 0, $5 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = 0;
  block : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   block1 : {
    if (!$2) {
     break block1
    }
    $7 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $7 + 1 | 0;
    HEAP8[($2 + $7 | 0) >> 0] = $6;
   }
   block2 : {
    if (!($6 & 128 | 0)) {
     break block2
    }
    block4 : {
     block3 : {
      if ($6 & 32 | 0) {
       break block3
      }
      $8 = 1;
      $7 = 31;
      break block4;
     }
     block5 : {
      if ($6 & 16 | 0) {
       break block5
      }
      $8 = 2;
      $7 = 15;
      break block4;
     }
     block6 : {
      if ($6 & 8 | 0) {
       break block6
      }
      $8 = 3;
      $7 = 7;
      break block4;
     }
     $8 = 4;
     block7 : {
      if ($6 & 4 | 0) {
       break block7
      }
      $7 = 3;
      break block4;
     }
     block8 : {
      if (!($6 & 2 | 0)) {
       break block8
      }
      $6 = -1;
      break block2;
     }
     $8 = 5;
     $7 = 1;
    }
    $6 = $6 & $7 | 0;
    block9 : {
     if ($2) {
      break block9
     }
     label : while (1) {
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
       break block
      }
      block10 : {
       $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
       if (($7 & 192 | 0 | 0) == (128 | 0)) {
        break block10
       }
       $6 = -1;
       break block2;
      }
      $6 = $7 & 63 | 0 | ($6 << 6 | 0) | 0;
      $8 = $8 + -1 | 0;
      if ($8) {
       continue label
      }
      break block2;
     };
    }
    label1 : while (1) {
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
      break block
     }
     $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $9 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $9 + 1 | 0;
     HEAP8[($2 + $9 | 0) >> 0] = $7;
     block11 : {
      if (($7 & 192 | 0 | 0) == (128 | 0)) {
       break block11
      }
      $6 = -1;
      break block2;
     }
     $6 = $7 & 63 | 0 | ($6 << 6 | 0) | 0;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue label1
     }
     break label1;
    };
   }
   HEAP32[$1 >> 2] = $6;
   $5 = 1;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint64($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7 = 0, i64toi32_i32$4 = 0, $8 = 0, $9 = 0, $9$hi = 0, i64toi32_i32$3 = 0, $4 = 0, $5 = 0, $20 = 0, $21 = 0, $72$hi = 0, $75$hi = 0, $100$hi = 0, $103$hi = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = 0;
  block : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   block1 : {
    if (!$2) {
     break block1
    }
    $7 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $7 + 1 | 0;
    HEAP8[($2 + $7 | 0) >> 0] = $6;
   }
   block10 : {
    block4 : {
     block9 : {
      block2 : {
       if (!($6 & 128 | 0)) {
        break block2
       }
       block3 : {
        if ($6 & 32 | 0) {
         break block3
        }
        $8 = $6 & 31 | 0;
        $7 = 1;
        break block4;
       }
       block5 : {
        if ($6 & 16 | 0) {
         break block5
        }
        $8 = $6 & 15 | 0;
        $7 = 2;
        break block4;
       }
       block6 : {
        if ($6 & 8 | 0) {
         break block6
        }
        $8 = $6 & 7 | 0;
        $7 = 3;
        break block4;
       }
       $7 = 4;
       block7 : {
        if ($6 & 4 | 0) {
         break block7
        }
        $8 = $6 & 3 | 0;
        break block4;
       }
       $8 = $6 & 1 | 0;
       block8 : {
        if ($6 & 2 | 0) {
         break block8
        }
        $7 = 5;
        break block4;
       }
       if (!$8) {
        break block9
       }
       i64toi32_i32$0 = -1;
       $9 = -1;
       $9$hi = i64toi32_i32$0;
       break block10;
      }
      i64toi32_i32$0 = 0;
      $9 = $6;
      $9$hi = i64toi32_i32$0;
      break block10;
     }
     $7 = 6;
     $8 = 0;
    }
    i64toi32_i32$0 = 0;
    $9 = $8;
    $9$hi = i64toi32_i32$0;
    block11 : {
     if ($2) {
      break block11
     }
     label : while (1) {
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
       break block
      }
      block12 : {
       $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
       if (($6 & 192 | 0 | 0) == (128 | 0)) {
        break block12
       }
       i64toi32_i32$0 = -1;
       $9 = -1;
       $9$hi = i64toi32_i32$0;
       break block10;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$2 = $9;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 6;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $20 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $72$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $75$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$0 = $20;
      i64toi32_i32$2 = $75$hi;
      i64toi32_i32$3 = $6 & 63 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $9 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $9$hi = i64toi32_i32$2;
      $7 = $7 + -1 | 0;
      if ($7) {
       continue label
      }
      break block10;
     };
    }
    label1 : while (1) {
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
      break block
     }
     $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $8 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $8 + 1 | 0;
     HEAP8[($2 + $8 | 0) >> 0] = $6;
     block13 : {
      if (($6 & 192 | 0 | 0) == (128 | 0)) {
       break block13
      }
      i64toi32_i32$2 = -1;
      $9 = -1;
      $9$hi = i64toi32_i32$2;
      break block10;
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 6;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $21 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $100$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $103$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$2 = $21;
     i64toi32_i32$1 = $103$hi;
     i64toi32_i32$3 = $6 & 63 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $9 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $9$hi = i64toi32_i32$1;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue label1
     }
     break label1;
    };
   }
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $1;
   HEAP32[i64toi32_i32$2 >> 2] = $9;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = 1;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function __qsort_r($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $9 = 0, $8 = 0, $6 = 0, $7 = 0, $34 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 8 | 0) >> 2] = 1;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  block : {
   $6 = Math_imul($2, $1);
   if (!$6) {
    break block
   }
   HEAP32[($5 + 16 | 0) >> 2] = $2;
   HEAP32[($5 + 20 | 0) >> 2] = $2;
   $7 = 0 - $2 | 0;
   $1 = $2;
   $8 = $1;
   $9 = 2;
   label : while (1) {
    $34 = $8 + $2 | 0;
    $8 = $1;
    $1 = $34 + $1 | 0;
    HEAP32[(($5 + 16 | 0) + ($9 << 2 | 0) | 0) >> 2] = $1;
    $9 = $9 + 1 | 0;
    if ($1 >>> 0 < $6 >>> 0) {
     continue label
    }
    break label;
   };
   block2 : {
    block1 : {
     $8 = ($0 + $6 | 0) + $7 | 0;
     if ($0 >>> 0 < $8 >>> 0) {
      break block1
     }
     $1 = 1;
     break block2;
    }
    $9 = 1;
    $1 = 1;
    label1 : while (1) {
     block4 : {
      block3 : {
       if (($9 & 3 | 0 | 0) != (3 | 0)) {
        break block3
       }
       sift($0 | 0, $2 | 0, $3 | 0, $4 | 0, $1 | 0, $5 + 16 | 0 | 0);
       shr($5 + 8 | 0 | 0, 2 | 0);
       $1 = $1 + 2 | 0;
       break block4;
      }
      block6 : {
       block5 : {
        $9 = $1 + -1 | 0;
        if ((HEAP32[(($5 + 16 | 0) + ($9 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($8 - $0 | 0) >>> 0) {
         break block5
        }
        trinkle($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 | 0, 0 | 0, $5 + 16 | 0 | 0);
        break block6;
       }
       sift($0 | 0, $2 | 0, $3 | 0, $4 | 0, $1 | 0, $5 + 16 | 0 | 0);
      }
      block7 : {
       if (($1 | 0) != (1 | 0)) {
        break block7
       }
       shl($5 + 8 | 0 | 0, 1 | 0);
       $1 = 0;
       break block4;
      }
      shl($5 + 8 | 0 | 0, $9 | 0);
      $1 = 1;
     }
     $9 = HEAP32[($5 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($5 + 8 | 0) >> 2] = $9;
     $0 = $0 + $2 | 0;
     if ($0 >>> 0 < $8 >>> 0) {
      continue label1
     }
     break label1;
    };
   }
   trinkle($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 | 0, 0 | 0, $5 + 16 | 0 | 0);
   block8 : {
    if (($1 | 0) != (1 | 0)) {
     break block8
    }
    if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block8
    }
    if (!(HEAP32[($5 + 12 | 0) >> 2] | 0)) {
     break block
    }
   }
   label2 : while (1) {
    block10 : {
     block9 : {
      if (($1 | 0) > (1 | 0)) {
       break block9
      }
      $9 = pntz($5 + 8 | 0 | 0) | 0;
      shr($5 + 8 | 0 | 0, $9 | 0);
      $1 = $9 + $1 | 0;
      break block10;
     }
     shl($5 + 8 | 0 | 0, 2 | 0);
     HEAP32[($5 + 8 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     shr($5 + 8 | 0 | 0, 1 | 0);
     $8 = $0 + $7 | 0;
     $9 = $1 + -2 | 0;
     trinkle($8 - (HEAP32[(($5 + 16 | 0) + ($9 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 + -1 | 0 | 0, 1 | 0, $5 + 16 | 0 | 0);
     shl($5 + 8 | 0 | 0, 1 | 0);
     HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0 | 1 | 0;
     trinkle($8 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $9 | 0, 1 | 0, $5 + 16 | 0 | 0);
     $1 = $9;
    }
    $0 = $0 + $7 | 0;
    $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $9 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    if (($1 | 0) != (1 | 0)) {
     continue label2
    }
    if (($9 | 0) != (1 | 0)) {
     continue label2
    }
    if ($8) {
     continue label2
    }
    break label2;
   };
  }
  __stack_pointer = $5 + 208 | 0;
 }
 
 function sift($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $9 = 0, $6 = 0, $7 = 0, $11 = 0, $10 = 0, $12 = 0, $8 = 0;
  $6 = __stack_pointer - 240 | 0;
  __stack_pointer = $6;
  HEAP32[$6 >> 2] = $0;
  $7 = 1;
  block : {
   if (($4 | 0) < (2 | 0)) {
    break block
   }
   $8 = 0 - $1 | 0;
   $7 = 1;
   $9 = $0;
   label : while (1) {
    block1 : {
     $9 = $9 + $8 | 0;
     $10 = $4 + -2 | 0;
     $11 = $9 - (HEAP32[($5 + ($10 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2 | 0]($0, $11, $3) | 0 | 0) < (0 | 0)) {
      break block1
     }
     if ((FUNCTION_TABLE[$2 | 0]($0, $9, $3) | 0 | 0) > (-1 | 0)) {
      break block
     }
    }
    $12 = (FUNCTION_TABLE[$2 | 0]($11, $9, $3) | 0 | 0) > (-1 | 0);
    $9 = $12 ? $11 : $9;
    HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $9;
    $7 = $7 + 1 | 0;
    $4 = $12 ? $4 + -1 | 0 : $10;
    if (($4 | 0) > (1 | 0)) {
     continue label
    }
    break label;
   };
  }
  cycle($1 | 0, $6 | 0, $7 | 0);
  __stack_pointer = $6 + 240 | 0;
 }
 
 function shr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if ($1 >>> 0 > 31 >>> 0) {
     break block
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = $2;
    break block1;
   }
   $1 = $1 + -32 | 0;
   $4 = 0;
   $3 = $2;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4 >>> $1 | 0;
  HEAP32[$0 >> 2] = $4 << (32 - $1 | 0) | 0 | ($3 >>> $1 | 0) | 0;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $9 = 0, $8 = 0, $12 = 0, $13 = 0, $11 = 0, $10 = 0;
  $8 = __stack_pointer - 240 | 0;
  __stack_pointer = $8;
  $9 = HEAP32[$4 >> 2] | 0;
  HEAP32[($8 + 232 | 0) >> 2] = $9;
  $4 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[$8 >> 2] = $0;
  HEAP32[($8 + 236 | 0) >> 2] = $4;
  $10 = 0 - $1 | 0;
  $11 = !$6;
  block7 : {
   block6 : {
    block2 : {
     block1 : {
      block : {
       if (($9 | 0) == (1 | 0)) {
        break block
       }
       $9 = $0;
       $6 = 1;
       break block1;
      }
      $9 = $0;
      $6 = 1;
      if ($4) {
       break block1
      }
      $6 = 1;
      $4 = $9;
      break block2;
     }
     label : while (1) {
      block3 : {
       $12 = $7 + ($5 << 2 | 0) | 0;
       $4 = $9 - (HEAP32[$12 >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2 | 0]($4, $0, $3) | 0 | 0) >= (1 | 0)) {
        break block3
       }
       $4 = $9;
       break block2;
      }
      $13 = $11 ^ -1 | 0;
      $11 = 1;
      block5 : {
       block4 : {
        if (($13 | ($5 | 0) < (2 | 0) | 0) & 1 | 0) {
         break block4
        }
        $13 = HEAP32[($12 + -8 | 0) >> 2] | 0;
        $12 = $9 + $10 | 0;
        if ((FUNCTION_TABLE[$2 | 0]($12, $4, $3) | 0 | 0) > (-1 | 0)) {
         break block5
        }
        if ((FUNCTION_TABLE[$2 | 0]($12 - $13 | 0, $4, $3) | 0 | 0) > (-1 | 0)) {
         break block5
        }
       }
       HEAP32[($8 + ($6 << 2 | 0) | 0) >> 2] = $4;
       $9 = pntz($8 + 232 | 0 | 0) | 0;
       shr($8 + 232 | 0 | 0, $9 | 0);
       $6 = $6 + 1 | 0;
       $5 = $9 + $5 | 0;
       $13 = HEAP32[($8 + 236 | 0) >> 2] | 0;
       $9 = $4;
       if ((HEAP32[($8 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label
       }
       $9 = $4;
       if ($13) {
        continue label
       }
       break block6;
      }
      break label;
     };
     $4 = $9;
     break block6;
    }
    if (!($11 & 1 | 0)) {
     break block7
    }
   }
   cycle($1 | 0, $8 | 0, $6 | 0);
   sift($4 | 0, $1 | 0, $2 | 0, $3 | 0, $5 | 0, $7 | 0);
  }
  __stack_pointer = $8 + 240 | 0;
 }
 
 function shl($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  block1 : {
   block : {
    if ($1 >>> 0 > 31 >>> 0) {
     break block
    }
    $2 = $0 + 4 | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    break block1;
   }
   $1 = $1 + -32 | 0;
   $3 = 0;
   $2 = $0;
  }
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$0 >> 2] = $3 << $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $3 >>> (32 - $1 | 0) | 0 | ($2 << $1 | 0) | 0;
 }
 
 function pntz($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = __builtin_ctz((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1) {
    break block
   }
   $0 = __builtin_ctz(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0;
   $1 = $0 ? $0 | 32 | 0 : 0;
  }
  return $1 | 0;
 }
 
 function cycle($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $5 = 0, $3 = 0, $7 = 0, $4 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  block : {
   if (($2 | 0) < (2 | 0)) {
    break block
   }
   $4 = $1 + ($2 << 2 | 0) | 0;
   HEAP32[$4 >> 2] = $3;
   if (!$0) {
    break block
   }
   label1 : while (1) {
    $5 = $0 >>> 0 < 256 >>> 0 ? $0 : 256;
    __memcpy(HEAP32[$4 >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, $5 | 0) | 0;
    $6 = 0;
    label : while (1) {
     $7 = $1 + ($6 << 2 | 0) | 0;
     $6 = $6 + 1 | 0;
     __memcpy(HEAP32[$7 >> 2] | 0 | 0, HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] | 0 | 0, $5 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $5 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue label
     }
     break label;
    };
    $0 = $0 - $5 | 0;
    if ($0) {
     continue label1
    }
    break label1;
   };
  }
  __stack_pointer = $3 + 256 | 0;
 }
 
 function __builtin_ctz($0) {
  $0 = $0 | 0;
  return a_ctz_32($0 | 0) | 0 | 0;
 }
 
 function a_ctz_32($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return (wasm2js_i32$0 = __wasm_ctz_i32($0 | 0) | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0;
 }
 
 function qsort($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  __qsort_r($0 | 0, $1 | 0, $2 | 0, 4 | 0, $3 | 0);
 }
 
 function wrapper_cmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$2 | 0]($0, $1) | 0 | 0;
 }
 
 function FLAC__format_sample_rate_is_valid($0) {
  $0 = $0 | 0;
  return ($0 + -1 | 0) >>> 0 < 655350 >>> 0 | 0;
 }
 
 function FLAC__format_blocksize_is_subset($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 < 16385 >>> 0 & ($0 >>> 0 < 4609 >>> 0 | $1 >>> 0 > 48e3 >>> 0 | 0) | 0 | 0;
 }
 
 function FLAC__format_sample_rate_is_subset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 0;
  block : {
   if (($0 + -655351 | 0) >>> 0 < -655350 >>> 0) {
    break block
   }
   $1 = !(($0 >>> 0) % (1e3 >>> 0) | 0) | !(($0 >>> 0) % (10 >>> 0) | 0) | 0 | $0 >>> 0 < 65536 >>> 0 | 0;
  }
  return $1 | 0;
 }
 
 function FLAC__format_seektable_is_legal($0) {
  $0 = $0 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $1 = 0, $4$hi = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $5$hi = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if ($1) {
    break block
   }
   return 1 | 0;
  }
  $2 = 1;
  block1 : {
   if (($1 | 0) == (1 | 0)) {
    break block1
   }
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   $0 = 1;
   label : while (1) {
    block2 : {
     i64toi32_i32$2 = $3 + Math_imul($0, 24) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $5 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block2
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $5;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break block2
     }
     return 0 | 0;
    }
    $2 = 1;
    i64toi32_i32$3 = $5$hi;
    $4 = $5;
    $4$hi = i64toi32_i32$3;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
  return $2 | 0;
 }
 
 function FLAC__format_seektable_sort($0) {
  $0 = $0 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, i64toi32_i32$0 = 0, $4 = 0, $1 = 0, $5 = 0, i64toi32_i32$2 = 0, $7 = 0, $6 = 0, $35$hi = 0, $41 = 0, $41$hi = 0, $49 = 0, $54 = 0, $59 = 0;
  $1 = 0;
  block : {
   $2 = HEAP32[$0 >> 2] | 0;
   if (!$2) {
    break block
   }
   $3 = GOT_data_internal___table_base;
   qsort(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $2 | 0, 24 | 0, $3 + 4 | 0 | 0);
   if (!(HEAP32[$0 >> 2] | 0)) {
    break block
   }
   $1 = 1;
   block1 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if ($4 >>> 0 <= 1 >>> 0) {
     break block1
    }
    $3 = 1;
    label : while (1) {
     block3 : {
      block2 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = $5 + Math_imul($3, 24) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $6 = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
        break block2
       }
       i64toi32_i32$2 = i64toi32_i32$1;
       $35$hi = i64toi32_i32$1;
       i64toi32_i32$3 = ($5 + Math_imul($1, 24) | 0) + -24 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $41 = i64toi32_i32$2;
       $41$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $35$hi;
       i64toi32_i32$3 = $6;
       i64toi32_i32$2 = $41$hi;
       i64toi32_i32$0 = $41;
       if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break block3
       }
      }
      $4 = $5 + Math_imul($1, 24) | 0;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $49 = i64toi32_i32$3;
      i64toi32_i32$3 = $4;
      HEAP32[i64toi32_i32$3 >> 2] = $49;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $54 = i64toi32_i32$1;
      i64toi32_i32$1 = $4 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $54;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$0 = $2 + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $59 = i64toi32_i32$3;
      i64toi32_i32$3 = $4 + 8 | 0;
      HEAP32[i64toi32_i32$3 >> 2] = $59;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $1 + 1 | 0;
      $4 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < $4 >>> 0) {
      continue label
     }
     break label;
    };
   }
   if ($1 >>> 0 >= $4 >>> 0) {
    break block
   }
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = $1;
   block4 : {
    $7 = ($4 - $3 | 0) & 3 | 0;
    if (!$7) {
     break block4
    }
    $5 = 0;
    label1 : while (1) {
     $2 = $0 + Math_imul($3, 24) | 0;
     HEAP32[($2 + 16 | 0) >> 2] = 0;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = -1;
     HEAP32[i64toi32_i32$3 >> 2] = -1;
     HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
     $3 = $3 + 1 | 0;
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($7 | 0)) {
      continue label1
     }
     break label1;
    };
   }
   if (($1 - $4 | 0) >>> 0 > -4 >>> 0) {
    break block
   }
   label2 : while (1) {
    $2 = $0 + Math_imul($3, 24) | 0;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$3 + 24 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = $2 + 32 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 40 | 0) >> 2] = 0;
    HEAP32[($2 + 64 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2 + 56 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = $2 + 48 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 88 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2 + 80 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = $2 + 72 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    $3 = $3 + 4 | 0;
    if (($3 | 0) != ($4 | 0)) {
     continue label2
    }
    break label2;
   };
  }
  return $1 | 0;
 }
 
 function seekpoint_compare_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, $2$hi = 0, $3$hi = 0, $10 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = $3$hi;
  $10 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > $3 >>> 0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  return $10 - (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & $2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) | 0 | 0;
 }
 
 function utf8len_($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0, $4 = 0, $5 = 0;
  $1 = 1;
  block : {
   $2 = HEAPU8[$0 >> 0] | 0;
   $3 = $2 << 24 >> 24;
   if (($3 | 0) > (-1 | 0)) {
    break block
   }
   block1 : {
    if (($2 & 224 | 0 | 0) != (192 | 0)) {
     break block1
    }
    if ((HEAP8[($0 + 1 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block1
    }
    return (($2 & 222 | 0 | 0) != (192 | 0)) << 1 | 0 | 0;
   }
   block2 : {
    if (($3 & -16 | 0 | 0) != (-32 | 0)) {
     break block2
    }
    $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($4 & 192 | 0 | 0) != (128 | 0)) {
     break block2
    }
    $5 = HEAP8[($0 + 2 | 0) >> 0] | 0;
    if (($5 | 0) > (-65 | 0)) {
     break block2
    }
    $1 = 0;
    block3 : {
     if (($3 | 0) != (-32 | 0)) {
      break block3
     }
     if (($4 & 160 | 0 | 0) == (128 | 0)) {
      break block
     }
    }
    block5 : {
     block6 : {
      switch ($2 + -237 | 0 | 0) {
      case 0:
       if (($4 & 224 | 0 | 0) != (160 | 0)) {
        break block5
       }
       break block;
      case 2:
       break block6;
      default:
       break block5;
      };
     }
     if (($4 | 0) != (191 | 0)) {
      break block5
     }
     if (($5 & 190 | 0 | 0) == (190 | 0)) {
      break block
     }
    }
    return 3 | 0;
   }
   block7 : {
    if (($3 & -8 | 0 | 0) != (-16 | 0)) {
     break block7
    }
    $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($1 & 192 | 0 | 0) != (128 | 0)) {
     break block7
    }
    if ((HEAP8[($0 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block7
    }
    if ((HEAP8[($0 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block7
    }
    return (($3 | 0) == (-16 | 0) ? (($1 & 176 | 0 | 0) != (128 | 0)) << 2 | 0 : 4) | 0;
   }
   block8 : {
    if (($3 & -4 | 0 | 0) != (-8 | 0)) {
     break block8
    }
    $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($1 & 192 | 0 | 0) != (128 | 0)) {
     break block8
    }
    if ((HEAP8[($0 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block8
    }
    if ((HEAP8[($0 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block8
    }
    if ((HEAP8[($0 + 4 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
     break block8
    }
    return (($3 | 0) == (-8 | 0) ? (($1 & 184 | 0 | 0) == (128 | 0) ? 0 : 5) : 5) | 0;
   }
   $1 = 0;
   if (($3 & -2 | 0 | 0) != (-4 | 0)) {
    break block
   }
   $2 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
   if (($2 & 192 | 0 | 0) != (128 | 0)) {
    break block
   }
   if ((HEAP8[($0 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
    break block
   }
   if ((HEAP8[($0 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
    break block
   }
   if ((HEAP8[($0 + 4 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
    break block
   }
   if ((HEAP8[($0 + 5 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
    break block
   }
   $1 = ($3 | 0) == (-4 | 0) ? (($2 & 188 | 0 | 0) == (128 | 0) ? 0 : 6) : 6;
  }
  return $1 | 0;
 }
 
 function FLAC__format_cuesheet_is_legal($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, $9 = 0, i64toi32_i32$0 = 0, $11 = 0, $5 = 0, $7 = 0, $10 = 0, $3 = 0, $3$hi = 0, $6 = 0, $8 = 0, $17 = 0, $18 = 0, $19 = 0;
  block2 : {
   block3 : {
    block5 : {
     block7 : {
      block9 : {
       block10 : {
        block20 : {
         block13 : {
          block14 : {
           block6 : {
            block : {
             if (!$1) {
              break block
             }
             block1 : {
              i64toi32_i32$2 = $0;
              i64toi32_i32$0 = HEAP32[($0 + 136 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0 + 140 | 0) >> 2] | 0;
              $3 = i64toi32_i32$0;
              $3$hi = i64toi32_i32$1;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 88199;
              if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
               break block1
              }
              $0 = GOT_data_internal___memory_base;
              if (!$2) {
               break block2
              }
              $0 = $0 + 70251 | 0;
              break block3;
             }
             block4 : {
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_urem($3 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
               break block4
              }
              $0 = GOT_data_internal___memory_base;
              if (!$2) {
               break block2
              }
              $0 = $0 + 70180 | 0;
              break block3;
             }
             $4 = HEAP32[($0 + 148 | 0) >> 2] | 0;
             if (!$4) {
              break block5
             }
             $5 = HEAP32[($0 + 152 | 0) >> 2] | 0;
             if ((HEAPU8[(($5 + ($4 << 5 | 0) | 0) + -24 | 0) >> 0] | 0 | 0) == (170 | 0)) {
              break block6
             }
             $0 = GOT_data_internal___memory_base;
             if (!$2) {
              break block2
             }
             $0 = $0 + 70842 | 0;
             break block3;
            }
            $5 = HEAP32[($0 + 148 | 0) >> 2] | 0;
            if (!$5) {
             break block5
            }
            $6 = $5 + -1 | 0;
            $7 = HEAP32[($0 + 152 | 0) >> 2] | 0;
            $8 = $7 + 23 | 0;
            $4 = 0;
            label1 : while (1) {
             $1 = $4 << 5 | 0;
             $0 = $7 + $1 | 0;
             if (!(HEAPU8[($0 + 8 | 0) >> 0] | 0)) {
              break block7
             }
             block12 : {
              block11 : {
               block8 : {
                if ($4 >>> 0 >= $6 >>> 0) {
                 break block8
                }
                $9 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
                if (!$9) {
                 break block9
                }
                if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
                 break block10
                }
                break block11;
               }
               $9 = HEAPU8[($8 + $1 | 0) >> 0] | 0;
               if (!$9) {
                break block12
               }
              }
              if (($9 | 0) == (1 | 0)) {
               break block12
              }
              $10 = HEAP32[($0 + 24 | 0) >> 2] | 0;
              $11 = $10 + -8 | 0;
              $0 = 1;
              label : while (1) {
               $1 = $0 << 4 | 0;
               if (((HEAPU8[($11 + $1 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[(($10 + $1 | 0) + 8 | 0) >> 0] | 0 | 0)) {
                break block13
               }
               $0 = $0 + 1 | 0;
               if (($0 | 0) != ($9 | 0)) {
                continue label
               }
               break label;
              };
             }
             $0 = 1;
             $4 = $4 + 1 | 0;
             if (($4 | 0) != ($5 | 0)) {
              continue label1
             }
             break block14;
            };
           }
           $7 = $4 + -1 | 0;
           $11 = 0;
           label3 : while (1) {
            $0 = $5 + ($11 << 5 | 0) | 0;
            $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
            if (!$1) {
             break block7
            }
            block15 : {
             if ($1 >>> 0 < 100 >>> 0) {
              break block15
             }
             if (($1 | 0) == (170 | 0)) {
              break block15
             }
             $0 = GOT_data_internal___memory_base;
             if (!$2) {
              break block2
             }
             $0 = $0 + 70625 | 0;
             break block3;
            }
            block16 : {
             i64toi32_i32$3 = $0;
             i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             $17 = i64toi32_i32$2;
             i64toi32_i32$2 = 0;
             i64toi32_i32$2 = __wasm_i64_urem($17 | 0, i64toi32_i32$1 | 0, 588 | 0, i64toi32_i32$2 | 0) | 0;
             i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
             if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
              break block16
             }
             if (!$2) {
              break block2
             }
             $0 = GOT_data_internal___memory_base + (($11 | 0) == ($7 | 0) ? 70039 : 70111) | 0;
             break block3;
            }
            $9 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
            block19 : {
             block18 : {
              block17 : {
               if ($11 >>> 0 >= $7 >>> 0) {
                break block17
               }
               if (!$9) {
                break block9
               }
               if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 < 2 >>> 0) {
                break block18
               }
               break block10;
              }
              if (!$9) {
               break block19
              }
             }
             $10 = HEAP32[($0 + 24 | 0) >> 2] | 0;
             i64toi32_i32$3 = $10;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
             i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
             $18 = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$1 = __wasm_i64_urem($18 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
             i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
             i64toi32_i32$3 = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 0;
             if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
              break block20
             }
             $0 = 1;
             if (($9 | 0) == (1 | 0)) {
              break block19
             }
             label2 : while (1) {
              $1 = $10 + ($0 << 4 | 0) | 0;
              i64toi32_i32$0 = $1;
              i64toi32_i32$3 = HEAP32[$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
              $19 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$3 = __wasm_i64_urem($19 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$3 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              if (!!(i64toi32_i32$3 | i64toi32_i32$2 | 0)) {
               break block20
              }
              if (((HEAPU8[($1 + -8 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0)) {
               break block13
              }
              $0 = $0 + 1 | 0;
              if (($0 | 0) != ($9 | 0)) {
               continue label2
              }
              break label2;
             };
            }
            $0 = 1;
            $11 = $11 + 1 | 0;
            if (($11 | 0) != ($4 | 0)) {
             continue label3
            }
            break label3;
           };
          }
          return $0 | 0;
         }
         $0 = GOT_data_internal___memory_base;
         if (!$2) {
          break block2
         }
         $0 = $0 + 70524 | 0;
         break block3;
        }
        $0 = GOT_data_internal___memory_base;
        if (!$2) {
         break block2
        }
        $0 = $0 + 69964 | 0;
        break block3;
       }
       $0 = GOT_data_internal___memory_base;
       if (!$2) {
        break block2
       }
       $0 = $0 + 70573 | 0;
       break block3;
      }
      $0 = GOT_data_internal___memory_base;
      if (!$2) {
       break block2
      }
      $0 = $0 + 69906 | 0;
      break block3;
     }
     $0 = GOT_data_internal___memory_base;
     if (!$2) {
      break block2
     }
     $0 = $0 + 70674 | 0;
     break block3;
    }
    $0 = GOT_data_internal___memory_base;
    if (!$2) {
     break block2
    }
    $0 = $0 + 70714 | 0;
   }
   HEAP32[$2 >> 2] = $0;
  }
  return 0 | 0;
 }
 
 function FLAC__format_picture_is_legal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  block2 : {
   block3 : {
    block : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAPU8[$2 >> 0] | 0;
     if (!$3) {
      break block
     }
     block1 : {
      label : while (1) {
       if ((($3 + -127 | 0) & 255 | 0) >>> 0 <= 160 >>> 0) {
        break block1
       }
       $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
       $2 = $2 + 1 | 0;
       if (!$3) {
        break block
       }
       continue label;
      };
     }
     $3 = GOT_data_internal___memory_base;
     if (!$1) {
      break block2
     }
     $3 = $3 + 70768 | 0;
     break block3;
    }
    block4 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!(HEAPU8[$3 >> 0] | 0)) {
      break block4
     }
     label1 : while (1) {
      block5 : {
       $2 = utf8len_($3 | 0) | 0;
       if ($2) {
        break block5
       }
       $3 = GOT_data_internal___memory_base;
       if (!$1) {
        break block2
       }
       $3 = $3 + 70452 | 0;
       break block3;
      }
      $3 = $3 + $2 | 0;
      if (HEAPU8[$3 >> 0] | 0) {
       continue label1
      }
      break label1;
     };
    }
    return 1 | 0;
   }
   HEAP32[$1 >> 2] = $3;
  }
  return 0 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  block : {
   label : while (1) {
    $3 = $0;
    if (!$3) {
     break block
    }
    $0 = $3 + -1 | 0;
    if (($1 >>> $3 | 0) >>> 0 <= $2 >>> 0) {
     continue label
    }
    break label;
   };
  }
  return $3 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  block : {
   if ($0 & 1 | 0) {
    break block
   }
   label : while (1) {
    $1 = $1 + 1 | 0;
    $2 = $0 & 2 | 0;
    $0 = $0 >>> 1 | 0;
    if (!$2) {
     continue label
    }
    break label;
   };
  }
  return ($1 >>> 0 < 15 >>> 0 ? $1 : 15) | 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0) {
  $0 = $0 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  block1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break block1
   }
   emscripten_builtin_free($1 | 0);
  }
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $2 = 1;
  block : {
   if ((HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0 >= $1 >>> 0) {
    break block
   }
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = 4 << $1 | 0;
   $4 = emscripten_builtin_realloc($2 | 0, $3 | 0) | 0;
   block1 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break block1
    }
    if ($4) {
     break block1
    }
    emscripten_builtin_free($2 | 0);
    HEAP32[$0 >> 2] = 0;
    return 0 | 0;
   }
   HEAP32[$0 >> 2] = $4;
   $2 = 0;
   if (!$4) {
    break block
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $4 = emscripten_builtin_realloc($5 | 0, $3 | 0) | 0;
   block2 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break block2
    }
    if ($4) {
     break block2
    }
    emscripten_builtin_free($5 | 0);
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    return 0 | 0;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   if (!$4) {
    break block
   }
   block3 : {
    if (!$3) {
     break block3
    }
    wasm2js_memory_fill($4, 0, $3);
   }
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function ogg_page_serialno($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  return HEAPU8[($1 + 14 | 0) >> 0] | 0 | ((HEAPU8[($1 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function ogg_stream_init($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $2 = 0;
  $2 = -1;
  block : {
   if (!$0) {
    break block
   }
   block1 : {
    if (!352) {
     break block1
    }
    wasm2js_memory_fill($0 + 8 | 0, 0, 352);
   }
   HEAP32[($0 + 24 | 0) >> 2] = 1024;
   HEAP32[($0 + 4 | 0) >> 2] = 16384;
   $3 = emscripten_builtin_malloc(16384 | 0) | 0;
   HEAP32[$0 >> 2] = $3;
   $4 = emscripten_builtin_malloc(4096 | 0) | 0;
   HEAP32[($0 + 16 | 0) >> 2] = $4;
   $5 = emscripten_builtin_malloc(8192 | 0) | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $5;
   block4 : {
    block2 : {
     if (!$3) {
      break block2
     }
     block3 : {
      if (!$4) {
       break block3
      }
      if ($5) {
       break block4
      }
     }
     emscripten_builtin_free($3 | 0);
    }
    block5 : {
     if (!$4) {
      break block5
     }
     emscripten_builtin_free($4 | 0);
    }
    block6 : {
     if (!$5) {
      break block6
     }
     emscripten_builtin_free($5 | 0);
    }
    if (!360) {
     break block
    }
    wasm2js_memory_fill($0, 0, 360);
    return -1 | 0;
   }
   HEAP32[($0 + 336 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_stream_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   if (!$0) {
    break block
   }
   block1 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break block1
    }
    emscripten_builtin_free($1 | 0);
   }
   block2 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if (!$1) {
     break block2
    }
    emscripten_builtin_free($1 | 0);
   }
   block3 : {
    $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$1) {
     break block3
    }
    emscripten_builtin_free($1 | 0);
   }
   if (!360) {
    break block
   }
   wasm2js_memory_fill($0, 0, 360);
  }
  return 0 | 0;
 }
 
 function ogg_page_checksum_set($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $6 = 0, $4 = 0, $7 = 0, $3 = 0, $5 = 0;
  block : {
   if (!$0) {
    break block
   }
   $1 = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = 0;
   block1 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break block1
    }
    $3 = $2 & 1 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    block3 : {
     block2 : {
      if (($2 | 0) != (1 | 0)) {
       break block2
      }
      $2 = 0;
      $1 = 0;
      break block3;
     }
     $5 = $2 & 2147483646 | 0;
     $2 = 0;
     $1 = 0;
     $6 = 0;
     label : while (1) {
      $7 = $4 + $2 | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[$7 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($7 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $2 = $2 + 2 | 0;
      $6 = $6 + 2 | 0;
      if (($6 | 0) != ($5 | 0)) {
       continue label
      }
      break label;
     };
    }
    if (!$3) {
     break block1
    }
    $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
   }
   block4 : {
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break block4
    }
    $3 = $2 & 1 | 0;
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    block6 : {
     block5 : {
      if (($2 | 0) != (1 | 0)) {
       break block5
      }
      $2 = 0;
      break block6;
     }
     $5 = $2 & 2147483646 | 0;
     $2 = 0;
     $6 = 0;
     label1 : while (1) {
      $7 = $4 + $2 | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[$7 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($7 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $2 = $2 + 2 | 0;
      $6 = $6 + 2 | 0;
      if (($6 | 0) != ($5 | 0)) {
       continue label1
      }
      break label1;
     };
    }
    if (!$3) {
     break block4
    }
    $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
   }
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = $1;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = $1 >>> 8 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = $1 >>> 16 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = $1 >>> 24 | 0;
  }
 }
 
 function ogg_stream_iovecin($0, $1, $2, $3, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var $7 = 0, $9 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, $5 = 0, $11 = 0, $8 = 0, $13 = 0, $10 = 0, i64toi32_i32$2 = 0, $17 = 0, $14 = 0, $16 = 0, i64toi32_i32$5 = 0, $12 = 0, $15 = 0, $17$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $286 = 0;
  $5 = -1;
  block : {
   if (!$0) {
    break block
   }
   $6 = HEAP32[$0 >> 2] | 0;
   if (!$6) {
    break block
   }
   block1 : {
    if ($1) {
     break block1
    }
    return 0 | 0;
   }
   $7 = 0;
   block3 : {
    block2 : {
     if (($2 | 0) >= (1 | 0)) {
      break block2
     }
     $8 = 0;
     break block3;
    }
    $8 = 0;
    label : while (1) {
     $9 = HEAP32[(($1 + ($7 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     if (($9 | 0) < (0 | 0)) {
      break block
     }
     if (($8 | 0) > ($9 ^ 2147483647 | 0 | 0)) {
      break block
     }
     $8 = $9 + $8 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label
     }
     break label;
    };
   }
   $10 = ($8 >>> 0) / (255 >>> 0) | 0;
   block4 : {
    $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$7) {
     break block4
    }
    $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $11 = $9 - $7 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $11;
    block5 : {
     if (($9 | 0) == ($7 | 0)) {
      break block5
     }
     if (!$11) {
      break block5
     }
     wasm2js_memory_copy($6, $6 + $7 | 0, $11);
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   if (_os_body_expand($0 | 0, $8 | 0) | 0) {
    break block
   }
   $12 = $10 + 1 | 0;
   if (_os_lacing_expand($0 | 0, $12 | 0) | 0) {
    break block
   }
   block6 : {
    if (($2 | 0) < (1 | 0)) {
     break block6
    }
    $13 = $2 & 1 | 0;
    $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $9 = 0;
    block7 : {
     if (($2 | 0) == (1 | 0)) {
      break block7
     }
     $14 = $2 & 2147483646 | 0;
     $9 = 0;
     $2 = 0;
     label1 : while (1) {
      block8 : {
       $7 = $1 + ($9 << 3 | 0) | 0;
       $6 = HEAP32[($7 + 4 | 0) >> 2] | 0;
       if (!$6) {
        break block8
       }
       wasm2js_memory_copy((HEAP32[$0 >> 2] | 0) + $5 | 0, HEAP32[$7 >> 2] | 0, $6);
      }
      $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + (HEAP32[($7 + 4 | 0) >> 2] | 0) | 0;
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      block9 : {
       $5 = $7 + 12 | 0;
       $11 = HEAP32[$5 >> 2] | 0;
       if (!$11) {
        break block9
       }
       wasm2js_memory_copy((HEAP32[$0 >> 2] | 0) + $6 | 0, HEAP32[($7 + 8 | 0) >> 2] | 0, $11);
      }
      $5 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0;
      HEAP32[($0 + 8 | 0) >> 2] = $5;
      $9 = $9 + 2 | 0;
      $2 = $2 + 2 | 0;
      if (($2 | 0) != ($14 | 0)) {
       continue label1
      }
      break label1;
     };
    }
    if (!$13) {
     break block6
    }
    block10 : {
     $7 = $1 + ($9 << 3 | 0) | 0;
     $9 = HEAP32[($7 + 4 | 0) >> 2] | 0;
     if (!$9) {
      break block10
     }
     wasm2js_memory_copy((HEAP32[$0 >> 2] | 0) + $5 | 0, HEAP32[$7 >> 2] | 0, $9);
    }
    HEAP32[($0 + 8 | 0) >> 2] = (HEAP32[($0 + 8 | 0) >> 2] | 0) + (HEAP32[($7 + 4 | 0) >> 2] | 0) | 0;
   }
   $13 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $15 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   block12 : {
    block11 : {
     if ($8 >>> 0 > 254 >>> 0) {
      break block11
     }
     $16 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $7 = 0;
     break block12;
    }
    $11 = $10 & 3 | 0;
    $16 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $9 = $16 + ($13 << 3 | 0) | 0;
    $1 = $15 + ($13 << 2 | 0) | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = HEAP32[($0 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0 + 356 | 0) >> 2] | 0;
    $17 = i64toi32_i32$0;
    $17$hi = i64toi32_i32$1;
    $2 = 0;
    $7 = 0;
    block13 : {
     if (($10 + -1 | 0) >>> 0 < 3 >>> 0) {
      break block13
     }
     $14 = $10 & 33554428 | 0;
     $7 = 0;
     $5 = 0;
     label2 : while (1) {
      HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$0 = $9 + ($7 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $17;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6 = $7 | 1 | 0;
      HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$0 = $9 + ($6 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $17;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6 = $7 | 2 | 0;
      HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$0 = $9 + ($6 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $17;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6 = $7 | 3 | 0;
      HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$0 = $9 + ($6 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $17;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $7 = $7 + 4 | 0;
      $5 = $5 + 4 | 0;
      if (($5 | 0) != ($14 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    block14 : {
     if (!$11) {
      break block14
     }
     label3 : while (1) {
      HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$0 = $9 + ($7 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $17;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $7 = $7 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    $7 = $10;
   }
   $9 = $15 + ($13 << 2 | 0) | 0;
   HEAP32[($9 + ($7 << 2 | 0) | 0) >> 2] = $8 - Math_imul($10, 255) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = ($16 + ($13 << 3 | 0) | 0) + ($7 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $4;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 352 | 0) >> 2] = $4;
   HEAP32[($0 + 356 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 0 | 256 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $13 + $12 | 0;
   $286 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $286;
   HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
   $5 = 0;
   if (!$3) {
    break block
   }
   HEAP32[($0 + 328 | 0) >> 2] = 1;
  }
  return $5 | 0;
 }
 
 function _os_body_expand($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  block : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($2 - $1 | 0 | 0) > (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
    break block
   }
   block1 : {
    if (($2 | 0) <= ($1 ^ 2147483647 | 0 | 0)) {
     break block1
    }
    block2 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break block2
     }
     emscripten_builtin_free($1 | 0);
    }
    block3 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break block3
     }
     emscripten_builtin_free($1 | 0);
    }
    block4 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break block4
     }
     emscripten_builtin_free($1 | 0);
    }
    block5 : {
     if (!360) {
      break block5
     }
     wasm2js_memory_fill($0, 0, 360);
    }
    return -1 | 0;
   }
   block6 : {
    $1 = $2 + $1 | 0;
    $1 = ($1 | 0) < (2147482623 | 0) ? $1 + 1024 | 0 : $1;
    $2 = emscripten_builtin_realloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0;
    if ($2) {
     break block6
    }
    block7 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break block7
     }
     emscripten_builtin_free($1 | 0);
    }
    block8 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break block8
     }
     emscripten_builtin_free($1 | 0);
    }
    block9 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break block9
     }
     emscripten_builtin_free($1 | 0);
    }
    block10 : {
     if (!360) {
      break block10
     }
     wasm2js_memory_fill($0, 0, 360);
    }
    return -1 | 0;
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = $1;
  }
  return 0 | 0;
 }
 
 function _os_lacing_expand($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  block : {
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (($2 - $1 | 0 | 0) > (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   block1 : {
    if (($2 | 0) <= ($1 ^ 2147483647 | 0 | 0)) {
     break block1
    }
    block2 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break block2
     }
     emscripten_builtin_free($1 | 0);
    }
    block3 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break block3
     }
     emscripten_builtin_free($1 | 0);
    }
    block4 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break block4
     }
     emscripten_builtin_free($1 | 0);
    }
    block5 : {
     if (!360) {
      break block5
     }
     wasm2js_memory_fill($0, 0, 360);
    }
    return -1 | 0;
   }
   block6 : {
    $1 = $2 + $1 | 0;
    $1 = ($1 | 0) < (2147483615 | 0) ? $1 + 32 | 0 : $1;
    $2 = emscripten_builtin_realloc(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, $1 << 2 | 0 | 0) | 0;
    if ($2) {
     break block6
    }
    block7 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break block7
     }
     emscripten_builtin_free($1 | 0);
    }
    block8 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break block8
     }
     emscripten_builtin_free($1 | 0);
    }
    block9 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break block9
     }
     emscripten_builtin_free($1 | 0);
    }
    block10 : {
     if (!360) {
      break block10
     }
     wasm2js_memory_fill($0, 0, 360);
    }
    return -1 | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = $2;
   block11 : {
    $2 = emscripten_builtin_realloc(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 << 3 | 0 | 0) | 0;
    if ($2) {
     break block11
    }
    block12 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break block12
     }
     emscripten_builtin_free($1 | 0);
    }
    block13 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break block13
     }
     emscripten_builtin_free($1 | 0);
    }
    block14 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break block14
     }
     emscripten_builtin_free($1 | 0);
    }
    block15 : {
     if (!360) {
      break block15
     }
     wasm2js_memory_fill($0, 0, 360);
    }
    return -1 | 0;
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
  return 0 | 0;
 }
 
 function ogg_stream_packetin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $1 = ogg_stream_iovecin($0 | 0, $2 + 8 | 0 | 0, 1 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function ogg_stream_flush($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ogg_stream_flush_i($0 | 0, $1 | 0, 1 | 0, 4096 | 0) | 0 | 0;
 }
 
 function ogg_stream_flush_i($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $12 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $11 = 0, $7 = 0, $14 = 0, $15 = 0, $9 = 0, $9$hi = 0, $13 = 0, $6 = 0, $4 = 0, $8 = 0, $30 = 0, $5 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $119 = 0, $122 = 0, $125 = 0, $128 = 0, $131 = 0, $134 = 0, $137 = 0, $205 = 0;
  $4 = 0;
  block : {
   $5 = HEAP32[$0 >> 2] | 0;
   if (!$5) {
    break block
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$6) {
    break block
   }
   $7 = ($6 | 0) < (255 | 0) ? $6 : 255;
   block8 : {
    block3 : {
     block2 : {
      block1 : {
       $8 = HEAP32[($0 + 332 | 0) >> 2] | 0;
       if (!$8) {
        break block1
       }
       i64toi32_i32$0 = -1;
       $9 = -1;
       $9$hi = i64toi32_i32$0;
       if (($6 | 0) >= (1 | 0)) {
        break block2
       }
       $10 = 0;
       break block3;
      }
      i64toi32_i32$0 = 0;
      $9 = 0;
      $9$hi = i64toi32_i32$0;
      block4 : {
       if (($6 | 0) >= (1 | 0)) {
        break block4
       }
       $10 = 0;
       break block3;
      }
      $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $12 = 0;
      label : while (1) {
       $10 = $12 + 1 | 0;
       if ((HEAPU8[($11 + ($12 << 2 | 0) | 0) >> 0] | 0 | 0) != (255 | 0)) {
        break block3
       }
       $12 = $10;
       if (($10 | 0) != ($7 | 0)) {
        continue label
       }
       break label;
      };
      $10 = $7;
      break block3;
     }
     $11 = 0;
     $13 = 0;
     $12 = 0;
     $10 = 0;
     block6 : {
      label1 : while (1) {
       block5 : {
        if (($12 | 0) <= ($3 | 0)) {
         break block5
        }
        if (($11 | 0) <= (3 | 0)) {
         break block5
        }
        $2 = 1;
        break block6;
       }
       $11 = 0;
       block7 : {
        $14 = HEAPU8[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($10 << 2 | 0) | 0) >> 0] | 0;
        if (($14 | 0) == (255 | 0)) {
         break block7
        }
        i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($10 << 3 | 0) | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        $13 = $13 + 1 | 0;
        $11 = $13;
       }
       $12 = $14 + $12 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($7 | 0)) {
        continue label1
       }
       break label1;
      };
      $10 = $7;
     }
     $15 = 255;
     if (($10 | 0) == (255 | 0)) {
      break block8
     }
    }
    $15 = $10;
    if (!$2) {
     break block
    }
   }
   $12 = 0;
   HEAP16[($0 + 44 | 0) >> 1] = 0;
   HEAP32[($0 + 40 | 0) >> 2] = 1399285583;
   $13 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $10 = !((HEAP32[$13 >> 2] | 0) & 256 | 0);
   $10 = $8 ? $10 : $10 | 2 | 0;
   HEAP8[($0 + 45 | 0) >> 0] = $10;
   block9 : {
    if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
     break block9
    }
    if (($6 | 0) != ($15 | 0)) {
     break block9
    }
    HEAP8[($0 + 45 | 0) >> 0] = $10 | 4 | 0;
   }
   $4 = $0 + 40 | 0;
   i64toi32_i32$1 = $9$hi;
   HEAP8[($0 + 46 | 0) >> 0] = $9;
   HEAP32[($0 + 332 | 0) >> 2] = 1;
   HEAP8[($0 + 66 | 0) >> 0] = $15;
   $31 = 0;
   HEAP16[($0 + 62 | 0) >> 1] = $31;
   HEAP16[($0 + 64 | 0) >> 1] = $31 >>> 16 | 0;
   $119 = $0;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 56;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $32 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $32 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($119 + 53 | 0) >> 0] = $32;
   $122 = $0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $33 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($122 + 52 | 0) >> 0] = $33;
   $125 = $0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 40;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $34 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($125 + 51 | 0) >> 0] = $34;
   $128 = $0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $35 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $35 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($128 + 50 | 0) >> 0] = $35;
   $131 = $0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 24;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $36 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($131 + 49 | 0) >> 0] = $36;
   $134 = $0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 16;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $37 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($134 + 48 | 0) >> 0] = $37;
   $137 = $0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 8;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[($137 + 47 | 0) >> 0] = $38;
   $30 = HEAP32[($0 + 336 | 0) >> 2] | 0;
   HEAP8[($0 + 54 | 0) >> 0] = $30;
   HEAP8[($0 + 55 | 0) >> 0] = $30 >>> 8 | 0;
   HEAP8[($0 + 56 | 0) >> 0] = $30 >>> 16 | 0;
   HEAP8[($0 + 57 | 0) >> 0] = $30 >>> 24 | 0;
   $10 = HEAP32[($0 + 340 | 0) >> 2] | 0;
   $10 = ($10 | 0) == (-1 | 0) ? 0 : $10;
   HEAP8[($0 + 58 | 0) >> 0] = $10;
   HEAP32[($0 + 340 | 0) >> 2] = $10 + 1 | 0;
   HEAP8[($0 + 61 | 0) >> 0] = $10 >>> 24 | 0;
   HEAP8[($0 + 60 | 0) >> 0] = $10 >>> 16 | 0;
   HEAP8[($0 + 59 | 0) >> 0] = $10 >>> 8 | 0;
   block10 : {
    if (($15 | 0) < (1 | 0)) {
     break block10
    }
    $8 = $15 & 1 | 0;
    block12 : {
     block11 : {
      if (($15 | 0) != (1 | 0)) {
       break block11
      }
      $12 = 0;
      $10 = 0;
      break block12;
     }
     $2 = $15 & 2147483646 | 0;
     $12 = 0;
     $10 = 0;
     $11 = 0;
     label2 : while (1) {
      $14 = $10 + $4 | 0;
      $7 = $13 + ($10 << 2 | 0) | 0;
      $3 = HEAP32[$7 >> 2] | 0;
      HEAP8[($14 + 27 | 0) >> 0] = $3;
      $7 = HEAP32[($7 + 4 | 0) >> 2] | 0;
      HEAP8[($14 + 28 | 0) >> 0] = $7;
      $12 = ($7 & 255 | 0) + (($3 & 255 | 0) + $12 | 0) | 0;
      $10 = $10 + 2 | 0;
      $11 = $11 + 2 | 0;
      if (($11 | 0) != ($2 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    if (!$8) {
     break block10
    }
    $205 = $10 + $4 | 0;
    $10 = HEAP32[($13 + ($10 << 2 | 0) | 0) >> 2] | 0;
    HEAP8[($205 + 27 | 0) >> 0] = $10;
    $12 = ($10 & 255 | 0) + $12 | 0;
   }
   HEAP32[$1 >> 2] = $4;
   $10 = $15 + 27 | 0;
   HEAP32[($0 + 324 | 0) >> 2] = $10;
   HEAP32[($1 + 4 | 0) >> 2] = $10;
   $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $12;
   HEAP32[($1 + 8 | 0) >> 2] = $5 + $10 | 0;
   $10 = $6 - $15 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $10;
   block13 : {
    $10 = $10 << 2 | 0;
    if (!$10) {
     break block13
    }
    wasm2js_memory_copy($13, $13 + ($15 << 2 | 0) | 0, $10);
   }
   block14 : {
    $10 = (HEAP32[($0 + 28 | 0) >> 2] | 0) << 3 | 0;
    if (!$10) {
     break block14
    }
    $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    wasm2js_memory_copy($11, $11 + ($15 << 3 | 0) | 0, $10);
   }
   HEAP32[($0 + 12 | 0) >> 2] = (HEAP32[($0 + 12 | 0) >> 2] | 0) + $12 | 0;
   $0 = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 22 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 23 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 24 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 25 | 0) >> 0] = 0;
   block15 : {
    $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (($10 | 0) < (1 | 0)) {
     break block15
    }
    $3 = $10 & 1 | 0;
    $14 = HEAP32[$1 >> 2] | 0;
    block17 : {
     block16 : {
      if (($10 | 0) != (1 | 0)) {
       break block16
      }
      $10 = 0;
      $0 = 0;
      break block17;
     }
     $7 = $10 & 2147483646 | 0;
     $10 = 0;
     $0 = 0;
     $12 = 0;
     label3 : while (1) {
      $11 = $14 + $10 | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[$11 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($11 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $10 = $10 + 2 | 0;
      $12 = $12 + 2 | 0;
      if (($12 | 0) != ($7 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    if (!$3) {
     break block15
    }
    $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($14 + $10 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
   }
   block18 : {
    $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (($10 | 0) < (1 | 0)) {
     break block18
    }
    $3 = $10 & 1 | 0;
    $14 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    block20 : {
     block19 : {
      if (($10 | 0) != (1 | 0)) {
       break block19
      }
      $10 = 0;
      break block20;
     }
     $7 = $10 & 2147483646 | 0;
     $10 = 0;
     $12 = 0;
     label4 : while (1) {
      $11 = $14 + $10 | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[$11 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($11 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $10 = $10 + 2 | 0;
      $12 = $12 + 2 | 0;
      if (($12 | 0) != ($7 | 0)) {
       continue label4
      }
      break label4;
     };
    }
    if (!$3) {
     break block18
    }
    $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($14 + $10 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
   }
   HEAP8[((HEAP32[$1 >> 2] | 0) + 22 | 0) >> 0] = $0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 23 | 0) >> 0] = $0 >>> 8 | 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 24 | 0) >> 0] = $0 >>> 16 | 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 25 | 0) >> 0] = $0 >>> 24 | 0;
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function ogg_stream_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = 0;
  block : {
   if (!$0) {
    break block
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break block
   }
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   block3 : {
    block2 : {
     block1 : {
      if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
       break block1
      }
      if ($3) {
       break block2
      }
      $2 = 0;
      break block3;
     }
     $2 = 0;
     if (!$3) {
      break block3
     }
     if (HEAP32[($0 + 332 | 0) >> 2] | 0) {
      break block3
     }
    }
    $2 = 1;
   }
   $2 = ogg_stream_flush_i($0 | 0, $1 | 0, $2 | 0, 4096 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  block : {
   if (!$0) {
    break block
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  block : {
   if (!$0) {
    break block
   }
   block1 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break block1
    }
    emscripten_builtin_free($1 | 0);
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_buffer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $2 = 0;
  block : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break block
   }
   block1 : {
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$4) {
     break block1
    }
    $2 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $4 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $2;
    block2 : {
     if (($2 | 0) < (1 | 0)) {
      break block2
     }
     block3 : {
      if (!$2) {
       break block3
      }
      $3 = HEAP32[$0 >> 2] | 0;
      wasm2js_memory_copy($3, $3 + $4 | 0, $2);
     }
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   $2 = HEAP32[$0 >> 2] | 0;
   block4 : {
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (($1 | 0) <= ($3 - $4 | 0 | 0)) {
     break block4
    }
    $1 = ($1 + $4 | 0) + 4096 | 0;
    block6 : {
     block5 : {
      if (!$2) {
       break block5
      }
      $2 = emscripten_builtin_realloc($2 | 0, $1 | 0) | 0;
      break block6;
     }
     $2 = emscripten_builtin_malloc($1 | 0) | 0;
    }
    block7 : {
     if ($2) {
      break block7
     }
     block8 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if (!$2) {
       break block8
      }
      emscripten_builtin_free($2 | 0);
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return 0 | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    HEAP32[$0 >> 2] = $2;
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $2 = $2 + $4 | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_wrote($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = -1;
  block : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break block
   }
   $1 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $1 | 0;
   if (($1 | 0) > ($3 | 0)) {
    break block
   }
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_pageseek($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $7 = 0, $4 = 0, $8 = 0, $6 = 0, $16 = 0, $12 = 0, $9 = 0, $2 = 0, $5 = 0, $17 = 0, $11 = 0, $18 = 0, $19 = 0, $13 = 0, i64toi32_i32$0 = 0, $10 = 0, $14 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  block : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break block
   }
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $5 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $4 | 0;
   $6 = HEAP32[$0 >> 2] | 0;
   $7 = $6 + $4 | 0;
   block10 : {
    block2 : {
     block1 : {
      $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if ($8) {
       break block1
      }
      if (($5 | 0) < (27 | 0)) {
       break block
      }
      if ((HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
       break block2
      }
      $4 = HEAPU8[($7 + 26 | 0) >> 0] | 0;
      $8 = $4 + 27 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       break block
      }
      block3 : {
       if (!$4) {
        break block3
       }
       $9 = $7 + 27 | 0;
       $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $4 = 0;
       label : while (1) {
        $6 = $6 + (HEAPU8[($9 + $4 | 0) >> 0] | 0) | 0;
        HEAP32[($0 + 24 | 0) >> 2] = $6;
        $4 = $4 + 1 | 0;
        if ($4 >>> 0 < (HEAPU8[($7 + 26 | 0) >> 0] | 0) >>> 0) {
         continue label
        }
        break label;
       };
      }
      HEAP32[($0 + 20 | 0) >> 2] = $8;
     }
     if (($8 + (HEAP32[($0 + 24 | 0) >> 2] | 0) | 0 | 0) > ($5 | 0)) {
      break block
     }
     $10 = HEAPU8[($7 + 22 | 0) >> 0] | 0 | ((HEAPU8[($7 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     HEAP32[($2 + 12 | 0) >> 2] = $10;
     $3 = 0;
     $17 = 0;
     HEAP8[($7 + 22 | 0) >> 0] = $17;
     HEAP8[($7 + 23 | 0) >> 0] = $17 >>> 8 | 0;
     HEAP8[($7 + 24 | 0) >> 0] = $17 >>> 16 | 0;
     HEAP8[($7 + 25 | 0) >> 0] = $17 >>> 24 | 0;
     $11 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $18 = 0;
     HEAP8[($7 + 22 | 0) >> 0] = $18;
     HEAP8[($7 + 23 | 0) >> 0] = $18 >>> 8 | 0;
     HEAP8[($7 + 24 | 0) >> 0] = $18 >>> 16 | 0;
     HEAP8[($7 + 25 | 0) >> 0] = $18 >>> 24 | 0;
     block4 : {
      if (($12 | 0) < (1 | 0)) {
       break block4
      }
      $13 = $12 & 1 | 0;
      block6 : {
       block5 : {
        if (($12 | 0) != (1 | 0)) {
         break block5
        }
        $4 = 0;
        $3 = 0;
        break block6;
       }
       $9 = $12 & 2147483646 | 0;
       $4 = 0;
       $3 = 0;
       $8 = 0;
       label1 : while (1) {
        $6 = $7 + $4 | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[$6 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $4 = $4 + 2 | 0;
        $8 = $8 + 2 | 0;
        if (($8 | 0) != ($9 | 0)) {
         continue label1
        }
        break label1;
       };
      }
      if (!$13) {
       break block4
      }
      $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($7 + $4 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
     }
     $13 = $7 + 22 | 0;
     block7 : {
      if (($11 | 0) < (1 | 0)) {
       break block7
      }
      $9 = $7 + $12 | 0;
      $14 = $11 & 1 | 0;
      block9 : {
       block8 : {
        if (($11 | 0) != (1 | 0)) {
         break block8
        }
        $4 = 0;
        break block9;
       }
       $12 = $11 & 2147483646 | 0;
       $4 = 0;
       $8 = 0;
       label2 : while (1) {
        $6 = $9 + $4 | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[$6 >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $4 = $4 + 2 | 0;
        $8 = $8 + 2 | 0;
        if (($8 | 0) != ($12 | 0)) {
         continue label2
        }
        break label2;
       };
      }
      if (!$14) {
       break block7
      }
      $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($9 + $4 | 0) >> 0] | 0) | 0) << 2 | 0) + 71312 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
     }
     HEAP8[($7 + 22 | 0) >> 0] = $3;
     HEAP8[($7 + 23 | 0) >> 0] = $3 >>> 8 | 0;
     HEAP8[($7 + 24 | 0) >> 0] = $3 >>> 16 | 0;
     HEAP8[($7 + 25 | 0) >> 0] = $3 >>> 24 | 0;
     $16 = $13;
     if ((HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) == (HEAPU8[$16 >> 0] | 0 | ((HEAPU8[($16 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
      break block10
     }
     $19 = $10;
     HEAP8[$16 >> 0] = $19;
     HEAP8[($16 + 1 | 0) >> 0] = $19 >>> 8 | 0;
     HEAP8[($16 + 2 | 0) >> 0] = $19 >>> 16 | 0;
     HEAP8[($16 + 3 | 0) >> 0] = $19 >>> 24 | 0;
     $6 = HEAP32[$0 >> 2] | 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
    block11 : {
     $3 = memchr($7 + 1 | 0 | 0, 79 | 0, $5 + -1 | 0 | 0) | 0;
     if ($3) {
      break block11
     }
     $3 = $6 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $3 - $6 | 0;
    $3 = $7 - $3 | 0;
    break block;
   }
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   block12 : {
    if (!$1) {
     break block12
    }
    $8 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 12 | 0) >> 2] = $7;
    HEAP32[($1 + 4 | 0) >> 2] = $3;
    $8 = $8 + $4 | 0;
    HEAP32[$1 >> 2] = $8;
    HEAP32[($1 + 8 | 0) >> 2] = $8 + $3 | 0;
   }
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
   $3 = $7 + $3 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $4 + $3 | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function ogg_sync_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break block
   }
   label : while (1) {
    block1 : {
     $2 = ogg_sync_pageseek($0 | 0, $1 | 0) | 0;
     if (($2 | 0) <= (0 | 0)) {
      break block1
     }
     return 1 | 0;
    }
    block2 : {
     if ($2) {
      break block2
     }
     return 0 | 0;
    }
    if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
     continue label
    }
    break label;
   };
   HEAP32[($0 + 16 | 0) >> 2] = 1;
   $2 = -1;
  }
  return $2 | 0;
 }
 
 function ogg_stream_pagein($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $13 = 0, $4 = 0, $3 = 0, $10 = 0, $2 = 0, i64toi32_i32$0 = 0, $12 = 0, $6 = 0, i64toi32_i32$1 = 0, $7 = 0, $8 = 0, $14 = 0, $15 = 0, $18 = 0, $5 = 0, $9 = 0, $17 = 0, $11 = 0, $11$hi = 0, $16 = 0, $19 = 0;
  $2 = -1;
  block : {
   if (!$0) {
    break block
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break block
   }
   $4 = HEAP32[$1 >> 2] | 0;
   $5 = HEAPU8[($4 + 5 | 0) >> 0] | 0;
   $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $8 = HEAPU8[($4 + 26 | 0) >> 0] | 0;
   $9 = HEAPU8[($4 + 18 | 0) >> 0] | 0 | ((HEAPU8[($4 + 19 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 20 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 21 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $10 = HEAPU8[($4 + 14 | 0) >> 0] | 0 | ((HEAPU8[($4 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[($4 + 6 | 0) >> 0] | 0 | ((HEAPU8[($4 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[($4 + 10 | 0) >> 0] | 0 | ((HEAPU8[($4 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $11 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$1;
   $12 = HEAPU8[($4 + 4 | 0) >> 0] | 0;
   $1 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   block1 : {
    $13 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$13) {
     break block1
    }
    $14 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $15 = $14 - $13 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $15;
    block2 : {
     if (($14 | 0) == ($13 | 0)) {
      break block2
     }
     if (!$15) {
      break block2
     }
     wasm2js_memory_copy($3, $3 + $13 | 0, $15);
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   block3 : {
    if (!$1) {
     break block3
    }
    $13 = $1;
    block4 : {
     $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($3 | 0) == ($1 | 0)) {
      break block4
     }
     block5 : {
      $13 = ($3 - $1 | 0) << 2 | 0;
      if (!$13) {
       break block5
      }
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      wasm2js_memory_copy($3, $3 + ($1 << 2 | 0) | 0, $13);
     }
     block6 : {
      $13 = ((HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0) << 3 | 0;
      if (!$13) {
       break block6
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      wasm2js_memory_copy($3, $3 + ($1 << 3 | 0) | 0, $13);
     }
     $13 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 36 | 0) >> 2] = 0;
    HEAP32[($0 + 28 | 0) >> 2] = $13 - $1 | 0;
    HEAP32[($0 + 32 | 0) >> 2] = (HEAP32[($0 + 32 | 0) >> 2] | 0) - $1 | 0;
   }
   if (($10 | 0) != (HEAP32[($0 + 336 | 0) >> 2] | 0 | 0)) {
    break block
   }
   if ($12 & 255 | 0) {
    break block
   }
   if (_os_lacing_expand($0 | 0, $8 + 1 | 0 | 0) | 0) {
    break block
   }
   $16 = $5 & 1 | 0;
   block7 : {
    $17 = HEAP32[($0 + 340 | 0) >> 2] | 0;
    if (($9 | 0) == ($17 | 0)) {
     break block7
    }
    block8 : {
     $18 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     $15 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($18 | 0) >= ($15 | 0)) {
      break block8
     }
     $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     block10 : {
      block9 : {
       $14 = ($15 - $18 | 0) & 3 | 0;
       if ($14) {
        break block9
       }
       $13 = $18;
       break block10;
      }
      $3 = 0;
      $10 = $18;
      label : while (1) {
       $1 = $1 - (HEAPU8[($12 + ($10 << 2 | 0) | 0) >> 0] | 0) | 0;
       $13 = $10 + 1 | 0;
       $10 = $13;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($14 | 0)) {
        continue label
       }
       break label;
      };
     }
     block11 : {
      if (($18 - $15 | 0) >>> 0 > -4 >>> 0) {
       break block11
      }
      $3 = $12 + 12 | 0;
      $14 = $12 + 8 | 0;
      $19 = $12 + 4 | 0;
      label1 : while (1) {
       $10 = $13 << 2 | 0;
       $1 = $1 - ((((HEAPU8[($12 + $10 | 0) >> 0] | 0) + (HEAPU8[($19 + $10 | 0) >> 0] | 0) | 0) + (HEAPU8[($14 + $10 | 0) >> 0] | 0) | 0) + (HEAPU8[($3 + $10 | 0) >> 0] | 0) | 0) | 0;
       $13 = $13 + 4 | 0;
       if (($13 | 0) != ($15 | 0)) {
        continue label1
       }
       break label1;
      };
     }
     HEAP32[($0 + 8 | 0) >> 2] = $1;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $18;
    if (($17 | 0) == (-1 | 0)) {
     break block7
    }
    $1 = $18 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($18 << 2 | 0) | 0) >> 2] = 1024;
    HEAP32[($0 + 32 | 0) >> 2] = $1;
   }
   $13 = $5 & 2 | 0;
   $1 = 0;
   block12 : {
    if (!$16) {
     break block12
    }
    block13 : {
     $10 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($10 | 0) < (1 | 0)) {
      break block13
     }
     if ((HEAP32[(((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($10 << 2 | 0) | 0) + -4 | 0) >> 2] | 0 | 0) != (1024 | 0)) {
      break block12
     }
    }
    $13 = 0;
    block14 : {
     if ($8) {
      break block14
     }
     $1 = 0;
     break block12;
    }
    $10 = $4 + 27 | 0;
    label2 : while (1) {
     $1 = $13 + 1 | 0;
     $13 = HEAPU8[($10 + $13 | 0) >> 0] | 0;
     $6 = $6 - $13 | 0;
     $7 = $7 + $13 | 0;
     block15 : {
      if (($13 | 0) == (255 | 0)) {
       break block15
      }
      $13 = 0;
      break block12;
     }
     $13 = $1;
     if (($1 | 0) != ($8 | 0)) {
      continue label2
     }
     break label2;
    };
    $13 = 0;
    $1 = $8;
   }
   block16 : {
    if (!$6) {
     break block16
    }
    if (_os_body_expand($0 | 0, $6 | 0) | 0) {
     break block
    }
    block17 : {
     if (!$6) {
      break block17
     }
     wasm2js_memory_copy((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0, $7, $6);
    }
    HEAP32[($0 + 8 | 0) >> 2] = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $6 | 0;
   }
   $5 = $5 & 4 | 0;
   block18 : {
    if (($1 | 0) >= ($8 | 0)) {
     break block18
    }
    $10 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $12 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    $2 = $6 + ($12 << 2 | 0) | 0;
    $3 = $4 + 27 | 0;
    $4 = HEAPU8[($3 + $1 | 0) >> 0] | 0;
    HEAP32[$2 >> 2] = $4;
    i64toi32_i32$0 = $10 + ($12 << 3 | 0) | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$0 >> 2] = -1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    block19 : {
     if (!$13) {
      break block19
     }
     HEAP32[$2 >> 2] = $4 | 256 | 0;
    }
    $13 = $12 + 1 | 0;
    block21 : {
     block20 : {
      if (($4 | 0) != (255 | 0)) {
       break block20
      }
      $7 = -1;
      break block21;
     }
     HEAP32[($0 + 32 | 0) >> 2] = $13;
     $7 = $12;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $13;
    block22 : {
     $2 = $1 + 1 | 0;
     if (($2 | 0) == ($8 | 0)) {
      break block22
     }
     $14 = $8 + -2 | 0;
     block24 : {
      block23 : {
       if (!(($1 - $8 | 0) & 1 | 0)) {
        break block23
       }
       $4 = $13;
       break block24;
      }
      $2 = HEAPU8[($3 + $2 | 0) >> 0] | 0;
      HEAP32[($6 + ($13 << 2 | 0) | 0) >> 2] = $2;
      i64toi32_i32$0 = $10 + ($13 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4 = $12 + 2 | 0;
      block25 : {
       if (($2 | 0) == (255 | 0)) {
        break block25
       }
       HEAP32[($0 + 32 | 0) >> 2] = $4;
       $7 = $13;
      }
      HEAP32[($0 + 28 | 0) >> 2] = $4;
      $2 = $1 + 2 | 0;
     }
     if (($14 | 0) == ($1 | 0)) {
      break block22
     }
     $12 = $3 + 1 | 0;
     label3 : while (1) {
      $13 = HEAPU8[($3 + $2 | 0) >> 0] | 0;
      HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] = $13;
      i64toi32_i32$0 = $10 + ($4 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $4 + 1 | 0;
      block26 : {
       if (($13 | 0) == (255 | 0)) {
        break block26
       }
       HEAP32[($0 + 32 | 0) >> 2] = $1;
       $7 = $4;
      }
      HEAP32[($0 + 28 | 0) >> 2] = $1;
      $13 = HEAPU8[($12 + $2 | 0) >> 0] | 0;
      HEAP32[($6 + ($1 << 2 | 0) | 0) >> 2] = $13;
      i64toi32_i32$0 = $10 + ($1 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4 = $4 + 2 | 0;
      block27 : {
       if (($13 | 0) == (255 | 0)) {
        break block27
       }
       HEAP32[($0 + 32 | 0) >> 2] = $4;
       $7 = $1;
      }
      HEAP32[($0 + 28 | 0) >> 2] = $4;
      $2 = $2 + 2 | 0;
      if (($2 | 0) != ($8 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    if (($7 | 0) == (-1 | 0)) {
     break block18
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($7 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $11;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   block28 : {
    if (!$5) {
     break block28
    }
    HEAP32[($0 + 328 | 0) >> 2] = 1;
    $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (($4 | 0) < (1 | 0)) {
     break block28
    }
    $4 = ((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) + -4 | 0;
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | 512 | 0;
   }
   HEAP32[($0 + 340 | 0) >> 2] = $9 + 1 | 0;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  block : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
    break block
   }
   return -1 | 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function ogg_stream_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1 = 0;
  $1 = -1;
  block : {
   if (!$0) {
    break block
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break block
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 344 | 0) >> 2] = 0;
   HEAP32[($0 + 348 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 340 | 0) >> 2] = -1;
   $1 = 0;
   HEAP32[($0 + 332 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 324 | 0) >> 2] = 0;
   HEAP32[($0 + 328 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 36 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 352 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return $1 | 0;
 }
 
 function ogg_stream_packetout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, $8 = 0, $4 = 0, $7 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$5 = 0, $3 = 0, $5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $72 = 0, $82 = 0, $90 = 0;
  $2 = 0;
  block : {
   if (!$0) {
    break block
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break block
   }
   $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) <= ($4 | 0)) {
    break block
   }
   $2 = -1;
   block1 : {
    $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
    if ($6 & 1024 | 0) {
     break block1
    }
    $7 = $6 & 512 | 0;
    $2 = 255;
    block3 : {
     block2 : {
      $8 = $6 & 255 | 0;
      if (($8 | 0) == (255 | 0)) {
       break block2
      }
      $2 = $8;
      break block3;
     }
     label : while (1) {
      $4 = $4 + 1 | 0;
      $8 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
      $7 = $8 & 512 | 0 ? 512 : $7;
      $8 = $8 & 255 | 0;
      $2 = $8 + $2 | 0;
      if (($8 | 0) == (255 | 0)) {
       continue label
      }
      break label;
     };
    }
    block5 : {
     block4 : {
      if ($1) {
       break block4
      }
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      break block5;
     }
     HEAP32[($1 + 8 | 0) >> 2] = $6 & 256 | 0;
     HEAP32[($1 + 12 | 0) >> 2] = $7;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[$1 >> 2] = $3 + $7 | 0;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[($0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
     $72 = i64toi32_i32$0;
     i64toi32_i32$0 = $1;
     HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $72;
     HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $2;
     $82 = i64toi32_i32$1;
     i64toi32_i32$1 = $1;
     HEAP32[($1 + 16 | 0) >> 2] = $82;
     HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $7 + $2 | 0;
    $2 = 1;
   }
   HEAP32[($0 + 36 | 0) >> 2] = $4 + 1 | 0;
   $90 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $90;
   HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
  }
  return $2 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  block : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0) {
    break block
   }
   if (ogg_sync_init($0 + 368 | 0 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = -1;
   HEAP32[($0 + 396 | 0) >> 2] = -1;
   HEAP32[($0 + 400 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 408 | 0) >> 2] = 0;
   HEAP32[($0 + 412 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 404 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_sync_clear($0 + 368 | 0 | 0) | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 1;
 }
 
 function FLAC__ogg_decoder_aspect_flush($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_reset($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
  block : {
   if (!(HEAP32[$0 >> 2] | 0)) {
    break block
   }
   HEAP32[($0 + 404 | 0) >> 2] = 1;
  }
 }
 
 function FLAC__ogg_decoder_aspect_read_callback_wrapper($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $14 = 0, $16 = 0, $15 = 0, $6 = 0, $7 = 0, $17 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = 0;
  block10 : {
   block1 : {
    block : {
     if ($7) {
      break block
     }
     $2 = 1;
     break block1;
    }
    $8 = $0 + 416 | 0;
    $9 = $0 + 368 | 0;
    $10 = $0 + 8 | 0;
    $11 = $0 + 440 | 0;
    $12 = HEAP32[GOT_data_internal_FLAC__OGG_MAPPING_MAGIC >> 2] | 0;
    $13 = (HEAPU8[GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE >> 0] | 0) & 255 | 0;
    $14 = 0;
    block2 : {
     label : while (1) {
      if (HEAP32[($0 + 408 | 0) >> 2] | 0) {
       break block2
      }
      block7 : {
       block11 : {
        block3 : {
         if (!(HEAP32[($0 + 412 | 0) >> 2] | 0)) {
          break block3
         }
         block4 : {
          if (!(HEAP32[($0 + 432 | 0) >> 2] | 0)) {
           break block4
          }
          $15 = HEAP32[($0 + 440 | 0) >> 2] | 0;
          block5 : {
           $16 = HEAP32[($0 + 444 | 0) >> 2] | 0;
           $14 = $7 - $14 | 0;
           if ($16 >>> 0 > $14 >>> 0) {
            break block5
           }
           block6 : {
            if (!$16) {
             break block6
            }
            wasm2js_memory_copy($1, $15, $16);
           }
           HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $16 | 0;
           HEAP32[($0 + 432 | 0) >> 2] = 0;
           $1 = $1 + $16 | 0;
           break block7;
          }
          block8 : {
           if (!$14) {
            break block8
           }
           wasm2js_memory_copy($1, $15, $14);
          }
          HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $14 | 0;
          HEAP32[($0 + 440 | 0) >> 2] = (HEAP32[($0 + 440 | 0) >> 2] | 0) + $14 | 0;
          HEAP32[($0 + 444 | 0) >> 2] = (HEAP32[($0 + 444 | 0) >> 2] | 0) - $14 | 0;
          $1 = $1 + $14 | 0;
          break block7;
         }
         block9 : {
          $14 = ogg_stream_packetout($10 | 0, $11 | 0) | 0;
          if (($14 | 0) < (1 | 0)) {
           break block9
          }
          HEAP32[($0 + 432 | 0) >> 2] = 1;
          $15 = HEAP32[($0 + 444 | 0) >> 2] | 0;
          if (($15 | 0) < (1 | 0)) {
           break block7
          }
          $16 = HEAP32[$11 >> 2] | 0;
          if ((HEAPU8[$16 >> 0] | 0 | 0) != ($13 | 0)) {
           break block7
          }
          $14 = 3;
          if ($15 >>> 0 < 9 >>> 0) {
           break block10
          }
          $17 = $12;
          if ((HEAPU8[($16 + 1 | 0) >> 0] | 0 | ((HEAPU8[($16 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16 + 3 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16 + 4 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$17 >> 0] | 0 | ((HEAPU8[($17 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
           break block10
          }
          $14 = HEAPU8[($16 + 5 | 0) >> 0] | 0;
          HEAP32[($0 + 396 | 0) >> 2] = $14;
          HEAP32[($0 + 400 | 0) >> 2] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
          if (($14 | 0) == (1 | 0)) {
           break block11
          }
          $14 = 4;
          break block10;
         }
         block12 : {
          if (!$14) {
           break block12
          }
          $14 = 2;
          break block10;
         }
         HEAP32[($0 + 412 | 0) >> 2] = 0;
         break block7;
        }
        block13 : {
         $14 = ogg_sync_pageout($9 | 0, $8 | 0) | 0;
         if (($14 | 0) < (1 | 0)) {
          break block13
         }
         block14 : {
          if (!(HEAP32[($0 + 404 | 0) >> 2] | 0)) {
           break block14
          }
          $14 = ogg_page_serialno($8 | 0) | 0;
          HEAP32[($0 + 404 | 0) >> 2] = 0;
          HEAP32[($0 + 344 | 0) >> 2] = $14;
          HEAP32[($0 + 4 | 0) >> 2] = $14;
         }
         if (ogg_stream_pagein($10 | 0, $8 | 0) | 0) {
          break block7
         }
         HEAP32[($0 + 432 | 0) >> 2] = 0;
         HEAP32[($0 + 412 | 0) >> 2] = 1;
         break block7;
        }
        block15 : {
         if (!$14) {
          break block15
         }
         $14 = 2;
         break block10;
        }
        block16 : {
         $14 = $7 - (HEAP32[$2 >> 2] | 0) | 0;
         $14 = $14 >>> 0 > 8192 >>> 0 ? $14 : 8192;
         $16 = ogg_sync_buffer($9 | 0, $14 | 0) | 0;
         if ($16) {
          break block16
         }
         $14 = 7;
         break block10;
        }
        HEAP32[($6 + 12 | 0) >> 2] = $14;
        block18 : {
         switch ((FUNCTION_TABLE[$3 | 0]($4, $16, $6 + 12 | 0, $5) | 0) + -1 | 0 | 0) {
         case 4:
          $14 = 5;
          break block10;
         case 0:
          HEAP32[($0 + 408 | 0) >> 2] = 1;
          break;
         default:
          break block18;
         };
        }
        if ((ogg_sync_wrote($9 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) >= (0 | 0)) {
         break block7
        }
        $14 = 6;
        break block10;
       }
       HEAP32[($0 + 444 | 0) >> 2] = $15 + -9 | 0;
       HEAP32[($0 + 440 | 0) >> 2] = $16 + 9 | 0;
      }
      $14 = HEAP32[$2 >> 2] | 0;
      if ($14 >>> 0 < $7 >>> 0) {
       continue label
      }
      break label;
     };
    }
    $2 = !$14;
   }
   $14 = $2 & (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $14 | 0;
 }
 
 function FLAC__MD5Init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 271733878;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = -1732584194;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -271733879;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 1732584193;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__MD5Final($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$2 = 0, $3 = 0, $9 = 0, $10 = 0, $50 = 0, $53 = 0;
  $2 = (HEAP32[($1 + 80 | 0) >> 2] | 0) & 63 | 0;
  $3 = $1 + $2 | 0;
  HEAP8[$3 >> 0] = 128;
  $3 = $3 + 1 | 0;
  block1 : {
   block : {
    if ($2 >>> 0 >= 56 >>> 0) {
     break block
    }
    $2 = 55 - $2 | 0;
    break block1;
   }
   block2 : {
    $2 = $2 ^ 63 | 0;
    if (!$2) {
     break block2
    }
    wasm2js_memory_fill($3, 0, $2);
   }
   FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
   $2 = 56;
   $3 = $1;
  }
  block3 : {
   if (!$2) {
    break block3
   }
   wasm2js_memory_fill($3, 0, $2);
  }
  $2 = HEAP32[($1 + 80 | 0) >> 2] | 0;
  HEAP32[($1 + 56 | 0) >> 2] = $2 << 3 | 0;
  HEAP32[($1 + 60 | 0) >> 2] = (HEAP32[($1 + 84 | 0) >> 2] | 0) << 3 | 0 | ($2 >>> 29 | 0) | 0;
  FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
  i64toi32_i32$2 = $1 + 72 | 0;
  i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $50 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 8 | 0;
  $9 = $50;
  HEAP8[i64toi32_i32$0 >> 0] = $9;
  HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $9 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $9 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $9 >>> 24 | 0;
  HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAPU8[($1 + 64 | 0) >> 0] | 0 | ((HEAPU8[($1 + 65 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 66 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 67 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[($1 + 68 | 0) >> 0] | 0 | ((HEAPU8[($1 + 69 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 70 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 71 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $53 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  $10 = $53;
  HEAP8[i64toi32_i32$1 >> 0] = $10;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $10 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $10 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $10 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  block4 : {
   $0 = HEAP32[($1 + 88 | 0) >> 2] | 0;
   if (!$0) {
    break block4
   }
   emscripten_builtin_free($0 | 0);
  }
  block5 : {
   if (!96) {
    break block5
   }
   wasm2js_memory_fill($1, 0, 96);
  }
 }
 
 function FLAC__MD5Transform($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $14 = 0, $17 = 0, $18 = 0, $19 = 0, $13 = 0, $12 = 0, $26 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $10 = 0, $83 = 0, $151 = 0, $219 = 0, $335 = 0, $338 = 0, $341 = 0, $546 = 0, $721 = 0, $724 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 48 | 0) >> 2] | 0;
  $5 = HEAP32[$1 >> 2] | 0;
  $6 = HEAP32[($1 + 36 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 52 | 0) >> 2] | 0;
  $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $10 = HEAP32[$0 >> 2] | 0;
  $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $12 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $14 = (__wasm_rotl_i32((($5 + $10 | 0) + ((($11 ^ $12 | 0) & $13 | 0) ^ $11 | 0) | 0) + -680876936 | 0 | 0, 7 | 0) | 0) + $13 | 0;
  $83 = $2 + $14 | 0;
  $15 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $16 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $17 = (__wasm_rotl_i32((($11 + $8 | 0) + (($14 & ($12 ^ $13 | 0) | 0) ^ $12 | 0) | 0) + -389564586 | 0 | 0, 12 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($12 + $16 | 0) + (($17 & ($14 ^ $13 | 0) | 0) ^ $13 | 0) | 0) + 606105819 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32((($13 + $15 | 0) + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1044525330 | 0 | 0, 22 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32(($83 + (($14 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -176418897 | 0 | 0, 7 | 0) | 0) + $14 | 0;
  $20 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $151 = $20 + $14 | 0;
  $21 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $17 = (__wasm_rotl_i32((($9 + $17 | 0) + (($19 & ($14 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + 1200080426 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $14 = (__wasm_rotl_i32((($21 + $18 | 0) + (($17 & ($19 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1473231341 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($151 + (($14 & ($17 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -45705983 | 0 | 0, 22 | 0) | 0) + $14 | 0;
  $19 = (__wasm_rotl_i32((($3 + $19 | 0) + (($18 & ($14 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + 1770035416 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $22 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  $23 = HEAP32[($1 + 40 | 0) >> 2] | 0;
  $219 = $23 + $14 | 0;
  $14 = (__wasm_rotl_i32((($6 + $17 | 0) + (($19 & ($18 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1958414417 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32(($219 + (($14 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -42063 | 0 | 0, 17 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($22 + $18 | 0) + (($17 & ($14 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -1990404162 | 0 | 0, 22 | 0) | 0) + $17 | 0;
  $19 = (__wasm_rotl_i32((($4 + $19 | 0) + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + 1804603682 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $24 = HEAP32[($1 + 60 | 0) >> 2] | 0;
  $25 = HEAP32[($1 + 56 | 0) >> 2] | 0;
  $26 = (__wasm_rotl_i32((($7 + $14 | 0) + (($19 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -40341101 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $1 = (__wasm_rotl_i32((($25 + $17 | 0) + (($26 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -1502002290 | 0 | 0, 17 | 0) | 0) + $26 | 0;
  $14 = (__wasm_rotl_i32((($24 + $18 | 0) + (($1 & ($26 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + 1236535329 | 0 | 0, 22 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($8 + $19 | 0) + ((($14 ^ $1 | 0) & $26 | 0) ^ $1 | 0) | 0) + -165796510 | 0 | 0, 5 | 0) | 0) + $14 | 0;
  $335 = $9 + $17 | 0;
  $338 = $5 + $14 | 0;
  $341 = $22 + $1 | 0;
  $1 = (__wasm_rotl_i32((($21 + $26 | 0) + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1069501632 | 0 | 0, 9 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32(($341 + ((($1 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 643717713 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($338 + ((($14 ^ $1 | 0) & $17 | 0) ^ $1 | 0) | 0) + -373897302 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($335 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -701558691 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($23 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 38016083 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32((($24 + $14 | 0) + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -660478335 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($2 + $17 | 0) + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + -405537848 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($6 + $18 | 0) + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + 568446438 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($25 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -1019803690 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32((($15 + $14 | 0) + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -187363961 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($3 + $17 | 0) + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + 1163531501 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($7 + $18 | 0) + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1444681467 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($16 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -51403784 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32((($20 + $14 | 0) + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + 1735328473 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $14 = $19 ^ $1 | 0;
  $546 = $14;
  $14 = (__wasm_rotl_i32((($4 + $17 | 0) + (($14 & $18 | 0) ^ $1 | 0) | 0) + -1926607734 | 0 | 0, 20 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32((($9 + $18 | 0) + ($546 ^ $14 | 0) | 0) + -378558 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $1 = (__wasm_rotl_i32((($3 + $1 | 0) + (($14 ^ $19 | 0) ^ $17 | 0) | 0) + -2022574463 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32((($22 + $19 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + 1839030562 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $14 = (__wasm_rotl_i32((($25 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -35309556 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32((($8 + $17 | 0) + (($18 ^ $1 | 0) ^ $14 | 0) | 0) + -1530992060 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $1 = (__wasm_rotl_i32((($2 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + 1272893353 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32((($20 + $18 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + -155497632 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $14 = (__wasm_rotl_i32((($23 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -1094730640 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32((($7 + $17 | 0) + (($18 ^ $1 | 0) ^ $14 | 0) | 0) + 681279174 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $1 = (__wasm_rotl_i32((($5 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -358537222 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32((($15 + $18 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + -722521979 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $14 = (__wasm_rotl_i32((($21 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + 76029189 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32((($6 + $17 | 0) + (($18 ^ $1 | 0) ^ $14 | 0) | 0) + -640364487 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $721 = $5 + $17 | 0;
  $724 = $16 + $14 | 0;
  $1 = (__wasm_rotl_i32((($4 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -421815835 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32((($24 + $18 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + 530742520 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($724 + (($1 ^ $17 | 0) ^ $14 | 0) | 0) + -995338651 | 0 | 0, 23 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($721 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -198630844 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($20 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + 1126891415 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32((($25 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1416354905 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($9 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -57434055 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($4 + $18 | 0) + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1700485571 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($15 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1894986606 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32((($23 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1051523 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($8 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -2054922799 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($3 + $18 | 0) + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1873313359 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $1 = (__wasm_rotl_i32((($24 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -30611744 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32((($21 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1560198380 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32((($7 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + 1309151649 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32((($2 + $18 | 0) + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -145523070 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  HEAP32[$0 >> 2] = $18 + $10 | 0;
  $1 = (__wasm_rotl_i32((($22 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1120210379 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $11 + $1 | 0;
  $14 = (__wasm_rotl_i32((($16 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + 718787259 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $12 + $14 | 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = ($14 + $13 | 0) + (__wasm_rotl_i32((($6 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -343485551 | 0 | 0, 21 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function FLAC__MD5Accumulate($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$2 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, i64toi32_i32$4 = 0, $12 = 0, $8 = 0, i64toi32_i32$3 = 0, $13 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $15$hi = 0, $17$hi = 0, $22$hi = 0, $27$hi = 0, $1531 = 0, $1536 = 0, $1541 = 0, $1546 = 0, $1551 = 0, $1556 = 0, $1561 = 0, $1566 = 0;
  $5 = 0;
  block : {
   i64toi32_i32$0 = 0;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($39) {
    break block
   }
   i64toi32_i32$1 = 0;
   $22$hi = i64toi32_i32$1;
   $6 = Math_imul($4, $2);
   i64toi32_i32$1 = 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($40) {
    break block
   }
   $7 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   block2 : {
    block1 : {
     $8 = Math_imul($6, $3);
     if ((HEAP32[($0 + 92 | 0) >> 2] | 0) >>> 0 < $8 >>> 0) {
      break block1
     }
     $5 = $7;
     break block2;
    }
    block4 : {
     block3 : {
      $5 = emscripten_builtin_realloc($7 | 0, $8 | 0) | 0;
      if (!$5) {
       break block3
      }
      HEAP32[($0 + 88 | 0) >> 2] = $5;
      break block4;
     }
     emscripten_builtin_free($7 | 0);
     $5 = emscripten_builtin_malloc($8 | 0) | 0;
     HEAP32[($0 + 88 | 0) >> 2] = $5;
     if ($5) {
      break block4
     }
     HEAP32[($0 + 92 | 0) >> 2] = 0;
     return 0 | 0;
    }
    HEAP32[($0 + 92 | 0) >> 2] = $8;
   }
   block26 : {
    block8 : {
     block29 : {
      block28 : {
       block31 : {
        block30 : {
         block35 : {
          block34 : {
           block37 : {
            block36 : {
             block6 : {
              block7 : {
               block9 : {
                block10 : {
                 block11 : {
                  block13 : {
                   block14 : {
                    block15 : {
                     block16 : {
                      block17 : {
                       block5 : {
                        $6 = Math_imul($4, 100) + $2 | 0;
                        if (($6 | 0) > (300 | 0)) {
                         break block5
                        }
                        block12 : {
                         switch ($6 + -101 | 0 | 0) {
                         case 5:
                          break block10;
                         case 7:
                          break block11;
                         case 0:
                          break block6;
                         case 1:
                          break block7;
                         case 2:
                         case 4:
                         case 6:
                          break block8;
                         case 3:
                          break block9;
                         default:
                          break block12;
                         };
                        }
                        switch ($6 + -201 | 0 | 0) {
                        case 0:
                         break block13;
                        case 1:
                         break block14;
                        case 3:
                         break block15;
                        case 5:
                         break block16;
                        case 7:
                         break block17;
                        default:
                         break block8;
                        };
                       }
                       block24 : {
                        block25 : {
                         block18 : {
                          switch ($6 + -401 | 0 | 0) {
                          default:
                           switch ($6 + -301 | 0 | 0) {
                           case 0:
                            break block24;
                           case 1:
                            break block25;
                           default:
                            break block8;
                           };
                          case 7:
                           if (!$3) {
                            break block26
                           }
                           $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
                           $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                           $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                           $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                           $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                           $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                           $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                           $13 = HEAP32[$1 >> 2] | 0;
                           $2 = 0;
                           label : while (1) {
                            $1 = $2 << 2 | 0;
                            HEAP32[$5 >> 2] = HEAP32[($13 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($12 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                            $5 = $5 + 32 | 0;
                            $2 = $2 + 1 | 0;
                            if (($2 | 0) != ($3 | 0)) {
                             continue label
                            }
                            break block26;
                           };
                          case 5:
                           if (!$3) {
                            break block26
                           }
                           $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                           $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                           $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                           $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                           $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                           $11 = HEAP32[$1 >> 2] | 0;
                           $2 = 0;
                           label1 : while (1) {
                            $1 = $2 << 2 | 0;
                            HEAP32[$5 >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                            HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                            $5 = $5 + 24 | 0;
                            $2 = $2 + 1 | 0;
                            if (($2 | 0) != ($3 | 0)) {
                             continue label1
                            }
                            break block26;
                           };
                          case 3:
                           if (!$3) {
                            break block26
                           }
                           $11 = $3 & 1 | 0;
                           $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                           $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                           $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                           $9 = HEAP32[$1 >> 2] | 0;
                           $2 = 0;
                           block27 : {
                            if (($3 | 0) == (1 | 0)) {
                             break block27
                            }
                            $10 = $3 & -2 | 0;
                            $2 = 0;
                            $3 = 0;
                            label2 : while (1) {
                             $1 = $2 << 2 | 0;
                             HEAP32[$5 >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                             $1 = $1 | 4 | 0;
                             HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                             HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                             $2 = $2 + 2 | 0;
                             $5 = $5 + 32 | 0;
                             $3 = $3 + 2 | 0;
                             if (($3 | 0) != ($10 | 0)) {
                              continue label2
                             }
                             break label2;
                            };
                           }
                           if (!$11) {
                            break block26
                           }
                           $1 = $2 << 2 | 0;
                           HEAP32[$5 >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                           HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                           HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                           HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                           break block26;
                          case 1:
                           if (!$3) {
                            break block26
                           }
                           $10 = $3 & 3 | 0;
                           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                           $4 = HEAP32[$1 >> 2] | 0;
                           $6 = 0;
                           if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                            break block28
                           }
                           $1 = 0;
                           break block29;
                          case 0:
                           break block18;
                          case 2:
                          case 4:
                          case 6:
                           break block8;
                          };
                         }
                         if (!$3) {
                          break block26
                         }
                         $7 = $3 & 3 | 0;
                         $4 = HEAP32[$1 >> 2] | 0;
                         $2 = 0;
                         if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                          break block30
                         }
                         $1 = 0;
                         break block31;
                        }
                        if (!$3) {
                         break block26
                        }
                        $2 = 0;
                        label3 : while (1) {
                         $6 = $2 << 2 | 0;
                         $4 = HEAP32[((HEAP32[$1 >> 2] | 0) + $6 | 0) >> 2] | 0;
                         HEAP8[$5 >> 0] = $4;
                         HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
                         HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
                         $4 = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
                         HEAP8[($5 + 3 | 0) >> 0] = $4;
                         HEAP8[($5 + 5 | 0) >> 0] = $4 >>> 16 | 0;
                         HEAP8[($5 + 4 | 0) >> 0] = $4 >>> 8 | 0;
                         $5 = $5 + 6 | 0;
                         $2 = $2 + 1 | 0;
                         if (($2 | 0) != ($3 | 0)) {
                          continue label3
                         }
                         break block26;
                        };
                       }
                       if (!$3) {
                        break block26
                       }
                       $9 = $3 & 1 | 0;
                       $2 = 0;
                       block32 : {
                        if (($3 | 0) == (1 | 0)) {
                         break block32
                        }
                        $7 = $3 & -2 | 0;
                        $2 = 0;
                        $4 = 0;
                        label4 : while (1) {
                         $6 = $2 << 2 | 0;
                         $3 = HEAP32[((HEAP32[$1 >> 2] | 0) + $6 | 0) >> 2] | 0;
                         HEAP8[$5 >> 0] = $3;
                         HEAP8[($5 + 2 | 0) >> 0] = $3 >>> 16 | 0;
                         HEAP8[($5 + 1 | 0) >> 0] = $3 >>> 8 | 0;
                         $3 = HEAP32[(((HEAP32[$1 >> 2] | 0) + $6 | 0) + 4 | 0) >> 2] | 0;
                         HEAP8[($5 + 3 | 0) >> 0] = $3;
                         HEAP8[($5 + 5 | 0) >> 0] = $3 >>> 16 | 0;
                         HEAP8[($5 + 4 | 0) >> 0] = $3 >>> 8 | 0;
                         $2 = $2 + 2 | 0;
                         $5 = $5 + 6 | 0;
                         $4 = $4 + 2 | 0;
                         if (($4 | 0) != ($7 | 0)) {
                          continue label4
                         }
                         break label4;
                        };
                       }
                       if (!$9) {
                        break block26
                       }
                       $1 = HEAP32[((HEAP32[$1 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
                       HEAP8[$5 >> 0] = $1;
                       HEAP8[($5 + 2 | 0) >> 0] = $1 >>> 16 | 0;
                       HEAP8[($5 + 1 | 0) >> 0] = $1 >>> 8 | 0;
                       break block26;
                      }
                      if (!$3) {
                       break block26
                      }
                      $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
                      $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                      $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                      $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                      $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                      $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                      $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                      $13 = HEAP32[$1 >> 2] | 0;
                      $2 = 0;
                      label5 : while (1) {
                       $1 = $2 << 2 | 0;
                       HEAP16[$5 >> 1] = HEAP32[($13 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($12 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                       HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                       $5 = $5 + 16 | 0;
                       $2 = $2 + 1 | 0;
                       if (($2 | 0) != ($3 | 0)) {
                        continue label5
                       }
                       break block26;
                      };
                     }
                     if (!$3) {
                      break block26
                     }
                     $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                     $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                     $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                     $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                     $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                     $11 = HEAP32[$1 >> 2] | 0;
                     $2 = 0;
                     label6 : while (1) {
                      $1 = $2 << 2 | 0;
                      HEAP16[$5 >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                      $5 = $5 + 12 | 0;
                      $2 = $2 + 1 | 0;
                      if (($2 | 0) != ($3 | 0)) {
                       continue label6
                      }
                      break block26;
                     };
                    }
                    if (!$3) {
                     break block26
                    }
                    $11 = $3 & 1 | 0;
                    $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                    $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                    $9 = HEAP32[$1 >> 2] | 0;
                    $2 = 0;
                    block33 : {
                     if (($3 | 0) == (1 | 0)) {
                      break block33
                     }
                     $10 = $3 & -2 | 0;
                     $2 = 0;
                     $3 = 0;
                     label7 : while (1) {
                      $1 = $2 << 2 | 0;
                      HEAP16[$5 >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                      $1 = $1 | 4 | 0;
                      HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                      HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                      $2 = $2 + 2 | 0;
                      $5 = $5 + 16 | 0;
                      $3 = $3 + 2 | 0;
                      if (($3 | 0) != ($10 | 0)) {
                       continue label7
                      }
                      break label7;
                     };
                    }
                    if (!$11) {
                     break block26
                    }
                    $1 = $2 << 2 | 0;
                    HEAP16[$5 >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                    HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                    break block26;
                   }
                   if (!$3) {
                    break block26
                   }
                   $10 = $3 & 3 | 0;
                   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                   $4 = HEAP32[$1 >> 2] | 0;
                   $6 = 0;
                   if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                    break block34
                   }
                   $1 = 0;
                   break block35;
                  }
                  if (!$3) {
                   break block26
                  }
                  $7 = $3 & 3 | 0;
                  $4 = HEAP32[$1 >> 2] | 0;
                  $2 = 0;
                  if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                   break block36
                  }
                  $1 = 0;
                  break block37;
                 }
                 if (!$3) {
                  break block26
                 }
                 $4 = 0;
                 label8 : while (1) {
                  $2 = $4 << 2 | 0;
                  HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 6 | 0) >> 0] = HEAP32[((HEAP32[($1 + 24 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  HEAP8[($5 + 7 | 0) >> 0] = HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                  $5 = $5 + 8 | 0;
                  $4 = $4 + 1 | 0;
                  if (($4 | 0) != ($3 | 0)) {
                   continue label8
                  }
                  break block26;
                 };
                }
                if (!$3) {
                 break block26
                }
                $4 = 0;
                label9 : while (1) {
                 $2 = $4 << 2 | 0;
                 HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                 HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                 HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                 HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                 HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                 HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                 $5 = $5 + 6 | 0;
                 $4 = $4 + 1 | 0;
                 if (($4 | 0) != ($3 | 0)) {
                  continue label9
                 }
                 break block26;
                };
               }
               if (!$3) {
                break block26
               }
               $4 = 0;
               label10 : while (1) {
                $2 = $4 << 2 | 0;
                HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                $5 = $5 + 4 | 0;
                $4 = $4 + 1 | 0;
                if (($4 | 0) != ($3 | 0)) {
                 continue label10
                }
                break block26;
               };
              }
              if (!$3) {
               break block26
              }
              $7 = $3 & 1 | 0;
              $2 = 0;
              block38 : {
               if (($3 | 0) == (1 | 0)) {
                break block38
               }
               $6 = $3 & -2 | 0;
               $2 = 0;
               $4 = 0;
               label11 : while (1) {
                $3 = $2 << 2 | 0;
                HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
                $3 = $3 | 4 | 0;
                HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
                $2 = $2 + 2 | 0;
                $5 = $5 + 4 | 0;
                $4 = $4 + 2 | 0;
                if (($4 | 0) != ($6 | 0)) {
                 continue label11
                }
                break label11;
               };
              }
              if (!$7) {
               break block26
              }
              $3 = $2 << 2 | 0;
              HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
              HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
              break block26;
             }
             if (!$3) {
              break block26
             }
             $7 = $3 & 3 | 0;
             $4 = 0;
             block40 : {
              block39 : {
               if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                break block39
               }
               $3 = 0;
               break block40;
              }
              $9 = $3 & -4 | 0;
              $3 = 0;
              $6 = 0;
              label12 : while (1) {
               $2 = $3 << 2 | 0;
               HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
               HEAP8[($5 + 1 | 0) >> 0] = HEAP32[(((HEAP32[$1 >> 2] | 0) + $2 | 0) + 4 | 0) >> 2] | 0;
               HEAP8[($5 + 2 | 0) >> 0] = HEAP32[(((HEAP32[$1 >> 2] | 0) + $2 | 0) + 8 | 0) >> 2] | 0;
               HEAP8[($5 + 3 | 0) >> 0] = HEAP32[(((HEAP32[$1 >> 2] | 0) + $2 | 0) + 12 | 0) >> 2] | 0;
               $3 = $3 + 4 | 0;
               $5 = $5 + 4 | 0;
               $6 = $6 + 4 | 0;
               if (($6 | 0) != ($9 | 0)) {
                continue label12
               }
               break label12;
              };
             }
             if (!$7) {
              break block26
             }
             label13 : while (1) {
              HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
              $3 = $3 + 1 | 0;
              $5 = $5 + 1 | 0;
              $4 = $4 + 1 | 0;
              if (($4 | 0) != ($7 | 0)) {
               continue label13
              }
              break block26;
             };
            }
            $9 = $3 & -4 | 0;
            $1 = 0;
            $6 = 0;
            label14 : while (1) {
             $3 = $4 + ($1 << 2 | 0) | 0;
             HEAP16[$5 >> 1] = HEAP32[$3 >> 2] | 0;
             HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($3 + 4 | 0) >> 2] | 0;
             HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($3 + 8 | 0) >> 2] | 0;
             HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($3 + 12 | 0) >> 2] | 0;
             $1 = $1 + 4 | 0;
             $5 = $5 + 8 | 0;
             $6 = $6 + 4 | 0;
             if (($6 | 0) != ($9 | 0)) {
              continue label14
             }
             break label14;
            };
           }
           if (!$7) {
            break block26
           }
           label15 : while (1) {
            HEAP16[$5 >> 1] = HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0;
            $1 = $1 + 1 | 0;
            $5 = $5 + 2 | 0;
            $2 = $2 + 1 | 0;
            if (($2 | 0) != ($7 | 0)) {
             continue label15
            }
            break block26;
           };
          }
          $11 = $3 & -4 | 0;
          $1 = 0;
          $7 = 0;
          label16 : while (1) {
           $3 = $1 << 2 | 0;
           HEAP16[$5 >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
           HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
           $9 = $3 | 4 | 0;
           HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($4 + $9 | 0) >> 2] | 0;
           HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($2 + $9 | 0) >> 2] | 0;
           $9 = $3 | 8 | 0;
           HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($4 + $9 | 0) >> 2] | 0;
           HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($2 + $9 | 0) >> 2] | 0;
           $3 = $3 | 12 | 0;
           HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
           HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
           $1 = $1 + 4 | 0;
           $5 = $5 + 16 | 0;
           $7 = $7 + 4 | 0;
           if (($7 | 0) != ($11 | 0)) {
            continue label16
           }
           break label16;
          };
         }
         if (!$10) {
          break block26
         }
         label17 : while (1) {
          $3 = $1 << 2 | 0;
          HEAP16[$5 >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
          HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
          $1 = $1 + 1 | 0;
          $5 = $5 + 4 | 0;
          $6 = $6 + 1 | 0;
          if (($6 | 0) != ($10 | 0)) {
           continue label17
          }
          break block26;
         };
        }
        $9 = $3 & -4 | 0;
        $1 = 0;
        $6 = 0;
        label18 : while (1) {
         $3 = $4 + ($1 << 2 | 0) | 0;
         HEAP32[$5 >> 2] = HEAP32[$3 >> 2] | 0;
         HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
         HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
         $1 = $1 + 4 | 0;
         $5 = $5 + 16 | 0;
         $6 = $6 + 4 | 0;
         if (($6 | 0) != ($9 | 0)) {
          continue label18
         }
         break label18;
        };
       }
       if (!$7) {
        break block26
       }
       label19 : while (1) {
        HEAP32[$5 >> 2] = HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0;
        $1 = $1 + 1 | 0;
        $5 = $5 + 4 | 0;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($7 | 0)) {
         continue label19
        }
        break block26;
       };
      }
      $11 = $3 & -4 | 0;
      $1 = 0;
      $7 = 0;
      label20 : while (1) {
       $3 = $1 << 2 | 0;
       HEAP32[$5 >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
       HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
       $9 = $3 | 4 | 0;
       HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + $9 | 0) >> 2] | 0;
       HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($2 + $9 | 0) >> 2] | 0;
       $9 = $3 | 8 | 0;
       HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($4 + $9 | 0) >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($2 + $9 | 0) >> 2] | 0;
       $3 = $3 | 12 | 0;
       HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
       HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
       $1 = $1 + 4 | 0;
       $5 = $5 + 32 | 0;
       $7 = $7 + 4 | 0;
       if (($7 | 0) != ($11 | 0)) {
        continue label20
       }
       break label20;
      };
     }
     if (!$10) {
      break block26
     }
     label21 : while (1) {
      $3 = $1 << 2 | 0;
      HEAP32[$5 >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
      HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
      $1 = $1 + 1 | 0;
      $5 = $5 + 8 | 0;
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($10 | 0)) {
       continue label21
      }
      break block26;
     };
    }
    block41 : {
     switch ($4 + -1 | 0 | 0) {
     case 3:
      if (!$2) {
       break block26
      }
      if (!$3) {
       break block26
      }
      $11 = $2 & -4 | 0;
      $10 = $2 & 3 | 0;
      $7 = 0;
      $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
      label24 : while (1) {
       $2 = 0;
       $9 = 0;
       block45 : {
        if ($12) {
         break block45
        }
        label22 : while (1) {
         $4 = $1 + ($2 << 2 | 0) | 0;
         $6 = $7 << 2 | 0;
         HEAP32[$5 >> 2] = HEAP32[((HEAP32[$4 >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 16 | 0;
         $9 = $9 + 4 | 0;
         if (($9 | 0) != ($11 | 0)) {
          continue label22
         }
         break label22;
        };
       }
       $4 = 0;
       block46 : {
        if (!$10) {
         break block46
        }
        label23 : while (1) {
         HEAP32[$5 >> 2] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
         $2 = $2 + 1 | 0;
         $5 = $5 + 4 | 0;
         $4 = $4 + 1 | 0;
         if (($4 | 0) != ($10 | 0)) {
          continue label23
         }
         break label23;
        };
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($3 | 0)) {
        continue label24
       }
       break block26;
      };
     case 2:
      if (!$2) {
       break block26
      }
      if (!$3) {
       break block26
      }
      $12 = $2 & -2 | 0;
      $13 = $2 & 1 | 0;
      $11 = 0;
      label26 : while (1) {
       $4 = 0;
       $7 = 0;
       block47 : {
        if (($2 | 0) == (1 | 0)) {
         break block47
        }
        label25 : while (1) {
         $9 = $1 + ($4 << 2 | 0) | 0;
         $10 = $11 << 2 | 0;
         $6 = HEAP32[((HEAP32[$9 >> 2] | 0) + $10 | 0) >> 2] | 0;
         HEAP8[$5 >> 0] = $6;
         HEAP8[($5 + 2 | 0) >> 0] = $6 >>> 16 | 0;
         HEAP8[($5 + 1 | 0) >> 0] = $6 >>> 8 | 0;
         $6 = HEAP32[((HEAP32[($9 + 4 | 0) >> 2] | 0) + $10 | 0) >> 2] | 0;
         HEAP8[($5 + 3 | 0) >> 0] = $6;
         HEAP8[($5 + 5 | 0) >> 0] = $6 >>> 16 | 0;
         HEAP8[($5 + 4 | 0) >> 0] = $6 >>> 8 | 0;
         $4 = $4 + 2 | 0;
         $5 = $5 + 6 | 0;
         $7 = $7 + 2 | 0;
         if (($7 | 0) != ($12 | 0)) {
          continue label25
         }
         break label25;
        };
       }
       block48 : {
        if (!$13) {
         break block48
        }
        $4 = HEAP32[((HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] | 0;
        HEAP8[$5 >> 0] = $4;
        HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
        HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
        $5 = $5 + 3 | 0;
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($3 | 0)) {
        continue label26
       }
       break block26;
      };
     case 1:
      if (!$2) {
       break block26
      }
      if (!$3) {
       break block26
      }
      $11 = $2 & -4 | 0;
      $10 = $2 & 3 | 0;
      $7 = 0;
      $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
      label29 : while (1) {
       $2 = 0;
       $9 = 0;
       block49 : {
        if ($12) {
         break block49
        }
        label27 : while (1) {
         $4 = $1 + ($2 << 2 | 0) | 0;
         $6 = $7 << 2 | 0;
         HEAP16[$5 >> 1] = HEAP32[((HEAP32[$4 >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 2 | 0) >> 1] = HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 4 | 0) >> 1] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 6 | 0) >> 1] = HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 8 | 0;
         $9 = $9 + 4 | 0;
         if (($9 | 0) != ($11 | 0)) {
          continue label27
         }
         break label27;
        };
       }
       $4 = 0;
       block50 : {
        if (!$10) {
         break block50
        }
        label28 : while (1) {
         HEAP16[$5 >> 1] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
         $2 = $2 + 1 | 0;
         $5 = $5 + 2 | 0;
         $4 = $4 + 1 | 0;
         if (($4 | 0) != ($10 | 0)) {
          continue label28
         }
         break label28;
        };
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($3 | 0)) {
        continue label29
       }
       break block26;
      };
     case 0:
      break block41;
     default:
      break block26;
     };
    }
    if (!$2) {
     break block26
    }
    if (!$3) {
     break block26
    }
    $11 = $2 & -4 | 0;
    $10 = $2 & 3 | 0;
    $7 = 0;
    $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
    label32 : while (1) {
     $2 = 0;
     $9 = 0;
     block51 : {
      if ($12) {
       break block51
      }
      label30 : while (1) {
       $4 = $1 + ($2 << 2 | 0) | 0;
       $6 = $7 << 2 | 0;
       HEAP8[$5 >> 0] = HEAP32[((HEAP32[$4 >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       $2 = $2 + 4 | 0;
       $5 = $5 + 4 | 0;
       $9 = $9 + 4 | 0;
       if (($9 | 0) != ($11 | 0)) {
        continue label30
       }
       break label30;
      };
     }
     $4 = 0;
     block52 : {
      if (!$10) {
       break block52
      }
      label31 : while (1) {
       HEAP8[$5 >> 0] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
       $2 = $2 + 1 | 0;
       $5 = $5 + 1 | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($10 | 0)) {
        continue label31
       }
       break label31;
      };
     }
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue label32
     }
     break label32;
    };
   }
   $5 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   $1 = $5 + $8 | 0;
   HEAP32[($0 + 80 | 0) >> 2] = $1;
   block53 : {
    if ($1 >>> 0 >= $5 >>> 0) {
     break block53
    }
    HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   }
   $2 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   $3 = $0 + 64 | 0;
   $4 = $3 + ($5 | -64 | 0) | 0;
   block55 : {
    block54 : {
     $1 = 64 - ($5 & 63 | 0) | 0;
     if ($8 >>> 0 >= $1 >>> 0) {
      break block54
     }
     if (!$8) {
      break block55
     }
     wasm2js_memory_copy($4, $2, $8);
     break block55;
    }
    block56 : {
     if (!$1) {
      break block56
     }
     wasm2js_memory_copy($4, $2, $1);
    }
    FLAC__MD5Transform($3 | 0, $0 | 0);
    $5 = $2 + $1 | 0;
    block57 : {
     $1 = $8 - $1 | 0;
     if ($1 >>> 0 < 64 >>> 0) {
      break block57
     }
     label33 : while (1) {
      i64toi32_i32$1 = $5;
      i64toi32_i32$2 = HEAPU8[$5 >> 0] | 0 | ((HEAPU8[($5 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[($5 + 4 | 0) >> 0] | 0 | ((HEAPU8[($5 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1531 = i64toi32_i32$2;
      i64toi32_i32$2 = $0;
      $31 = $1531;
      HEAP8[i64toi32_i32$2 >> 0] = $31;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $31 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $31 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $31 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 56 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1536 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 56 | 0;
      $32 = $1536;
      HEAP8[i64toi32_i32$0 >> 0] = $32;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $32 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $32 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $32 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 48 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1541 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 48 | 0;
      $33 = $1541;
      HEAP8[i64toi32_i32$2 >> 0] = $33;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $33 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $33 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $33 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 40 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1546 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 40 | 0;
      $34 = $1546;
      HEAP8[i64toi32_i32$0 >> 0] = $34;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $34 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $34 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $34 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 32 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1551 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 32 | 0;
      $35 = $1551;
      HEAP8[i64toi32_i32$2 >> 0] = $35;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $35 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $35 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $35 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 24 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1556 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 24 | 0;
      $36 = $1556;
      HEAP8[i64toi32_i32$0 >> 0] = $36;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $36 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $36 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $36 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 16 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1561 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 16 | 0;
      $37 = $1561;
      HEAP8[i64toi32_i32$2 >> 0] = $37;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $37 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $37 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $37 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 8 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1566 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 8 | 0;
      $38 = $1566;
      HEAP8[i64toi32_i32$0 >> 0] = $38;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $38 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $38 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $38 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      FLAC__MD5Transform($3 | 0, $0 | 0);
      $5 = $5 + 64 | 0;
      $1 = $1 + -64 | 0;
      if ($1 >>> 0 > 63 >>> 0) {
       continue label33
      }
      break label33;
     };
    }
    if (!$1) {
     break block55
    }
    wasm2js_memory_copy($0, $5, $1);
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = 0;
  $5 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($5 | 0) != (0 | 0)) | 0;
  $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $5;
  HEAP32[($3 + 24 | 0) >> 2] = $6;
  $5 = 32;
  block2 : {
   block1 : {
    block : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
      break block
     }
     $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($5 | 0) > (0 | 0)) {
      break block1
     }
     $5 = $5 ? 32 : 16;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | $5 | 0;
    break block2;
   }
   $4 = $5;
   $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if ($5 >>> 0 <= $6 >>> 0) {
    break block2
   }
   $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $4 + ($5 - $6 | 0) | 0;
   block3 : {
    if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
     break block3
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[(($1 + $2 | 0) + -1 | 0) >> 0] = HEAPU8[$4 >> 0] | 0;
   }
   $4 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0;
  block : {
   if ($0) {
    break block
   }
   $1 = 0;
   block1 : {
    if (!(HEAP32[(0 + 84424 | 0) >> 2] | 0)) {
     break block1
    }
    $1 = fflush(HEAP32[(0 + 84424 | 0) >> 2] | 0 | 0) | 0;
   }
   block2 : {
    if (!(HEAP32[(0 + 84120 | 0) >> 2] | 0)) {
     break block2
    }
    $1 = fflush(HEAP32[(0 + 84120 | 0) >> 2] | 0 | 0) | 0 | $1 | 0;
   }
   block3 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break block3
    }
    label : while (1) {
     block5 : {
      block4 : {
       if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break block4
       }
       $2 = 1;
       break block5;
      }
      $2 = !(__lockfile($0 | 0) | 0);
     }
     block6 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
       break block6
      }
      $1 = fflush($0 | 0) | 0 | $1 | 0;
     }
     block7 : {
      if ($2) {
       break block7
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label
     }
     break label;
    };
   }
   __ofl_unlock();
   return $1 | 0;
  }
  block9 : {
   block8 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block8
    }
    $2 = 1;
    break block9;
   }
   $2 = !(__lockfile($0 | 0) | 0);
  }
  block12 : {
   block11 : {
    block10 : {
     if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
      break block10
     }
     FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break block10
     }
     $1 = -1;
     if (!$2) {
      break block11
     }
     break block12;
    }
    block13 : {
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($1 | 0) == ($3 | 0)) {
      break block13
     }
     i64toi32_i32$1 = $1 - $3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1 = 0;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    if ($2) {
     break block12
    }
   }
   __unlockfile($0 | 0);
  }
  return $1 | 0;
 }
 
 function dummy_122($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $1 = 0, $5 = 0, $4 = 0, $2 = 0, $3 = 0;
  block1 : {
   block : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $1 = 1;
    break block1;
   }
   $1 = !(__lockfile($0 | 0) | 0);
  }
  $2 = fflush($0 | 0) | 0;
  $3 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0 | 0]($0) | 0;
  block2 : {
   if ($1) {
    break block2
   }
   __unlockfile($0 | 0);
  }
  block3 : {
   if ((HEAPU8[$0 >> 0] | 0) & 1 | 0) {
    break block3
   }
   dummy_122($0 | 0);
   $4 = __ofl_lock() | 0;
   $1 = HEAP32[($0 + 56 | 0) >> 2] | 0;
   block4 : {
    $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$5) {
     break block4
    }
    HEAP32[($5 + 56 | 0) >> 2] = $1;
   }
   block5 : {
    if (!$1) {
     break block5
    }
    HEAP32[($1 + 52 | 0) >> 2] = $5;
   }
   block6 : {
    if ((HEAP32[$4 >> 2] | 0 | 0) != ($0 | 0)) {
     break block6
    }
    HEAP32[$4 >> 2] = $1;
   }
   __ofl_unlock();
   emscripten_builtin_free(HEAP32[($0 + 96 | 0) >> 2] | 0 | 0);
   emscripten_builtin_free($0 | 0);
  }
  return $3 | $2 | 0 | 0;
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  block2 : {
   block1 : {
    block : {
     if ($2 >>> 0 < 4 >>> 0) {
      break block
     }
     if (($1 | $0 | 0) & 3 | 0) {
      break block1
     }
     label : while (1) {
      if ((HEAP32[$0 >> 2] | 0 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
       break block1
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label
      }
      break label;
     };
    }
    if (!$2) {
     break block2
    }
   }
   block3 : {
    label1 : while (1) {
     $3 = HEAPU8[$0 >> 0] | 0;
     $4 = HEAPU8[$1 >> 0] | 0;
     if (($3 | 0) != ($4 | 0)) {
      break block3
     }
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if (!$2) {
      break block2
     }
     continue label1;
    };
   }
   return $3 - $4 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function FLAC__cpu_info($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function round($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3 = 0.0, $1 = 0, $12 = 0, $2 = 0, $13 = 0, $14 = 0, $15 = 0, $1$hi = 0, $39 = 0.0, $40 = 0.0;
  block : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $12 & 2047 | 0;
   if ($2 >>> 0 > 1074 >>> 0) {
    break block
   }
   block1 : {
    if ($2 >>> 0 > 1021 >>> 0) {
     break block1
    }
    return +($0 * 0.0);
   }
   block3 : {
    block2 : {
     $0 = Math_abs($0);
     $3 = $0 + 4503599627370496.0 + -4503599627370496.0 - $0;
     if (!($3 > .5)) {
      break block2
     }
     $0 = $0 + $3 + -1.0;
     break block3;
    }
    $0 = $0 + $3;
    if (!($3 <= -.5)) {
     break block3
    }
    $0 = $0 + 1.0;
   }
   $39 = -$0;
   $40 = $0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
    $13 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $14 = 0
     } else {
      $14 = 1
     }
     $15 = $14;
    } else {
     $15 = 0
    }
    $13 = $15;
   }
   $0 = $13 ? $39 : $40;
  }
  return +$0;
 }
 
 function lround($0) {
  $0 = +$0;
  var $1 = 0.0, $9 = 0;
  $1 = +round(+$0);
  if (Math_abs($1) < 2147483647.0) {
   $9 = ~~$1
  } else {
   $9 = -2147483648
  }
  return $9 | 0;
 }
 
 function __math_divzero($0) {
  $0 = $0 | 0;
  return +(+fp_barrier(+($0 ? -1.0 : 1.0)) / 0.0);
 }
 
 function fp_barrier($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3]);
 }
 
 function __math_invalid($0) {
  $0 = +$0;
  $0 = $0 - $0;
  return +($0 / $0);
 }
 
 function log($0) {
  $0 = +$0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $3 = 0.0, $1 = 0, $7 = 0.0, $8 = 0.0, $2 = 0, $2$hi = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $9 = 0, $9$hi = 0, $22 = 0, $23 = 0, $127 = 0.0, $140 = 0.0, $143 = 0, $143$hi = 0;
  $1 = top16(+$0) | 0;
  block : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = -1072562176;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 198911;
   i64toi32_i32$3 = -1;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break block
   }
   block1 : {
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$5 = 1072693248;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break block1
    }
    return +(0.0);
   }
   $0 = $0 + -1.0;
   $3 = $0 * 134217728.0;
   $3 = $0 + $3 - $3;
   $4 = +HEAPF64[(0 + 72408 | 0) >> 3];
   $5 = $3 * $3 * $4;
   $6 = $0 + $5;
   $7 = $0 * $0;
   $8 = $0 * $7;
   return +($6 + ($8 * ($8 * ($8 * ($8 * +HEAPF64[(0 + 72488 | 0) >> 3] + ($7 * +HEAPF64[(0 + 72480 | 0) >> 3] + ($0 * +HEAPF64[(0 + 72472 | 0) >> 3] + +HEAPF64[(0 + 72464 | 0) >> 3]))) + ($7 * +HEAPF64[(0 + 72456 | 0) >> 3] + ($0 * +HEAPF64[(0 + 72448 | 0) >> 3] + +HEAPF64[(0 + 72440 | 0) >> 3]))) + ($7 * +HEAPF64[(0 + 72432 | 0) >> 3] + ($0 * +HEAPF64[(0 + 72424 | 0) >> 3] + +HEAPF64[(0 + 72416 | 0) >> 3]))) + (($0 - $3) * $4 * ($0 + $3) + ($5 + ($0 - $6)))));
  }
  block4 : {
   block2 : {
    if (($1 + -32752 | 0) >>> 0 > -32737 >>> 0) {
     break block2
    }
    block3 : {
     if ($0 != 0.0) {
      break block3
     }
     return +(+__math_divzero(1 | 0));
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = 2146435072;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0) {
     break block4
    }
    block6 : {
     block5 : {
      if ($1 >>> 0 > 32767 >>> 0) {
       break block5
      }
      if (($1 & 32752 | 0 | 0) != (32752 | 0)) {
       break block6
      }
     }
     return +(+__math_invalid(+$0));
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -54525952;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $2 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = -1072037888;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $9 = i64toi32_i32$3;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 52;
   i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $22 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    $22 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
   }
   $7 = +($22 | 0);
   $127 = $7 * +HEAPF64[(0 + 72352 | 0) >> 3];
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 45;
   i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $23 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    $23 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
   }
   $1 = ($23 & 127 | 0) << 4 | 0;
   $8 = $127 + +HEAPF64[($1 + 72504 | 0) >> 3];
   $140 = +HEAPF64[($1 + 72496 | 0) >> 3];
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$1 = -1048576;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $143 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $143$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $2;
   i64toi32_i32$2 = $143$hi;
   i64toi32_i32$0 = $143;
   i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   i64toi32_i32$3 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
   $0 = $140 * (+wasm2js_scratch_load_f64() - +HEAPF64[($1 + 74544 | 0) >> 3] - +HEAPF64[($1 + 74552 | 0) >> 3]);
   $4 = $8 + $0;
   $3 = $0 * $0;
   $0 = $4 + ($0 * $3 * ($3 * ($0 * +HEAPF64[(0 + 72400 | 0) >> 3] + +HEAPF64[(0 + 72392 | 0) >> 3]) + ($0 * +HEAPF64[(0 + 72384 | 0) >> 3] + +HEAPF64[(0 + 72376 | 0) >> 3])) + ($3 * +HEAPF64[(0 + 72368 | 0) >> 3] + ($7 * +HEAPF64[(0 + 72360 | 0) >> 3] + ($0 + ($8 - $4)))));
  }
  return +$0;
 }
 
 function top16($0) {
  $0 = +$0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6 | 0;
 }
 
 function FLAC__lpc_window_data($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $7 = 0, $4 = 0, $6 = 0;
  block : {
   if (!$3) {
    break block
   }
   $4 = $3 & 1 | 0;
   $5 = 0;
   block1 : {
    if (($3 | 0) == (1 | 0)) {
     break block1
    }
    $6 = $3 & -2 | 0;
    $5 = 0;
    $7 = 0;
    label : while (1) {
     $3 = $5 << 2 | 0;
     HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
     $3 = $3 | 4 | 0;
     HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
     $5 = $5 + 2 | 0;
     $7 = $7 + 2 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$4) {
    break block
   }
   $3 = $5 << 2 | 0;
   HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
  }
 }
 
 function FLAC__lpc_compute_autocorrelation($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $12 = 0, $13 = 0, $4 = 0, $9 = 0, $14 = 0, $10 = Math_fround(0), $11 = 0, $7 = 0, $6 = 0, $8 = 0;
  block4 : {
   block : {
    if (!$2) {
     break block
    }
    $4 = 0;
    block1 : {
     $5 = $2 << 2 | 0;
     if (!$5) {
      break block1
     }
     wasm2js_memory_fill($3, 0, $5);
    }
    $6 = $1 - $2 | 0;
    $7 = $2 & -2 | 0;
    $8 = $2 & 1 | 0;
    label1 : while (1) {
     $9 = $0 + ($4 << 2 | 0) | 0;
     $10 = Math_fround(HEAPF32[$9 >> 2]);
     $5 = 0;
     $11 = 0;
     block2 : {
      if (($2 | 0) == (1 | 0)) {
       break block2
      }
      label : while (1) {
       $12 = $5 << 2 | 0;
       $13 = $3 + $12 | 0;
       HEAPF32[$13 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $12 | 0) >> 2])) + Math_fround(HEAPF32[$13 >> 2]));
       $12 = $12 | 4 | 0;
       $13 = $3 + $12 | 0;
       HEAPF32[$13 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $12 | 0) >> 2])) + Math_fround(HEAPF32[$13 >> 2]));
       $5 = $5 + 2 | 0;
       $11 = $11 + 2 | 0;
       if (($11 | 0) != ($7 | 0)) {
        continue label
       }
       break label;
      };
     }
     block3 : {
      if (!$8) {
       break block3
      }
      $5 = $5 << 2 | 0;
      $12 = $3 + $5 | 0;
      HEAPF32[$12 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $5 | 0) >> 2])) + Math_fround(HEAPF32[$12 >> 2]));
     }
     $5 = $4 >>> 0 < $6 >>> 0;
     $14 = $4 + 1 | 0;
     $4 = $14;
     if ($5) {
      continue label1
     }
     break block4;
    };
   }
   $5 = $1 + 1 | 0;
   $14 = $5 >>> 0 > 1 >>> 0 ? $5 : 1;
  }
  block5 : {
   if ($1 >>> 0 <= $14 >>> 0) {
    break block5
   }
   $4 = $1 - $14 | 0;
   label3 : while (1) {
    $12 = $4 >>> 0 > 1 >>> 0 ? $4 : 1;
    $2 = $12 & 1 | 0;
    $9 = $0 + ($14 << 2 | 0) | 0;
    $10 = Math_fround(HEAPF32[$9 >> 2]);
    $5 = 0;
    block6 : {
     if ($4 >>> 0 < 2 >>> 0) {
      break block6
     }
     $7 = $12 & -2 | 0;
     $5 = 0;
     $11 = 0;
     label2 : while (1) {
      $12 = $5 << 2 | 0;
      $13 = $3 + $12 | 0;
      HEAPF32[$13 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $12 | 0) >> 2])) + Math_fround(HEAPF32[$13 >> 2]));
      $12 = $12 | 4 | 0;
      $13 = $3 + $12 | 0;
      HEAPF32[$13 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $12 | 0) >> 2])) + Math_fround(HEAPF32[$13 >> 2]));
      $5 = $5 + 2 | 0;
      $11 = $11 + 2 | 0;
      if (($11 | 0) != ($7 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    block7 : {
     if (!$2) {
      break block7
     }
     $5 = $5 << 2 | 0;
     $12 = $3 + $5 | 0;
     HEAPF32[$12 >> 2] = Math_fround(Math_fround($10 * Math_fround(HEAPF32[($9 + $5 | 0) >> 2])) + Math_fround(HEAPF32[$12 >> 2]));
    }
    $4 = $4 + -1 | 0;
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($1 | 0)) {
     continue label3
    }
    break label3;
   };
  }
 }
 
 function FLAC__lpc_compute_lp_coefficients($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, $9 = 0.0, $7 = 0, $13 = 0, $4 = 0, $11 = 0, $14 = 0, $18 = 0.0, $12 = 0, $16 = 0, $6 = 0.0, $8 = 0, $15 = 0, $5 = 0, $17 = 0;
  $4 = __stack_pointer - 256 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$1 >> 2] | 0;
  $6 = +Math_fround(HEAPF32[$0 >> 2]);
  $7 = 0;
  block : {
   label4 : while (1) {
    if (($7 | 0) == ($5 | 0)) {
     break block
    }
    $8 = $7 + 1 | 0;
    $9 = +Math_fround(-Math_fround(HEAPF32[($0 + ($8 << 2 | 0) | 0) >> 2]));
    block7 : {
     block1 : {
      if (!$7) {
       break block1
      }
      $10 = 0;
      block2 : {
       $11 = ($7 | 0) == (1 | 0);
       if ($11) {
        break block2
       }
       $12 = $7 & -2 | 0;
       $10 = 0;
       $13 = 0;
       label : while (1) {
        $14 = $10 | 1 | 0;
        $9 = $9 - +HEAPF64[($4 + ($10 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $10 | 0) << 2 | 0) | 0) >> 2]) - +HEAPF64[($4 + ($14 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $14 | 0) << 2 | 0) | 0) >> 2]);
        $10 = $10 + 2 | 0;
        $13 = $13 + 2 | 0;
        if (($13 | 0) != ($12 | 0)) {
         continue label
        }
        break label;
       };
      }
      block3 : {
       $15 = $7 & 1 | 0;
       if (!$15) {
        break block3
       }
       $9 = $9 - +HEAPF64[($4 + ($10 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $10 | 0) << 2 | 0) | 0) >> 2]);
      }
      $9 = $9 / $6;
      HEAPF64[($4 + ($7 << 3 | 0) | 0) >> 3] = $9;
      $16 = 0;
      block4 : {
       if ($11) {
        break block4
       }
       $10 = $7 >>> 1 | 0;
       $16 = $10 >>> 0 > 1 >>> 0 ? $10 : 1;
       $17 = $16 & 1 | 0;
       $10 = 0;
       block5 : {
        if ($7 >>> 0 < 4 >>> 0) {
         break block5
        }
        $11 = $16 & 2147483646 | 0;
        $10 = 0;
        $12 = 0;
        label1 : while (1) {
         $13 = $4 + ($10 << 3 | 0) | 0;
         $14 = $4 + (($7 + ($10 ^ -1 | 0) | 0) << 3 | 0) | 0;
         $18 = +HEAPF64[$13 >> 3];
         HEAPF64[$13 >> 3] = $9 * +HEAPF64[$14 >> 3] + $18;
         HEAPF64[$14 >> 3] = $9 * $18 + +HEAPF64[$14 >> 3];
         $14 = $13 + 8 | 0;
         $13 = $4 + (($7 + ($10 ^ 536870910 | 0) | 0) << 3 | 0) | 0;
         $18 = +HEAPF64[$14 >> 3];
         HEAPF64[$14 >> 3] = $9 * +HEAPF64[$13 >> 3] + $18;
         HEAPF64[$13 >> 3] = $9 * $18 + +HEAPF64[$13 >> 3];
         $10 = $10 + 2 | 0;
         $12 = $12 + 2 | 0;
         if (($12 | 0) != ($11 | 0)) {
          continue label1
         }
         break label1;
        };
       }
       block6 : {
        if (!$17) {
         break block6
        }
        $13 = $4 + ($10 << 3 | 0) | 0;
        $10 = $4 + (($7 + ($10 ^ -1 | 0) | 0) << 3 | 0) | 0;
        $18 = +HEAPF64[$13 >> 3];
        HEAPF64[$13 >> 3] = $9 * +HEAPF64[$10 >> 3] + $18;
        HEAPF64[$10 >> 3] = $9 * $18 + +HEAPF64[$10 >> 3];
       }
       if (!$15) {
        break block7
       }
      }
      $10 = $4 + ($16 << 3 | 0) | 0;
      $18 = +HEAPF64[$10 >> 3];
      HEAPF64[$10 >> 3] = $18 * $9 + $18;
      break block7;
     }
     $9 = $9 / $6;
     HEAPF64[($4 + ($7 << 3 | 0) | 0) >> 3] = $9;
    }
    $16 = $8 & 3 | 0;
    $9 = $9 * $9;
    $14 = 0;
    $10 = 0;
    block8 : {
     if ($7 >>> 0 < 3 >>> 0) {
      break block8
     }
     $15 = $8 & -4 | 0;
     $10 = 0;
     $12 = 0;
     label2 : while (1) {
      $13 = $2 + ($7 << 7 | 0) | 0;
      HEAPF32[($13 + ($10 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($10 << 3 | 0) | 0) >> 3]));
      $11 = $10 | 1 | 0;
      HEAPF32[($13 + ($11 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3]));
      $11 = $10 | 2 | 0;
      HEAPF32[($13 + ($11 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3]));
      $11 = $10 | 3 | 0;
      HEAPF32[($13 + ($11 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3]));
      $10 = $10 + 4 | 0;
      $12 = $12 + 4 | 0;
      if (($12 | 0) != ($15 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    $9 = 1.0 - $9;
    block9 : {
     if (!$16) {
      break block9
     }
     label3 : while (1) {
      HEAPF32[(($2 + ($7 << 7 | 0) | 0) + ($10 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($10 << 3 | 0) | 0) >> 3]));
      $10 = $10 + 1 | 0;
      $14 = $14 + 1 | 0;
      if (($14 | 0) != ($16 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    $6 = $6 * $9;
    HEAPF64[($3 + ($7 << 3 | 0) | 0) >> 3] = $6;
    $7 = $8;
    if ($6 != 0.0) {
     continue label4
    }
    break label4;
   };
   HEAP32[$1 >> 2] = $7;
  }
  __stack_pointer = $4 + 256 | 0;
 }
 
 function FLAC__lpc_quantize_coefficients($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0, $8 = 0.0, $9 = 0, $11 = 0, $6 = 0, $7 = 0, $13 = 0.0, $5 = 0, $10 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $145 = 0, $17 = Math_fround(0), $189 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = 2;
  block : {
   if (!$1) {
    break block
   }
   $7 = $1 & 3 | 0;
   block2 : {
    block1 : {
     if ($1 >>> 0 >= 4 >>> 0) {
      break block1
     }
     $8 = 0.0;
     $9 = 0;
     break block2;
    }
    $10 = $1 & -4 | 0;
    $8 = 0.0;
    $9 = 0;
    $11 = 0;
    label : while (1) {
     $12 = $0 + ($9 << 2 | 0) | 0;
     $13 = +Math_fround(Math_abs(Math_fround(HEAPF32[($12 + 12 | 0) >> 2])));
     $14 = +Math_fround(Math_abs(Math_fround(HEAPF32[($12 + 8 | 0) >> 2])));
     $15 = +Math_fround(Math_abs(Math_fround(HEAPF32[($12 + 4 | 0) >> 2])));
     $16 = +Math_fround(Math_abs(Math_fround(HEAPF32[$12 >> 2])));
     $8 = $8 < $16 ? $16 : $8;
     $8 = $8 < $15 ? $15 : $8;
     $8 = $8 < $14 ? $14 : $8;
     $8 = $8 < $13 ? $13 : $8;
     $9 = $9 + 4 | 0;
     $11 = $11 + 4 | 0;
     if (($11 | 0) != ($10 | 0)) {
      continue label
     }
     break label;
    };
   }
   block3 : {
    if (!$7) {
     break block3
    }
    $12 = 0;
    label1 : while (1) {
     $13 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($9 << 2 | 0) | 0) >> 2])));
     $8 = $8 < $13 ? $13 : $8;
     $9 = $9 + 1 | 0;
     $12 = $12 + 1 | 0;
     if (($12 | 0) != ($7 | 0)) {
      continue label1
     }
     break label1;
    };
   }
   if ($8 <= 0.0) {
    break block
   }
   $7 = 1 << ($2 + -1 | 0) | 0;
   $10 = $7 + -1 | 0;
   $11 = 0 - $7 | 0;
   +frexp(+$8, $5 + 12 | 0 | 0);
   $12 = $2 + ((HEAP32[($5 + 12 | 0) >> 2] | 0) ^ -1 | 0) | 0;
   HEAP32[$4 >> 2] = $12;
   block6 : {
    block5 : {
     block4 : {
      $9 = -1 << ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN >> 2] | 0) + -1 | 0) | 0;
      $6 = $9 ^ -1 | 0;
      if (($12 | 0) <= ($6 | 0)) {
       break block4
      }
      HEAP32[$4 >> 2] = $6;
      break block5;
     }
     $6 = 1;
     if (($12 | 0) < ($9 | 0)) {
      break block
     }
     $9 = 0;
     if (($12 | 0) < (0 | 0)) {
      break block6
     }
    }
    $6 = 0;
    $8 = 0.0;
    $9 = 0;
    label2 : while (1) {
     $12 = $9 << 2 | 0;
     $145 = $3 + $12 | 0;
     $8 = $8 + +Math_fround(Math_fround(HEAPF32[($0 + $12 | 0) >> 2]) * Math_fround(1 << (HEAP32[$4 >> 2] | 0) | 0 | 0));
     $12 = lround(+$8) | 0;
     $12 = ($12 | 0) < ($7 | 0) ? (($12 | 0) > ($11 | 0) ? $12 : $11) : $10;
     HEAP32[$145 >> 2] = $12;
     $8 = $8 - +($12 | 0);
     $9 = $9 + 1 | 0;
     if (($9 | 0) != ($1 | 0)) {
      continue label2
     }
     break block;
    };
   }
   $17 = Math_fround(1 << (0 - $12 | 0) | 0 | 0);
   $8 = 0.0;
   label3 : while (1) {
    $12 = $9 << 2 | 0;
    $189 = $3 + $12 | 0;
    $8 = $8 + +Math_fround(Math_fround(HEAPF32[($0 + $12 | 0) >> 2]) / $17);
    $12 = lround(+$8) | 0;
    $12 = ($12 | 0) < ($7 | 0) ? (($12 | 0) > ($11 | 0) ? $12 : $11) : $10;
    HEAP32[$189 >> 2] = $12;
    $8 = $8 - +($12 | 0);
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($1 | 0)) {
     continue label3
    }
    break label3;
   };
   $6 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $25 = 0, $45 = 0, $44 = 0, $43 = 0, $42 = 0, $41 = 0, $40 = 0, $39 = 0, $38 = 0, $37 = 0, $36 = 0, $35 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $427 = 0, $536 = 0, $647 = 0, $740 = 0, $839 = 0, $916 = 0, $995 = 0, $1056 = 0, $1121 = 0, $1166 = 0, $1262 = 0, $1346 = 0;
  block1 : {
   block : {
    if ($3 >>> 0 < 13 >>> 0) {
     break block
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $6 = $0 + -56 | 0;
    $7 = $0 + -60 | 0;
    $8 = $0 + -64 | 0;
    $9 = $0 + -68 | 0;
    $10 = $0 + -72 | 0;
    $11 = $0 + -76 | 0;
    $12 = $0 + -80 | 0;
    $13 = $0 + -84 | 0;
    $14 = $0 + -88 | 0;
    $15 = $0 + -92 | 0;
    $16 = $0 + -96 | 0;
    $17 = $0 + -100 | 0;
    $18 = $0 + -104 | 0;
    $19 = $0 + -108 | 0;
    $20 = $0 + -112 | 0;
    $21 = $0 + -116 | 0;
    $22 = $0 + -120 | 0;
    $23 = $0 + -124 | 0;
    $24 = $0 + -128 | 0;
    $25 = 0;
    $26 = $3 + -13 | 0;
    label : while (1) {
     $27 = 0;
     $28 = 0;
     $29 = 0;
     $30 = 0;
     $31 = 0;
     $32 = 0;
     $33 = 0;
     $34 = 0;
     $35 = 0;
     $36 = 0;
     $37 = 0;
     $38 = 0;
     $39 = 0;
     $40 = 0;
     $41 = 0;
     $42 = 0;
     $43 = 0;
     $44 = 0;
     $45 = 0;
     $3 = 0;
     block22 : {
      switch ($26 | 0) {
      case 19:
       $27 = Math_imul(HEAP32[($24 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
      case 18:
       $28 = Math_imul(HEAP32[($23 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $27 | 0;
      case 17:
       $29 = Math_imul(HEAP32[($22 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $28 | 0;
      case 16:
       $30 = Math_imul(HEAP32[($21 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $29 | 0;
      case 15:
       $31 = Math_imul(HEAP32[($20 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $30 | 0;
      case 14:
       $32 = Math_imul(HEAP32[($19 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $31 | 0;
      case 13:
       $33 = Math_imul(HEAP32[($18 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $32 | 0;
      case 12:
       $34 = Math_imul(HEAP32[($17 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $33 | 0;
      case 11:
       $35 = Math_imul(HEAP32[($16 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $34 | 0;
      case 10:
       $36 = Math_imul(HEAP32[($15 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $35 | 0;
      case 9:
       $37 = Math_imul(HEAP32[($14 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $36 | 0;
      case 8:
       $38 = Math_imul(HEAP32[($13 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $37 | 0;
      case 7:
       $39 = Math_imul(HEAP32[($12 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $38 | 0;
      case 6:
       $40 = Math_imul(HEAP32[($11 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $39 | 0;
      case 5:
       $41 = Math_imul(HEAP32[($10 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $40 | 0;
      case 4:
       $42 = Math_imul(HEAP32[($9 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $41 | 0;
      case 3:
       $43 = Math_imul(HEAP32[($8 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $42 | 0;
      case 2:
       $44 = Math_imul(HEAP32[($7 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $43 | 0;
      case 1:
       $45 = Math_imul(HEAP32[($6 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $44 | 0;
      case 0:
       $3 = $0 + ($25 << 2 | 0) | 0;
       $3 = ((((((((((((Math_imul(HEAP32[($3 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $45 | 0) + Math_imul(HEAP32[($3 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
       break;
      default:
       break block22;
      };
     }
     $45 = $25 << 2 | 0;
     HEAP32[($5 + $45 | 0) >> 2] = (HEAP32[($0 + $45 | 0) >> 2] | 0) - ($3 >> $4 | 0) | 0;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   block23 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break block23
    }
    block24 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break block24
     }
     block25 : {
      if (($3 | 0) == (12 | 0)) {
       break block25
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[$2 >> 2] | 0;
      $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $39 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $38 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $37 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $36 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $25 = 0;
      label1 : while (1) {
       $2 = $25 << 2 | 0;
       $427 = $5 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$427 >> 2] = (HEAP32[$2 >> 2] | 0) - (((((((((((Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $37) + Math_imul(HEAP32[($2 + -44 | 0) >> 2] | 0, $36) | 0) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
       $25 = $25 + 1 | 0;
       if (($25 | 0) != ($1 | 0)) {
        continue label1
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[$2 >> 2] | 0;
     $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $38 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $37 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $36 = HEAP32[($2 + 40 | 0) >> 2] | 0;
     $35 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     $25 = 0;
     label2 : while (1) {
      $2 = $25 << 2 | 0;
      $536 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$536 >> 2] = (HEAP32[$2 >> 2] | 0) - ((((((((((((Math_imul(HEAP32[($2 + -44 | 0) >> 2] | 0, $36) + Math_imul(HEAP32[($2 + -48 | 0) >> 2] | 0, $35) | 0) + Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label2
      }
      break block1;
     };
    }
    block26 : {
     if (($3 | 0) == (10 | 0)) {
      break block26
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[$2 >> 2] | 0;
     $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $38 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $25 = 0;
     label3 : while (1) {
      $2 = $25 << 2 | 0;
      $647 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$647 >> 2] = (HEAP32[$2 >> 2] | 0) - (((((((((Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $39) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label3
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[$2 >> 2] | 0;
    $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    $39 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $38 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $37 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $25 = 0;
    label4 : while (1) {
     $2 = $25 << 2 | 0;
     $740 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     HEAP32[$740 >> 2] = (HEAP32[$2 >> 2] | 0) - ((((((((((Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $38) + Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label4
     }
     break block1;
    };
   }
   block27 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break block27
    }
    block28 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break block28
     }
     block29 : {
      if (($3 | 0) == (8 | 0)) {
       break block29
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[$2 >> 2] | 0;
      $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $25 = 0;
      label5 : while (1) {
       $2 = $25 << 2 | 0;
       $839 = $5 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$839 >> 2] = (HEAP32[$2 >> 2] | 0) - (((((((Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
       $25 = $25 + 1 | 0;
       if (($25 | 0) != ($1 | 0)) {
        continue label5
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[$2 >> 2] | 0;
     $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $25 = 0;
     label6 : while (1) {
      $2 = $25 << 2 | 0;
      $916 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$916 >> 2] = (HEAP32[$2 >> 2] | 0) - ((((((((Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $40) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label6
      }
      break block1;
     };
    }
    block30 : {
     if (($3 | 0) == (6 | 0)) {
      break block30
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[$2 >> 2] | 0;
     $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $25 = 0;
     label7 : while (1) {
      $2 = $25 << 2 | 0;
      $995 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$995 >> 2] = (HEAP32[$2 >> 2] | 0) - (((((Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label7
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[$2 >> 2] | 0;
    $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $42 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $41 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $25 = 0;
    label8 : while (1) {
     $2 = $25 << 2 | 0;
     $1056 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     HEAP32[$1056 >> 2] = (HEAP32[$2 >> 2] | 0) - ((((((Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $42) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label8
     }
     break block1;
    };
   }
   block31 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break block31
    }
    block32 : {
     if (($3 | 0) == (4 | 0)) {
      break block32
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[$2 >> 2] | 0;
     $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $25 = 0;
     label9 : while (1) {
      $2 = $25 << 2 | 0;
      $1121 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$1121 >> 2] = (HEAP32[$2 >> 2] | 0) - (((Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label9
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[$2 >> 2] | 0;
    $45 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $44 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $43 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $25 = 0;
    label10 : while (1) {
     $2 = $25 << 2 | 0;
     $1166 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     HEAP32[$1166 >> 2] = (HEAP32[$2 >> 2] | 0) - ((((Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $44) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $43) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $45) | 0) + Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) | 0) >> $4 | 0) | 0;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label10
     }
     break block1;
    };
   }
   block33 : {
    if (($3 | 0) == (2 | 0)) {
     break block33
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $41 = $1 & 1 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $2 = 0;
    block34 : {
     if (($1 | 0) == (1 | 0)) {
      break block34
     }
     $42 = $1 & 2147483646 | 0;
     $2 = 0;
     $45 = 0;
     label11 : while (1) {
      $25 = $2 << 2 | 0;
      $44 = $0 + $25 | 0;
      $43 = HEAP32[$44 >> 2] | 0;
      HEAP32[($5 + $25 | 0) >> 2] = $43 - (Math_imul(HEAP32[($44 + -4 | 0) >> 2] | 0, $3) >> $4 | 0) | 0;
      $25 = $25 | 4 | 0;
      HEAP32[($5 + $25 | 0) >> 2] = (HEAP32[($0 + $25 | 0) >> 2] | 0) - (Math_imul($43, $3) >> $4 | 0) | 0;
      $2 = $2 + 2 | 0;
      $45 = $45 + 2 | 0;
      if (($45 | 0) != ($42 | 0)) {
       continue label11
      }
      break label11;
     };
    }
    if (!$41) {
     break block1
    }
    $2 = $2 << 2 | 0;
    $1262 = $5 + $2 | 0;
    $2 = $0 + $2 | 0;
    HEAP32[$1262 >> 2] = (HEAP32[$2 >> 2] | 0) - (Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $3) >> $4 | 0) | 0;
    return;
   }
   if (($1 | 0) < (1 | 0)) {
    break block1
   }
   $39 = $1 & 1 | 0;
   $45 = HEAP32[$2 >> 2] | 0;
   $44 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $2 = 0;
   block35 : {
    if (($1 | 0) == (1 | 0)) {
     break block35
    }
    $40 = $1 & 2147483646 | 0;
    $2 = 0;
    $43 = 0;
    label12 : while (1) {
     $25 = $2 << 2 | 0;
     $3 = $0 + $25 | 0;
     $42 = HEAP32[$3 >> 2] | 0;
     $41 = HEAP32[($3 + -4 | 0) >> 2] | 0;
     HEAP32[($5 + $25 | 0) >> 2] = $42 - ((Math_imul($41, $45) + Math_imul(HEAP32[($3 + -8 | 0) >> 2] | 0, $44) | 0) >> $4 | 0) | 0;
     $25 = $25 | 4 | 0;
     HEAP32[($5 + $25 | 0) >> 2] = (HEAP32[($0 + $25 | 0) >> 2] | 0) - ((Math_imul($42, $45) + Math_imul($41, $44) | 0) >> $4 | 0) | 0;
     $2 = $2 + 2 | 0;
     $43 = $43 + 2 | 0;
     if (($43 | 0) != ($40 | 0)) {
      continue label12
     }
     break label12;
    };
   }
   if (!$39) {
    break block1
   }
   $2 = $2 << 2 | 0;
   $1346 = $5 + $2 | 0;
   $2 = $0 + $2 | 0;
   HEAP32[$1346 >> 2] = (HEAP32[$2 >> 2] | 0) - ((Math_imul(HEAP32[($2 + -4 | 0) >> 2] | 0, $45) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $44) | 0) >> $4 | 0) | 0;
   return;
  }
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $27$hi = 0, $27 = 0, $25$hi = 0, $28$hi = 0, $29$hi = 0, $25 = 0, $30$hi = 0, $28 = 0, $31$hi = 0, $29 = 0, $32$hi = 0, $30 = 0, $33$hi = 0, $31 = 0, $34$hi = 0, $32 = 0, $33 = 0, $35$hi = 0, $26 = 0, $34 = 0, $36$hi = 0, $35 = 0, $6 = 0, $7 = 0, $36 = 0, $37$hi = 0, $37 = 0, $590 = 0, $591 = 0, $38$hi = 0, $592 = 0, $593 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $607 = 0, $608 = 0, $609 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $90 = 0, $90$hi = 0, $92 = 0, $92$hi = 0, $98 = 0, $98$hi = 0, $100 = 0, $100$hi = 0, $101$hi = 0, $108 = 0, $108$hi = 0, $110 = 0, $110$hi = 0, $111$hi = 0, $118 = 0, $118$hi = 0, $120 = 0, $120$hi = 0, $121$hi = 0, $128 = 0, $128$hi = 0, $130 = 0, $130$hi = 0, $131$hi = 0, $138 = 0, $138$hi = 0, $140 = 0, $140$hi = 0, $141$hi = 0, $148 = 0, $148$hi = 0, $150 = 0, $150$hi = 0, $151$hi = 0, $158 = 0, $158$hi = 0, $160 = 0, $160$hi = 0, $161$hi = 0, $168 = 0, $168$hi = 0, $170 = 0, $170$hi = 0, $171$hi = 0, $178 = 0, $178$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $188 = 0, $188$hi = 0, $190 = 0, $190$hi = 0, $191$hi = 0, $198 = 0, $198$hi = 0, $200 = 0, $200$hi = 0, $201$hi = 0, $208 = 0, $208$hi = 0, $210 = 0, $210$hi = 0, $211$hi = 0, $218 = 0, $218$hi = 0, $220 = 0, $220$hi = 0, $221$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $231$hi = 0, $238 = 0, $238$hi = 0, $240 = 0, $240$hi = 0, $241$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $250$hi = 0, $251$hi = 0, $258 = 0, $258$hi = 0, $260 = 0, $260$hi = 0, $261$hi = 0, $268 = 0, $268$hi = 0, $270 = 0, $270$hi = 0, $271$hi = 0, $280 = 0, $280$hi = 0, $282 = 0, $282$hi = 0, $283$hi = 0, $285$hi = 0, $288 = 0, $288$hi = 0, $290 = 0, $290$hi = 0, $291 = 0, $291$hi = 0, $292$hi = 0, $295 = 0, $295$hi = 0, $297 = 0, $297$hi = 0, $298 = 0, $298$hi = 0, $299$hi = 0, $302 = 0, $302$hi = 0, $304 = 0, $304$hi = 0, $305 = 0, $305$hi = 0, $306$hi = 0, $309 = 0, $309$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $313$hi = 0, $316 = 0, $316$hi = 0, $318 = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320$hi = 0, $323 = 0, $323$hi = 0, $325 = 0, $325$hi = 0, $326 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $333 = 0, $333$hi = 0, $334$hi = 0, $337 = 0, $337$hi = 0, $339 = 0, $339$hi = 0, $340 = 0, $340$hi = 0, $341$hi = 0, $344 = 0, $344$hi = 0, $346 = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348$hi = 0, $351 = 0, $351$hi = 0, $353 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $361 = 0, $361$hi = 0, $362$hi = 0, $365 = 0, $365$hi = 0, $367 = 0, $367$hi = 0, $368 = 0, $368$hi = 0, $374 = 0, $378 = 0, $425 = 0, $430 = 0, $433$hi = 0, $610 = 0, $435 = 0, $435$hi = 0, $438$hi = 0, $611 = 0, $440 = 0, $440$hi = 0, $441$hi = 0, $444$hi = 0, $613 = 0, $446 = 0, $446$hi = 0, $447$hi = 0, $450$hi = 0, $614 = 0, $452 = 0, $452$hi = 0, $453$hi = 0, $456$hi = 0, $615 = 0, $458 = 0, $458$hi = 0, $459$hi = 0, $462$hi = 0, $616 = 0, $464 = 0, $464$hi = 0, $465$hi = 0, $468$hi = 0, $617 = 0, $470 = 0, $470$hi = 0, $471$hi = 0, $474$hi = 0, $618 = 0, $476 = 0, $476$hi = 0, $477$hi = 0, $480$hi = 0, $619 = 0, $482 = 0, $482$hi = 0, $483$hi = 0, $486$hi = 0, $620 = 0, $488 = 0, $488$hi = 0, $489$hi = 0, $492$hi = 0, $621 = 0, $494 = 0, $494$hi = 0, $495$hi = 0, $38 = 0, $537 = 0, $542 = 0, $545$hi = 0, $622 = 0, $547 = 0, $547$hi = 0, $550$hi = 0, $623 = 0, $552 = 0, $552$hi = 0, $553$hi = 0, $556$hi = 0, $624 = 0, $558 = 0, $558$hi = 0, $559$hi = 0, $562$hi = 0, $625 = 0, $564 = 0, $564$hi = 0, $565$hi = 0, $568$hi = 0, $626 = 0, $570 = 0, $570$hi = 0, $571$hi = 0, $574$hi = 0, $627 = 0, $576 = 0, $576$hi = 0, $577$hi = 0, $580$hi = 0, $628 = 0, $582 = 0, $582$hi = 0, $583$hi = 0, $586$hi = 0, $629 = 0, $588 = 0, $588$hi = 0, $589$hi = 0, $592$hi = 0, $630 = 0, $594 = 0, $594$hi = 0, $595$hi = 0, $598$hi = 0, $631 = 0, $600 = 0, $600$hi = 0, $601$hi = 0, $604$hi = 0, $632 = 0, $606 = 0, $606$hi = 0, $607$hi = 0, $610$hi = 0, $633 = 0, $612 = 0, $612$hi = 0, $613$hi = 0, $651 = 0, $656 = 0, $659$hi = 0, $634 = 0, $661 = 0, $661$hi = 0, $664$hi = 0, $635 = 0, $666 = 0, $666$hi = 0, $667$hi = 0, $670$hi = 0, $636 = 0, $672 = 0, $672$hi = 0, $673$hi = 0, $676$hi = 0, $637 = 0, $678 = 0, $678$hi = 0, $679$hi = 0, $682$hi = 0, $638 = 0, $684 = 0, $684$hi = 0, $685$hi = 0, $688$hi = 0, $639 = 0, $690 = 0, $690$hi = 0, $691$hi = 0, $694$hi = 0, $640 = 0, $696 = 0, $696$hi = 0, $697$hi = 0, $700$hi = 0, $641 = 0, $702 = 0, $702$hi = 0, $703$hi = 0, $706$hi = 0, $642 = 0, $708 = 0, $708$hi = 0, $709$hi = 0, $747 = 0, $752 = 0, $755$hi = 0, $643 = 0, $757 = 0, $757$hi = 0, $760$hi = 0, $644 = 0, $762 = 0, $762$hi = 0, $763$hi = 0, $766$hi = 0, $645 = 0, $768 = 0, $768$hi = 0, $769$hi = 0, $772$hi = 0, $646 = 0, $774 = 0, $774$hi = 0, $775$hi = 0, $778$hi = 0, $647 = 0, $780 = 0, $780$hi = 0, $781$hi = 0, $784$hi = 0, $648 = 0, $786 = 0, $786$hi = 0, $787$hi = 0, $790$hi = 0, $649 = 0, $792 = 0, $792$hi = 0, $793$hi = 0, $796$hi = 0, $650 = 0, $798 = 0, $798$hi = 0, $799$hi = 0, $802$hi = 0, $652 = 0, $804 = 0, $804$hi = 0, $805$hi = 0, $808$hi = 0, $653 = 0, $810 = 0, $810$hi = 0, $811$hi = 0, $849 = 0, $854 = 0, $857$hi = 0, $654 = 0, $859 = 0, $859$hi = 0, $862$hi = 0, $655 = 0, $864 = 0, $864$hi = 0, $865$hi = 0, $868$hi = 0, $657 = 0, $870 = 0, $870$hi = 0, $871$hi = 0, $874$hi = 0, $658 = 0, $876 = 0, $876$hi = 0, $877$hi = 0, $880$hi = 0, $659 = 0, $882 = 0, $882$hi = 0, $883$hi = 0, $886$hi = 0, $660 = 0, $888 = 0, $888$hi = 0, $889$hi = 0, $892$hi = 0, $662 = 0, $894 = 0, $894$hi = 0, $895$hi = 0, $929 = 0, $934 = 0, $937$hi = 0, $663 = 0, $939 = 0, $939$hi = 0, $942$hi = 0, $664 = 0, $944 = 0, $944$hi = 0, $945$hi = 0, $948$hi = 0, $665 = 0, $950 = 0, $950$hi = 0, $951$hi = 0, $954$hi = 0, $667 = 0, $956 = 0, $956$hi = 0, $957$hi = 0, $960$hi = 0, $668 = 0, $962 = 0, $962$hi = 0, $963$hi = 0, $966$hi = 0, $669 = 0, $968 = 0, $968$hi = 0, $969$hi = 0, $972$hi = 0, $670 = 0, $974 = 0, $974$hi = 0, $975$hi = 0, $978$hi = 0, $671 = 0, $980 = 0, $980$hi = 0, $981$hi = 0, $1011 = 0, $1016 = 0, $1019$hi = 0, $673 = 0, $1021 = 0, $1021$hi = 0, $1024$hi = 0, $674 = 0, $1026 = 0, $1026$hi = 0, $1027$hi = 0, $1030$hi = 0, $675 = 0, $1032 = 0, $1032$hi = 0, $1033$hi = 0, $1036$hi = 0, $676 = 0, $1038 = 0, $1038$hi = 0, $1039$hi = 0, $1042$hi = 0, $677 = 0, $1044 = 0, $1044$hi = 0, $1045$hi = 0, $1075 = 0, $1080 = 0, $1083$hi = 0, $679 = 0, $1085 = 0, $1085$hi = 0, $1088$hi = 0, $680 = 0, $1090 = 0, $1090$hi = 0, $1091$hi = 0, $1094$hi = 0, $681 = 0, $1096 = 0, $1096$hi = 0, $1097$hi = 0, $1100$hi = 0, $682 = 0, $1102 = 0, $1102$hi = 0, $1103$hi = 0, $1106$hi = 0, $683 = 0, $1108 = 0, $1108$hi = 0, $1109$hi = 0, $1112$hi = 0, $685 = 0, $1114 = 0, $1114$hi = 0, $1115$hi = 0, $1143 = 0, $1148 = 0, $1151$hi = 0, $686 = 0, $1153 = 0, $1153$hi = 0, $1156$hi = 0, $687 = 0, $1158 = 0, $1158$hi = 0, $1159$hi = 0, $1162$hi = 0, $688 = 0, $1164 = 0, $1164$hi = 0, $1165$hi = 0, $1191 = 0, $1196 = 0, $1199$hi = 0, $689 = 0, $1201 = 0, $1201$hi = 0, $1204$hi = 0, $691 = 0, $1206 = 0, $1206$hi = 0, $1207$hi = 0, $1210$hi = 0, $692 = 0, $1212 = 0, $1212$hi = 0, $1213$hi = 0, $1216$hi = 0, $693 = 0, $1218 = 0, $1218$hi = 0, $1219$hi = 0, $1247 = 0, $1253 = 0, $1256$hi = 0, $694 = 0, $1258$hi = 0, $1267 = 0, $1271 = 0, $1273$hi = 0, $1275$hi = 0, $1293 = 0, $1298 = 0, $1301$hi = 0, $695 = 0, $1303$hi = 0, $1326 = 0, $1332 = 0, $1338 = 0, $1338$hi = 0, $1341$hi = 0, $697 = 0, $1343 = 0, $1343$hi = 0, $1344$hi = 0, $1353 = 0, $1357 = 0, $1359$hi = 0, $1361 = 0, $1361$hi = 0, $1364 = 0, $1364$hi = 0, $1365$hi = 0, $1383 = 0, $1388 = 0, $1391$hi = 0, $698 = 0, $1393 = 0, $1393$hi = 0, $1396$hi = 0, $699 = 0, $1398 = 0, $1398$hi = 0, $1399$hi = 0;
  block1 : {
   block : {
    if ($3 >>> 0 < 13 >>> 0) {
     break block
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $6 = $0 + -56 | 0;
    $7 = $0 + -60 | 0;
    $8 = $0 + -64 | 0;
    $9 = $0 + -68 | 0;
    $10 = $0 + -72 | 0;
    $11 = $0 + -76 | 0;
    $12 = $0 + -80 | 0;
    $13 = $0 + -84 | 0;
    $14 = $0 + -88 | 0;
    $15 = $0 + -92 | 0;
    $16 = $0 + -96 | 0;
    $17 = $0 + -100 | 0;
    $18 = $0 + -104 | 0;
    $19 = $0 + -108 | 0;
    $20 = $0 + -112 | 0;
    $21 = $0 + -116 | 0;
    $22 = $0 + -120 | 0;
    $23 = $0 + -124 | 0;
    $24 = $0 + -128 | 0;
    i64toi32_i32$0 = 0;
    $25 = $4;
    $25$hi = i64toi32_i32$0;
    $4 = 0;
    $26 = $3 + -13 | 0;
    label : while (1) {
     i64toi32_i32$0 = 0;
     $27 = 0;
     $27$hi = i64toi32_i32$0;
     block22 : {
      switch ($26 | 0) {
      case 19:
       i64toi32_i32$2 = $24 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $90 = i64toi32_i32$0;
       $90$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $92 = i64toi32_i32$1;
       $92$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $90$hi;
       i64toi32_i32$1 = $92$hi;
       i64toi32_i32$1 = __wasm_i64_mul($90 | 0, i64toi32_i32$0 | 0, $92 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$0;
      case 18:
       i64toi32_i32$2 = $23 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $98 = i64toi32_i32$0;
       $98$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $100 = i64toi32_i32$1;
       $100$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $98$hi;
       i64toi32_i32$1 = $100$hi;
       i64toi32_i32$1 = __wasm_i64_mul($98 | 0, i64toi32_i32$0 | 0, $100 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $101$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $101$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 17:
       i64toi32_i32$0 = $22 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $108 = i64toi32_i32$5;
       $108$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $110 = i64toi32_i32$2;
       $110$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $108$hi;
       i64toi32_i32$2 = $110$hi;
       i64toi32_i32$2 = __wasm_i64_mul($108 | 0, i64toi32_i32$5 | 0, $110 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $111$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $111$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 16:
       i64toi32_i32$5 = $21 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $118 = i64toi32_i32$4;
       $118$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $120 = i64toi32_i32$0;
       $120$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $118$hi;
       i64toi32_i32$0 = $120$hi;
       i64toi32_i32$0 = __wasm_i64_mul($118 | 0, i64toi32_i32$4 | 0, $120 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $121$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $121$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 15:
       i64toi32_i32$4 = $20 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $128 = i64toi32_i32$1;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $130 = i64toi32_i32$5;
       $130$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $128$hi;
       i64toi32_i32$5 = $130$hi;
       i64toi32_i32$5 = __wasm_i64_mul($128 | 0, i64toi32_i32$1 | 0, $130 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $131$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $131$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 14:
       i64toi32_i32$1 = $19 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $138 = i64toi32_i32$2;
       $138$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $140 = i64toi32_i32$4;
       $140$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $138$hi;
       i64toi32_i32$4 = $140$hi;
       i64toi32_i32$4 = __wasm_i64_mul($138 | 0, i64toi32_i32$2 | 0, $140 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $141$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $141$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 13:
       i64toi32_i32$2 = $18 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $148 = i64toi32_i32$0;
       $148$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $150 = i64toi32_i32$1;
       $150$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $148$hi;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$1 = __wasm_i64_mul($148 | 0, i64toi32_i32$0 | 0, $150 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $151$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $151$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 12:
       i64toi32_i32$0 = $17 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $158 = i64toi32_i32$5;
       $158$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $160 = i64toi32_i32$2;
       $160$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $158$hi;
       i64toi32_i32$2 = $160$hi;
       i64toi32_i32$2 = __wasm_i64_mul($158 | 0, i64toi32_i32$5 | 0, $160 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $161$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $161$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 11:
       i64toi32_i32$5 = $16 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $168 = i64toi32_i32$4;
       $168$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 92 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $170 = i64toi32_i32$0;
       $170$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $168$hi;
       i64toi32_i32$0 = $170$hi;
       i64toi32_i32$0 = __wasm_i64_mul($168 | 0, i64toi32_i32$4 | 0, $170 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $171$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $171$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 10:
       i64toi32_i32$4 = $15 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $178 = i64toi32_i32$1;
       $178$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $180 = i64toi32_i32$5;
       $180$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $178$hi;
       i64toi32_i32$5 = $180$hi;
       i64toi32_i32$5 = __wasm_i64_mul($178 | 0, i64toi32_i32$1 | 0, $180 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $181$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $181$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 9:
       i64toi32_i32$1 = $14 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $188 = i64toi32_i32$2;
       $188$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $190 = i64toi32_i32$4;
       $190$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $188$hi;
       i64toi32_i32$4 = $190$hi;
       i64toi32_i32$4 = __wasm_i64_mul($188 | 0, i64toi32_i32$2 | 0, $190 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $191$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $191$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 8:
       i64toi32_i32$2 = $13 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $198 = i64toi32_i32$0;
       $198$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $200 = i64toi32_i32$1;
       $200$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $198$hi;
       i64toi32_i32$1 = $200$hi;
       i64toi32_i32$1 = __wasm_i64_mul($198 | 0, i64toi32_i32$0 | 0, $200 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $201$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $201$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 7:
       i64toi32_i32$0 = $12 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $208 = i64toi32_i32$5;
       $208$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $210 = i64toi32_i32$2;
       $210$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $208$hi;
       i64toi32_i32$2 = $210$hi;
       i64toi32_i32$2 = __wasm_i64_mul($208 | 0, i64toi32_i32$5 | 0, $210 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $211$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $211$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 6:
       i64toi32_i32$5 = $11 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $218 = i64toi32_i32$4;
       $218$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $220 = i64toi32_i32$0;
       $220$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $218$hi;
       i64toi32_i32$0 = $220$hi;
       i64toi32_i32$0 = __wasm_i64_mul($218 | 0, i64toi32_i32$4 | 0, $220 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $221$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $221$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 5:
       i64toi32_i32$4 = $10 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $228 = i64toi32_i32$1;
       $228$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 68 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $230 = i64toi32_i32$5;
       $230$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $228$hi;
       i64toi32_i32$5 = $230$hi;
       i64toi32_i32$5 = __wasm_i64_mul($228 | 0, i64toi32_i32$1 | 0, $230 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $231$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $231$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 4:
       i64toi32_i32$1 = $9 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $238 = i64toi32_i32$2;
       $238$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $240 = i64toi32_i32$4;
       $240$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $238$hi;
       i64toi32_i32$4 = $240$hi;
       i64toi32_i32$4 = __wasm_i64_mul($238 | 0, i64toi32_i32$2 | 0, $240 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $241$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $241$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 3:
       i64toi32_i32$2 = $8 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $248 = i64toi32_i32$0;
       $248$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $250 = i64toi32_i32$1;
       $250$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $248$hi;
       i64toi32_i32$1 = $250$hi;
       i64toi32_i32$1 = __wasm_i64_mul($248 | 0, i64toi32_i32$0 | 0, $250 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $251$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $251$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 2:
       i64toi32_i32$0 = $7 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $258 = i64toi32_i32$5;
       $258$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $260 = i64toi32_i32$2;
       $260$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $258$hi;
       i64toi32_i32$2 = $260$hi;
       i64toi32_i32$2 = __wasm_i64_mul($258 | 0, i64toi32_i32$5 | 0, $260 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $261$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $261$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 1:
       i64toi32_i32$5 = $6 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $268 = i64toi32_i32$4;
       $268$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $270 = i64toi32_i32$0;
       $270$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $268$hi;
       i64toi32_i32$0 = $270$hi;
       i64toi32_i32$0 = __wasm_i64_mul($268 | 0, i64toi32_i32$4 | 0, $270 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $271$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $271$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 0:
       $3 = $0 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = $3 + -52 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $280 = i64toi32_i32$1;
       $280$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $282 = i64toi32_i32$5;
       $282$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $280$hi;
       i64toi32_i32$5 = $282$hi;
       i64toi32_i32$5 = __wasm_i64_mul($280 | 0, i64toi32_i32$1 | 0, $282 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $283$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $283$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $285$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -48 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $288 = i64toi32_i32$2;
       $288$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $290 = i64toi32_i32$4;
       $290$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $288$hi;
       i64toi32_i32$4 = $290$hi;
       i64toi32_i32$4 = __wasm_i64_mul($288 | 0, i64toi32_i32$2 | 0, $290 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $291 = i64toi32_i32$4;
       $291$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $285$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $291$hi;
       i64toi32_i32$3 = $291;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $292$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -44 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $295 = i64toi32_i32$0;
       $295$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $297 = i64toi32_i32$1;
       $297$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $295$hi;
       i64toi32_i32$1 = $297$hi;
       i64toi32_i32$1 = __wasm_i64_mul($295 | 0, i64toi32_i32$0 | 0, $297 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $298 = i64toi32_i32$1;
       $298$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $292$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $298$hi;
       i64toi32_i32$3 = $298;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $299$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $3 + -40 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $302 = i64toi32_i32$5;
       $302$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $304 = i64toi32_i32$2;
       $304$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $302$hi;
       i64toi32_i32$2 = $304$hi;
       i64toi32_i32$2 = __wasm_i64_mul($302 | 0, i64toi32_i32$5 | 0, $304 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $305 = i64toi32_i32$2;
       $305$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $299$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $305$hi;
       i64toi32_i32$3 = $305;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $306$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3 + -36 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $309 = i64toi32_i32$4;
       $309$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $311 = i64toi32_i32$0;
       $311$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $309$hi;
       i64toi32_i32$0 = $311$hi;
       i64toi32_i32$0 = __wasm_i64_mul($309 | 0, i64toi32_i32$4 | 0, $311 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $312 = i64toi32_i32$0;
       $312$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $306$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $312$hi;
       i64toi32_i32$3 = $312;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $313$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $3 + -32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $316 = i64toi32_i32$1;
       $316$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $318 = i64toi32_i32$5;
       $318$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $316$hi;
       i64toi32_i32$5 = $318$hi;
       i64toi32_i32$5 = __wasm_i64_mul($316 | 0, i64toi32_i32$1 | 0, $318 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $319 = i64toi32_i32$5;
       $319$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $313$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$5 = $319$hi;
       i64toi32_i32$3 = $319;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $320$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -28 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $323 = i64toi32_i32$2;
       $323$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $325 = i64toi32_i32$4;
       $325$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $323$hi;
       i64toi32_i32$4 = $325$hi;
       i64toi32_i32$4 = __wasm_i64_mul($323 | 0, i64toi32_i32$2 | 0, $325 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $326 = i64toi32_i32$4;
       $326$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $320$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $326$hi;
       i64toi32_i32$3 = $326;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $330 = i64toi32_i32$0;
       $330$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $332 = i64toi32_i32$1;
       $332$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $330$hi;
       i64toi32_i32$1 = $332$hi;
       i64toi32_i32$1 = __wasm_i64_mul($330 | 0, i64toi32_i32$0 | 0, $332 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $333 = i64toi32_i32$1;
       $333$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $327$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $333$hi;
       i64toi32_i32$3 = $333;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $334$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $3 + -20 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $337 = i64toi32_i32$5;
       $337$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $339 = i64toi32_i32$2;
       $339$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $337$hi;
       i64toi32_i32$2 = $339$hi;
       i64toi32_i32$2 = __wasm_i64_mul($337 | 0, i64toi32_i32$5 | 0, $339 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $340 = i64toi32_i32$2;
       $340$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $334$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $340$hi;
       i64toi32_i32$3 = $340;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $341$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3 + -16 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $344 = i64toi32_i32$4;
       $344$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $346 = i64toi32_i32$0;
       $346$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $344$hi;
       i64toi32_i32$0 = $346$hi;
       i64toi32_i32$0 = __wasm_i64_mul($344 | 0, i64toi32_i32$4 | 0, $346 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $347 = i64toi32_i32$0;
       $347$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $341$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $347$hi;
       i64toi32_i32$3 = $347;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $348$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $3 + -12 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $351 = i64toi32_i32$1;
       $351$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $353 = i64toi32_i32$5;
       $353$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $351$hi;
       i64toi32_i32$5 = $353$hi;
       i64toi32_i32$5 = __wasm_i64_mul($351 | 0, i64toi32_i32$1 | 0, $353 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $354 = i64toi32_i32$5;
       $354$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $348$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$5 = $354$hi;
       i64toi32_i32$3 = $354;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $355$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $358 = i64toi32_i32$2;
       $358$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $360 = i64toi32_i32$4;
       $360$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $358$hi;
       i64toi32_i32$4 = $360$hi;
       i64toi32_i32$4 = __wasm_i64_mul($358 | 0, i64toi32_i32$2 | 0, $360 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $361 = i64toi32_i32$4;
       $361$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $355$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $361$hi;
       i64toi32_i32$3 = $361;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $362$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -4 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $365 = i64toi32_i32$0;
       $365$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $367 = i64toi32_i32$1;
       $367$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $365$hi;
       i64toi32_i32$1 = $367$hi;
       i64toi32_i32$1 = __wasm_i64_mul($365 | 0, i64toi32_i32$0 | 0, $367 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $368 = i64toi32_i32$1;
       $368$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $362$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $368$hi;
       i64toi32_i32$3 = $368;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
       break;
      default:
       break block22;
      };
     }
     $3 = $4 << 2 | 0;
     $374 = $5 + $3 | 0;
     $378 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$0 = $27;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$3 = $25;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $590 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      $590 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     HEAP32[$374 >> 2] = $378 - $590 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   block23 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break block23
    }
    block24 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break block24
     }
     block25 : {
      if (($3 | 0) == (12 | 0)) {
       break block25
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      i64toi32_i32$2 = 0;
      $27 = $4;
      $27$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $28 = i64toi32_i32$0;
      $28$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $29 = i64toi32_i32$2;
      $29$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $30 = i64toi32_i32$0;
      $30$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $31 = i64toi32_i32$2;
      $31$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $32 = i64toi32_i32$0;
      $32$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $33 = i64toi32_i32$2;
      $33$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $34 = i64toi32_i32$0;
      $34$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $35 = i64toi32_i32$2;
      $35$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $36 = i64toi32_i32$0;
      $36$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $37 = i64toi32_i32$2;
      $37$hi = i64toi32_i32$0;
      $4 = 0;
      label1 : while (1) {
       $2 = $4 << 2 | 0;
       $425 = $5 + $2 | 0;
       $2 = $0 + $2 | 0;
       $430 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$5 = $2 + -40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $433$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $36$hi;
       i64toi32_i32$2 = $433$hi;
       $610 = i64toi32_i32$0;
       i64toi32_i32$0 = $36$hi;
       i64toi32_i32$0 = __wasm_i64_mul($610 | 0, i64toi32_i32$2 | 0, $36 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $435 = i64toi32_i32$0;
       $435$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $2 + -44 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $438$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $37$hi;
       i64toi32_i32$0 = $438$hi;
       $611 = i64toi32_i32$2;
       i64toi32_i32$2 = $37$hi;
       i64toi32_i32$2 = __wasm_i64_mul($611 | 0, i64toi32_i32$0 | 0, $37 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $440 = i64toi32_i32$2;
       $440$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $435$hi;
       i64toi32_i32$5 = $435;
       i64toi32_i32$2 = $440$hi;
       i64toi32_i32$3 = $440;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $441$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $2 + -36 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $444$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $35$hi;
       i64toi32_i32$5 = $444$hi;
       $613 = i64toi32_i32$4;
       i64toi32_i32$4 = $35$hi;
       i64toi32_i32$4 = __wasm_i64_mul($613 | 0, i64toi32_i32$5 | 0, $35 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $446 = i64toi32_i32$4;
       $446$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $441$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$4 = $446$hi;
       i64toi32_i32$3 = $446;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $447$hi = i64toi32_i32$1;
       i64toi32_i32$5 = $2 + -32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $450$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$0 = $450$hi;
       $614 = i64toi32_i32$1;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$1 = __wasm_i64_mul($614 | 0, i64toi32_i32$0 | 0, $34 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $452 = i64toi32_i32$1;
       $452$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $447$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $452$hi;
       i64toi32_i32$3 = $452;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $453$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2 + -28 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $456$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $33$hi;
       i64toi32_i32$5 = $456$hi;
       $615 = i64toi32_i32$2;
       i64toi32_i32$2 = $33$hi;
       i64toi32_i32$2 = __wasm_i64_mul($615 | 0, i64toi32_i32$5 | 0, $33 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $458 = i64toi32_i32$2;
       $458$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $453$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $458$hi;
       i64toi32_i32$3 = $458;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $459$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $2 + -24 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $462$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $462$hi;
       $616 = i64toi32_i32$4;
       i64toi32_i32$4 = $32$hi;
       i64toi32_i32$4 = __wasm_i64_mul($616 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $464 = i64toi32_i32$4;
       $464$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $459$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$4 = $464$hi;
       i64toi32_i32$3 = $464;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $465$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2 + -20 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $468$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $31$hi;
       i64toi32_i32$5 = $468$hi;
       $617 = i64toi32_i32$1;
       i64toi32_i32$1 = $31$hi;
       i64toi32_i32$1 = __wasm_i64_mul($617 | 0, i64toi32_i32$5 | 0, $31 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $470 = i64toi32_i32$1;
       $470$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $465$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$1 = $470$hi;
       i64toi32_i32$3 = $470;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $471$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $2 + -16 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $474$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = $474$hi;
       $618 = i64toi32_i32$2;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = __wasm_i64_mul($618 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $476 = i64toi32_i32$2;
       $476$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $471$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $476$hi;
       i64toi32_i32$3 = $476;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $477$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $2 + -12 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $480$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $29$hi;
       i64toi32_i32$5 = $480$hi;
       $619 = i64toi32_i32$4;
       i64toi32_i32$4 = $29$hi;
       i64toi32_i32$4 = __wasm_i64_mul($619 | 0, i64toi32_i32$5 | 0, $29 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $482 = i64toi32_i32$4;
       $482$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $477$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$4 = $482$hi;
       i64toi32_i32$3 = $482;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $483$hi = i64toi32_i32$1;
       i64toi32_i32$5 = $2 + -8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $486$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $486$hi;
       $620 = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$1 = __wasm_i64_mul($620 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $488 = i64toi32_i32$1;
       $488$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $483$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $488$hi;
       i64toi32_i32$3 = $488;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $489$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2 + -4 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $492$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = $492$hi;
       $621 = i64toi32_i32$2;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = __wasm_i64_mul($621 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $494 = i64toi32_i32$2;
       $494$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $489$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $494$hi;
       i64toi32_i32$3 = $494;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $495$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $495$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $591 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
        $591 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       HEAP32[$425 >> 2] = $430 - $591 | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label1
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     i64toi32_i32$0 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $28 = i64toi32_i32$5;
     $28$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $29 = i64toi32_i32$0;
     $29$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $30 = i64toi32_i32$5;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $31 = i64toi32_i32$0;
     $31$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $32 = i64toi32_i32$5;
     $32$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $33 = i64toi32_i32$0;
     $33$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $34 = i64toi32_i32$5;
     $34$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $35 = i64toi32_i32$0;
     $35$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $36 = i64toi32_i32$5;
     $36$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 40 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $37 = i64toi32_i32$0;
     $37$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 44 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $38 = i64toi32_i32$5;
     $38$hi = i64toi32_i32$0;
     $4 = 0;
     label2 : while (1) {
      $2 = $4 << 2 | 0;
      $537 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      $542 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$4 = $2 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $545$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $37$hi;
      i64toi32_i32$5 = $545$hi;
      $622 = i64toi32_i32$0;
      i64toi32_i32$0 = $37$hi;
      i64toi32_i32$0 = __wasm_i64_mul($622 | 0, i64toi32_i32$5 | 0, $37 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $547 = i64toi32_i32$0;
      $547$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2 + -48 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $550$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$0 = $550$hi;
      $623 = i64toi32_i32$5;
      i64toi32_i32$5 = $38$hi;
      i64toi32_i32$5 = __wasm_i64_mul($623 | 0, i64toi32_i32$0 | 0, $38 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $552 = i64toi32_i32$5;
      $552$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$4 = $547;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$3 = $552;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $553$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $556$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $36$hi;
      i64toi32_i32$4 = $556$hi;
      $624 = i64toi32_i32$1;
      i64toi32_i32$1 = $36$hi;
      i64toi32_i32$1 = __wasm_i64_mul($624 | 0, i64toi32_i32$4 | 0, $36 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $558 = i64toi32_i32$1;
      $558$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $553$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $558$hi;
      i64toi32_i32$3 = $558;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $559$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $2 + -36 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $562$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $35$hi;
      i64toi32_i32$0 = $562$hi;
      $625 = i64toi32_i32$2;
      i64toi32_i32$2 = $35$hi;
      i64toi32_i32$2 = __wasm_i64_mul($625 | 0, i64toi32_i32$0 | 0, $35 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $564 = i64toi32_i32$2;
      $564$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $559$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $564$hi;
      i64toi32_i32$3 = $564;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $565$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -32 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $568$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $34$hi;
      i64toi32_i32$4 = $568$hi;
      $626 = i64toi32_i32$5;
      i64toi32_i32$5 = $34$hi;
      i64toi32_i32$5 = __wasm_i64_mul($626 | 0, i64toi32_i32$4 | 0, $34 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $570 = i64toi32_i32$5;
      $570$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $565$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $570$hi;
      i64toi32_i32$3 = $570;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $571$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $2 + -28 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $33$hi;
      i64toi32_i32$0 = $574$hi;
      $627 = i64toi32_i32$1;
      i64toi32_i32$1 = $33$hi;
      i64toi32_i32$1 = __wasm_i64_mul($627 | 0, i64toi32_i32$0 | 0, $33 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $576 = i64toi32_i32$1;
      $576$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $571$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $576$hi;
      i64toi32_i32$3 = $576;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $577$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2 + -24 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $580$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$4 = $580$hi;
      $628 = i64toi32_i32$2;
      i64toi32_i32$2 = $32$hi;
      i64toi32_i32$2 = __wasm_i64_mul($628 | 0, i64toi32_i32$4 | 0, $32 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $582 = i64toi32_i32$2;
      $582$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $577$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $582$hi;
      i64toi32_i32$3 = $582;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $583$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2 + -20 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $586$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$0 = $586$hi;
      $629 = i64toi32_i32$5;
      i64toi32_i32$5 = $31$hi;
      i64toi32_i32$5 = __wasm_i64_mul($629 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $588 = i64toi32_i32$5;
      $588$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $583$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $588$hi;
      i64toi32_i32$3 = $588;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $589$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $592$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $30$hi;
      i64toi32_i32$4 = $592$hi;
      $630 = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = __wasm_i64_mul($630 | 0, i64toi32_i32$4 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $594 = i64toi32_i32$1;
      $594$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $589$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $594$hi;
      i64toi32_i32$3 = $594;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $2 + -12 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $598$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$0 = $598$hi;
      $631 = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = __wasm_i64_mul($631 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $600 = i64toi32_i32$2;
      $600$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $595$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $600$hi;
      i64toi32_i32$3 = $600;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $601$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $604$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $28$hi;
      i64toi32_i32$4 = $604$hi;
      $632 = i64toi32_i32$5;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = __wasm_i64_mul($632 | 0, i64toi32_i32$4 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $606 = i64toi32_i32$5;
      $606$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $601$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $606$hi;
      i64toi32_i32$3 = $606;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $607$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $2 + -4 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $610$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $610$hi;
      $633 = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = __wasm_i64_mul($633 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $612 = i64toi32_i32$1;
      $612$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $607$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $612$hi;
      i64toi32_i32$3 = $612;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $613$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $592 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       $592 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      HEAP32[$537 >> 2] = $542 - $592 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label2
      }
      break block1;
     };
    }
    block26 : {
     if (($3 | 0) == (10 | 0)) {
      break block26
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     i64toi32_i32$4 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $25 = i64toi32_i32$4;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $28 = i64toi32_i32$0;
     $28$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $29 = i64toi32_i32$4;
     $29$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $30 = i64toi32_i32$0;
     $30$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $31 = i64toi32_i32$4;
     $31$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $32 = i64toi32_i32$0;
     $32$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $33 = i64toi32_i32$4;
     $33$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $34 = i64toi32_i32$0;
     $34$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $35 = i64toi32_i32$4;
     $35$hi = i64toi32_i32$0;
     $4 = 0;
     label3 : while (1) {
      $2 = $4 << 2 | 0;
      $651 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      $656 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$2 = $2 + -32 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $659$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $34$hi;
      i64toi32_i32$4 = $659$hi;
      $634 = i64toi32_i32$0;
      i64toi32_i32$0 = $34$hi;
      i64toi32_i32$0 = __wasm_i64_mul($634 | 0, i64toi32_i32$4 | 0, $34 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $661 = i64toi32_i32$0;
      $661$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $2 + -36 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $664$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $35$hi;
      i64toi32_i32$0 = $664$hi;
      $635 = i64toi32_i32$4;
      i64toi32_i32$4 = $35$hi;
      i64toi32_i32$4 = __wasm_i64_mul($635 | 0, i64toi32_i32$0 | 0, $35 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $666 = i64toi32_i32$4;
      $666$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $661$hi;
      i64toi32_i32$2 = $661;
      i64toi32_i32$4 = $666$hi;
      i64toi32_i32$3 = $666;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $667$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -28 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $670$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $33$hi;
      i64toi32_i32$2 = $670$hi;
      $636 = i64toi32_i32$5;
      i64toi32_i32$5 = $33$hi;
      i64toi32_i32$5 = __wasm_i64_mul($636 | 0, i64toi32_i32$2 | 0, $33 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $672 = i64toi32_i32$5;
      $672$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $667$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $672$hi;
      i64toi32_i32$3 = $672;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $673$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2 + -24 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $676$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $32$hi;
      i64toi32_i32$0 = $676$hi;
      $637 = i64toi32_i32$1;
      i64toi32_i32$1 = $32$hi;
      i64toi32_i32$1 = __wasm_i64_mul($637 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $678 = i64toi32_i32$1;
      $678$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $673$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$3 = $678;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $679$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $2 + -20 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $682$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $31$hi;
      i64toi32_i32$2 = $682$hi;
      $638 = i64toi32_i32$4;
      i64toi32_i32$4 = $31$hi;
      i64toi32_i32$4 = __wasm_i64_mul($638 | 0, i64toi32_i32$2 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $684 = i64toi32_i32$4;
      $684$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $679$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = $684$hi;
      i64toi32_i32$3 = $684;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $685$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2 + -16 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $688$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$0 = $688$hi;
      $639 = i64toi32_i32$5;
      i64toi32_i32$5 = $30$hi;
      i64toi32_i32$5 = __wasm_i64_mul($639 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $690 = i64toi32_i32$5;
      $690$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $685$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$5 = $690$hi;
      i64toi32_i32$3 = $690;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $691$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -12 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $694$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = $694$hi;
      $640 = i64toi32_i32$1;
      i64toi32_i32$1 = $29$hi;
      i64toi32_i32$1 = __wasm_i64_mul($640 | 0, i64toi32_i32$2 | 0, $29 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $696 = i64toi32_i32$1;
      $696$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $691$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $696$hi;
      i64toi32_i32$3 = $696;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $697$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $2 + -8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $700$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = $700$hi;
      $641 = i64toi32_i32$4;
      i64toi32_i32$4 = $28$hi;
      i64toi32_i32$4 = __wasm_i64_mul($641 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $702 = i64toi32_i32$4;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $697$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $702$hi;
      i64toi32_i32$3 = $702;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $703$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -4 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $706$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = $706$hi;
      $642 = i64toi32_i32$5;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = __wasm_i64_mul($642 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $708 = i64toi32_i32$5;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $703$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $708$hi;
      i64toi32_i32$3 = $708;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = $709$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $593 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       $593 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP32[$651 >> 2] = $656 - $593 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label3
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    i64toi32_i32$0 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $25 = i64toi32_i32$0;
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $28 = i64toi32_i32$2;
    $28$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $29 = i64toi32_i32$0;
    $29$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $30 = i64toi32_i32$2;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $31 = i64toi32_i32$0;
    $31$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $32 = i64toi32_i32$2;
    $32$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $33 = i64toi32_i32$0;
    $33$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $34 = i64toi32_i32$2;
    $34$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $35 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $36 = i64toi32_i32$2;
    $36$hi = i64toi32_i32$0;
    $4 = 0;
    label4 : while (1) {
     $2 = $4 << 2 | 0;
     $747 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     $752 = HEAP32[$2 >> 2] | 0;
     i64toi32_i32$1 = $2 + -36 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $755$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $35$hi;
     i64toi32_i32$2 = $755$hi;
     $643 = i64toi32_i32$0;
     i64toi32_i32$0 = $35$hi;
     i64toi32_i32$0 = __wasm_i64_mul($643 | 0, i64toi32_i32$2 | 0, $35 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $757 = i64toi32_i32$0;
     $757$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $2 + -40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $760$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $36$hi;
     i64toi32_i32$0 = $760$hi;
     $644 = i64toi32_i32$2;
     i64toi32_i32$2 = $36$hi;
     i64toi32_i32$2 = __wasm_i64_mul($644 | 0, i64toi32_i32$0 | 0, $36 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $762 = i64toi32_i32$2;
     $762$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $757$hi;
     i64toi32_i32$1 = $757;
     i64toi32_i32$2 = $762$hi;
     i64toi32_i32$3 = $762;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $763$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $2 + -32 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $766$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $34$hi;
     i64toi32_i32$1 = $766$hi;
     $645 = i64toi32_i32$4;
     i64toi32_i32$4 = $34$hi;
     i64toi32_i32$4 = __wasm_i64_mul($645 | 0, i64toi32_i32$1 | 0, $34 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $768 = i64toi32_i32$4;
     $768$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $763$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$4 = $768$hi;
     i64toi32_i32$3 = $768;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $769$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $2 + -28 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $772$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $33$hi;
     i64toi32_i32$0 = $772$hi;
     $646 = i64toi32_i32$5;
     i64toi32_i32$5 = $33$hi;
     i64toi32_i32$5 = __wasm_i64_mul($646 | 0, i64toi32_i32$0 | 0, $33 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $774 = i64toi32_i32$5;
     $774$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $769$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = $774$hi;
     i64toi32_i32$3 = $774;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $775$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2 + -24 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $778$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $32$hi;
     i64toi32_i32$1 = $778$hi;
     $647 = i64toi32_i32$2;
     i64toi32_i32$2 = $32$hi;
     i64toi32_i32$2 = __wasm_i64_mul($647 | 0, i64toi32_i32$1 | 0, $32 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $780 = i64toi32_i32$2;
     $780$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $775$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $780$hi;
     i64toi32_i32$3 = $780;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $2 + -20 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $784$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $31$hi;
     i64toi32_i32$0 = $784$hi;
     $648 = i64toi32_i32$4;
     i64toi32_i32$4 = $31$hi;
     i64toi32_i32$4 = __wasm_i64_mul($648 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $786 = i64toi32_i32$4;
     $786$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $781$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $786$hi;
     i64toi32_i32$3 = $786;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $787$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $2 + -16 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $30$hi;
     i64toi32_i32$1 = $790$hi;
     $649 = i64toi32_i32$5;
     i64toi32_i32$5 = $30$hi;
     i64toi32_i32$5 = __wasm_i64_mul($649 | 0, i64toi32_i32$1 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $792 = i64toi32_i32$5;
     $792$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $787$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $792$hi;
     i64toi32_i32$3 = $792;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $793$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $2 + -12 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $796$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $29$hi;
     i64toi32_i32$0 = $796$hi;
     $650 = i64toi32_i32$2;
     i64toi32_i32$2 = $29$hi;
     i64toi32_i32$2 = __wasm_i64_mul($650 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $798 = i64toi32_i32$2;
     $798$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $793$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = $798$hi;
     i64toi32_i32$3 = $798;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $799$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $2 + -8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $802$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $802$hi;
     $652 = i64toi32_i32$4;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = __wasm_i64_mul($652 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $804 = i64toi32_i32$4;
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $799$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$4 = $804$hi;
     i64toi32_i32$3 = $804;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $805$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $2 + -4 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $808$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $808$hi;
     $653 = i64toi32_i32$5;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = __wasm_i64_mul($653 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $810 = i64toi32_i32$5;
     $810$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $805$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = $810$hi;
     i64toi32_i32$3 = $810;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $811$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$2 = $811$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $595 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
      $595 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
     }
     HEAP32[$747 >> 2] = $752 - $595 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label4
     }
     break block1;
    };
   }
   block27 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break block27
    }
    block28 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break block28
     }
     block29 : {
      if (($3 | 0) == (8 | 0)) {
       break block29
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      i64toi32_i32$1 = 0;
      $27 = $4;
      $27$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $25 = i64toi32_i32$1;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $28 = i64toi32_i32$0;
      $28$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $29 = i64toi32_i32$1;
      $29$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $30 = i64toi32_i32$0;
      $30$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $31 = i64toi32_i32$1;
      $31$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $32 = i64toi32_i32$0;
      $32$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $33 = i64toi32_i32$1;
      $33$hi = i64toi32_i32$0;
      $4 = 0;
      label5 : while (1) {
       $2 = $4 << 2 | 0;
       $849 = $5 + $2 | 0;
       $2 = $0 + $2 | 0;
       $854 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$2 = $2 + -24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $857$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $32$hi;
       i64toi32_i32$1 = $857$hi;
       $654 = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = __wasm_i64_mul($654 | 0, i64toi32_i32$1 | 0, $32 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $859 = i64toi32_i32$0;
       $859$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2 + -28 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $862$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $33$hi;
       i64toi32_i32$0 = $862$hi;
       $655 = i64toi32_i32$1;
       i64toi32_i32$1 = $33$hi;
       i64toi32_i32$1 = __wasm_i64_mul($655 | 0, i64toi32_i32$0 | 0, $33 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $864 = i64toi32_i32$1;
       $864$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $859$hi;
       i64toi32_i32$2 = $859;
       i64toi32_i32$1 = $864$hi;
       i64toi32_i32$3 = $864;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $865$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $2 + -20 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $868$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $31$hi;
       i64toi32_i32$2 = $868$hi;
       $657 = i64toi32_i32$4;
       i64toi32_i32$4 = $31$hi;
       i64toi32_i32$4 = __wasm_i64_mul($657 | 0, i64toi32_i32$2 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $870 = i64toi32_i32$4;
       $870$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $865$hi;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$4 = $870$hi;
       i64toi32_i32$3 = $870;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $871$hi = i64toi32_i32$5;
       i64toi32_i32$2 = $2 + -16 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
       $874$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = $874$hi;
       $658 = i64toi32_i32$5;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = __wasm_i64_mul($658 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $876 = i64toi32_i32$5;
       $876$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $871$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$5 = $876$hi;
       i64toi32_i32$3 = $876;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $877$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2 + -12 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
       $880$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$2 = $880$hi;
       $659 = i64toi32_i32$1;
       i64toi32_i32$1 = $29$hi;
       i64toi32_i32$1 = __wasm_i64_mul($659 | 0, i64toi32_i32$2 | 0, $29 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $882 = i64toi32_i32$1;
       $882$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $877$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $882$hi;
       i64toi32_i32$3 = $882;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $883$hi = i64toi32_i32$4;
       i64toi32_i32$2 = $2 + -8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $886$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $886$hi;
       $660 = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = __wasm_i64_mul($660 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $888 = i64toi32_i32$4;
       $888$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $883$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $888$hi;
       i64toi32_i32$3 = $888;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $889$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $2 + -4 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $892$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = $892$hi;
       $662 = i64toi32_i32$5;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = __wasm_i64_mul($662 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $894 = i64toi32_i32$5;
       $894$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $889$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $894$hi;
       i64toi32_i32$3 = $894;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $895$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $895$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $596 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
        $596 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
       }
       HEAP32[$849 >> 2] = $854 - $596 | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label5
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     i64toi32_i32$0 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $28 = i64toi32_i32$2;
     $28$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $29 = i64toi32_i32$0;
     $29$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $30 = i64toi32_i32$2;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $31 = i64toi32_i32$0;
     $31$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $32 = i64toi32_i32$2;
     $32$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $33 = i64toi32_i32$0;
     $33$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $34 = i64toi32_i32$2;
     $34$hi = i64toi32_i32$0;
     $4 = 0;
     label6 : while (1) {
      $2 = $4 << 2 | 0;
      $929 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      $934 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = $2 + -28 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $937$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $33$hi;
      i64toi32_i32$2 = $937$hi;
      $663 = i64toi32_i32$0;
      i64toi32_i32$0 = $33$hi;
      i64toi32_i32$0 = __wasm_i64_mul($663 | 0, i64toi32_i32$2 | 0, $33 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $939 = i64toi32_i32$0;
      $939$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2 + -32 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $942$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $34$hi;
      i64toi32_i32$0 = $942$hi;
      $664 = i64toi32_i32$2;
      i64toi32_i32$2 = $34$hi;
      i64toi32_i32$2 = __wasm_i64_mul($664 | 0, i64toi32_i32$0 | 0, $34 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $944 = i64toi32_i32$2;
      $944$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $939$hi;
      i64toi32_i32$1 = $939;
      i64toi32_i32$2 = $944$hi;
      i64toi32_i32$3 = $944;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $945$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $2 + -24 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $948$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $32$hi;
      i64toi32_i32$1 = $948$hi;
      $665 = i64toi32_i32$4;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$4 = __wasm_i64_mul($665 | 0, i64toi32_i32$1 | 0, $32 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $950 = i64toi32_i32$4;
      $950$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $945$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = $950$hi;
      i64toi32_i32$3 = $950;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $951$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $2 + -20 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $954$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$0 = $954$hi;
      $667 = i64toi32_i32$5;
      i64toi32_i32$5 = $31$hi;
      i64toi32_i32$5 = __wasm_i64_mul($667 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $956 = i64toi32_i32$5;
      $956$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $951$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $956$hi;
      i64toi32_i32$3 = $956;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $957$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2 + -16 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $960$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = $960$hi;
      $668 = i64toi32_i32$2;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$2 = __wasm_i64_mul($668 | 0, i64toi32_i32$1 | 0, $30 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $962 = i64toi32_i32$2;
      $962$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $957$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $962$hi;
      i64toi32_i32$3 = $962;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $963$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2 + -12 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $966$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$0 = $966$hi;
      $669 = i64toi32_i32$4;
      i64toi32_i32$4 = $29$hi;
      i64toi32_i32$4 = __wasm_i64_mul($669 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $968 = i64toi32_i32$4;
      $968$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $963$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = $968$hi;
      i64toi32_i32$3 = $968;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $969$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $972$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $28$hi;
      i64toi32_i32$1 = $972$hi;
      $670 = i64toi32_i32$5;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = __wasm_i64_mul($670 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $974 = i64toi32_i32$5;
      $974$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $969$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $974$hi;
      i64toi32_i32$3 = $974;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $975$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2 + -4 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $978$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $978$hi;
      $671 = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = __wasm_i64_mul($671 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $980 = i64toi32_i32$2;
      $980$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $975$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $980$hi;
      i64toi32_i32$3 = $980;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $981$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$4 = $981$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $597 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
       $597 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      HEAP32[$929 >> 2] = $934 - $597 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label6
      }
      break block1;
     };
    }
    block30 : {
     if (($3 | 0) == (6 | 0)) {
      break block30
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     i64toi32_i32$1 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $2;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $25 = i64toi32_i32$1;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $28 = i64toi32_i32$0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $29 = i64toi32_i32$1;
     $29$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $30 = i64toi32_i32$0;
     $30$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $31 = i64toi32_i32$1;
     $31$hi = i64toi32_i32$0;
     $4 = 0;
     label7 : while (1) {
      $2 = $4 << 2 | 0;
      $1011 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      $1016 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$4 = $2 + -16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $1019$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = $1019$hi;
      $673 = i64toi32_i32$0;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$0 = __wasm_i64_mul($673 | 0, i64toi32_i32$1 | 0, $30 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1021 = i64toi32_i32$0;
      $1021$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $2 + -20 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $1024$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$0 = $1024$hi;
      $674 = i64toi32_i32$1;
      i64toi32_i32$1 = $31$hi;
      i64toi32_i32$1 = __wasm_i64_mul($674 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1026 = i64toi32_i32$1;
      $1026$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1021$hi;
      i64toi32_i32$4 = $1021;
      i64toi32_i32$1 = $1026$hi;
      i64toi32_i32$3 = $1026;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1027$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -12 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $1030$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $29$hi;
      i64toi32_i32$4 = $1030$hi;
      $675 = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = __wasm_i64_mul($675 | 0, i64toi32_i32$4 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1032 = i64toi32_i32$5;
      $1032$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1027$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $1032$hi;
      i64toi32_i32$3 = $1032;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1033$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $2 + -8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1036$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = $1036$hi;
      $676 = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$2 = __wasm_i64_mul($676 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1038 = i64toi32_i32$2;
      $1038$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1033$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$2 = $1038$hi;
      i64toi32_i32$3 = $1038;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1039$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -4 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1042$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = $1042$hi;
      $677 = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = __wasm_i64_mul($677 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1044 = i64toi32_i32$1;
      $1044$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1039$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $1044$hi;
      i64toi32_i32$3 = $1044;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1045$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$5 = $1045$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
       $598 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
       $598 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      HEAP32[$1011 >> 2] = $1016 - $598 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label7
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    i64toi32_i32$0 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $25 = i64toi32_i32$0;
    $25$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $28 = i64toi32_i32$4;
    $28$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $29 = i64toi32_i32$0;
    $29$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $30 = i64toi32_i32$4;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $31 = i64toi32_i32$0;
    $31$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $32 = i64toi32_i32$4;
    $32$hi = i64toi32_i32$0;
    $4 = 0;
    label8 : while (1) {
     $2 = $4 << 2 | 0;
     $1075 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     $1080 = HEAP32[$2 >> 2] | 0;
     i64toi32_i32$5 = $2 + -20 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $1083$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $31$hi;
     i64toi32_i32$4 = $1083$hi;
     $679 = i64toi32_i32$0;
     i64toi32_i32$0 = $31$hi;
     i64toi32_i32$0 = __wasm_i64_mul($679 | 0, i64toi32_i32$4 | 0, $31 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $1085 = i64toi32_i32$0;
     $1085$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $2 + -24 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $1088$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $32$hi;
     i64toi32_i32$0 = $1088$hi;
     $680 = i64toi32_i32$4;
     i64toi32_i32$4 = $32$hi;
     i64toi32_i32$4 = __wasm_i64_mul($680 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1090 = i64toi32_i32$4;
     $1090$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1085$hi;
     i64toi32_i32$5 = $1085;
     i64toi32_i32$4 = $1090$hi;
     i64toi32_i32$3 = $1090;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1091$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2 + -16 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $1094$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $30$hi;
     i64toi32_i32$5 = $1094$hi;
     $681 = i64toi32_i32$2;
     i64toi32_i32$2 = $30$hi;
     i64toi32_i32$2 = __wasm_i64_mul($681 | 0, i64toi32_i32$5 | 0, $30 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1096 = i64toi32_i32$2;
     $1096$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1091$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $1096$hi;
     i64toi32_i32$3 = $1096;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1097$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $2 + -12 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $1100$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $29$hi;
     i64toi32_i32$0 = $1100$hi;
     $682 = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$1 = __wasm_i64_mul($682 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1102 = i64toi32_i32$1;
     $1102$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1097$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = $1102$hi;
     i64toi32_i32$3 = $1102;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1103$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $2 + -8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $1106$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$5 = $1106$hi;
     $683 = i64toi32_i32$4;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = __wasm_i64_mul($683 | 0, i64toi32_i32$5 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1108 = i64toi32_i32$4;
     $1108$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1103$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $1108$hi;
     i64toi32_i32$3 = $1108;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1109$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $2 + -4 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $1112$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $1112$hi;
     $685 = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$2 = __wasm_i64_mul($685 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1114 = i64toi32_i32$2;
     $1114$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1109$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $1114$hi;
     i64toi32_i32$3 = $1114;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1115$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$1 = $1115$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $599 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
      $599 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
     }
     HEAP32[$1075 >> 2] = $1080 - $599 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label8
     }
     break block1;
    };
   }
   block31 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break block31
    }
    block32 : {
     if (($3 | 0) == (4 | 0)) {
      break block32
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     i64toi32_i32$5 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $2;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $25 = i64toi32_i32$5;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $28 = i64toi32_i32$0;
     $28$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $29 = i64toi32_i32$5;
     $29$hi = i64toi32_i32$0;
     $4 = 0;
     label9 : while (1) {
      $2 = $4 << 2 | 0;
      $1143 = $5 + $2 | 0;
      $2 = $0 + $2 | 0;
      $1148 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = $2 + -8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1151$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = $1151$hi;
      $686 = i64toi32_i32$0;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = __wasm_i64_mul($686 | 0, i64toi32_i32$5 | 0, $28 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1153 = i64toi32_i32$0;
      $1153$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $2 + -12 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1156$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$0 = $1156$hi;
      $687 = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = __wasm_i64_mul($687 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1158 = i64toi32_i32$5;
      $1158$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1153$hi;
      i64toi32_i32$1 = $1153;
      i64toi32_i32$5 = $1158$hi;
      i64toi32_i32$3 = $1158;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1159$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $2 + -4 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1162$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = $1162$hi;
      $688 = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = __wasm_i64_mul($688 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1164 = i64toi32_i32$4;
      $1164$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1159$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $1164$hi;
      i64toi32_i32$3 = $1164;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1165$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $1165$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $601 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       $601 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[$1143 >> 2] = $1148 - $601 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label9
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    i64toi32_i32$0 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $25 = i64toi32_i32$0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $28 = i64toi32_i32$1;
    $28$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $29 = i64toi32_i32$0;
    $29$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $30 = i64toi32_i32$1;
    $30$hi = i64toi32_i32$0;
    $4 = 0;
    label10 : while (1) {
     $2 = $4 << 2 | 0;
     $1191 = $5 + $2 | 0;
     $2 = $0 + $2 | 0;
     $1196 = HEAP32[$2 >> 2] | 0;
     i64toi32_i32$2 = $2 + -12 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1199$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$1 = $1199$hi;
     $689 = i64toi32_i32$0;
     i64toi32_i32$0 = $29$hi;
     i64toi32_i32$0 = __wasm_i64_mul($689 | 0, i64toi32_i32$1 | 0, $29 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1201 = i64toi32_i32$0;
     $1201$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2 + -16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $1204$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$0 = $1204$hi;
     $691 = i64toi32_i32$1;
     i64toi32_i32$1 = $30$hi;
     i64toi32_i32$1 = __wasm_i64_mul($691 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1206 = i64toi32_i32$1;
     $1206$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1201$hi;
     i64toi32_i32$2 = $1201;
     i64toi32_i32$1 = $1206$hi;
     i64toi32_i32$3 = $1206;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1207$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $2 + -8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $1210$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$2 = $1210$hi;
     $692 = i64toi32_i32$5;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$5 = __wasm_i64_mul($692 | 0, i64toi32_i32$2 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1212 = i64toi32_i32$5;
     $1212$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1207$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $1212$hi;
     i64toi32_i32$3 = $1212;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1213$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $2 + -4 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $1216$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $1216$hi;
     $693 = i64toi32_i32$4;
     i64toi32_i32$4 = $25$hi;
     i64toi32_i32$4 = __wasm_i64_mul($693 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1218 = i64toi32_i32$4;
     $1218$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1213$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$4 = $1218$hi;
     i64toi32_i32$3 = $1218;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1219$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$1 = $1219$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $602 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
      $602 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     HEAP32[$1191 >> 2] = $1196 - $602 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label10
     }
     break block1;
    };
   }
   block33 : {
    if (($3 | 0) == (2 | 0)) {
     break block33
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $7 = $1 & 1 | 0;
    i64toi32_i32$2 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $2;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
    $25 = i64toi32_i32$2;
    $25$hi = i64toi32_i32$0;
    $2 = 0;
    block34 : {
     if (($1 | 0) == (1 | 0)) {
      break block34
     }
     $6 = $1 & 2147483646 | 0;
     $2 = 0;
     $3 = 0;
     label11 : while (1) {
      $4 = $2 << 2 | 0;
      $1247 = $5 + $4 | 0;
      $1 = $0 + $4 | 0;
      $26 = HEAP32[$1 >> 2] | 0;
      $1253 = $26;
      i64toi32_i32$1 = $1 + -4 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1256$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = $1256$hi;
      $694 = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = __wasm_i64_mul($694 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1258$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $1258$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $603 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       $603 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[$1247 >> 2] = $1253 - $603 | 0;
      $4 = $4 | 4 | 0;
      $1267 = $5 + $4 | 0;
      $1271 = HEAP32[($0 + $4 | 0) >> 2] | 0;
      i64toi32_i32$1 = $26;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $1273$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $1273$hi;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = __wasm_i64_mul($26 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1275$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$0 = $1275$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $604 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
       $604 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[$1267 >> 2] = $1271 - $604 | 0;
      $2 = $2 + 2 | 0;
      $3 = $3 + 2 | 0;
      if (($3 | 0) != ($6 | 0)) {
       continue label11
      }
      break label11;
     };
    }
    if (!$7) {
     break block1
    }
    $2 = $2 << 2 | 0;
    $1293 = $5 + $2 | 0;
    $2 = $0 + $2 | 0;
    $1298 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$0 = $2 + -4 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $1301$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $25$hi;
    i64toi32_i32$2 = $1301$hi;
    $695 = i64toi32_i32$1;
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$1 = __wasm_i64_mul($695 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $1303$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $27$hi;
    i64toi32_i32$2 = $1303$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $605 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
     $605 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    HEAP32[$1293 >> 2] = $1298 - $605 | 0;
    return;
   }
   if (($1 | 0) < (1 | 0)) {
    break block1
   }
   $7 = $1 & 1 | 0;
   i64toi32_i32$1 = 0;
   $27 = $4;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $25 = i64toi32_i32$1;
   $25$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $28 = i64toi32_i32$0;
   $28$hi = i64toi32_i32$1;
   $2 = 0;
   block35 : {
    if (($1 | 0) == (1 | 0)) {
     break block35
    }
    $6 = $1 & 2147483646 | 0;
    $2 = 0;
    $1 = 0;
    label12 : while (1) {
     $4 = $2 << 2 | 0;
     $1326 = $5 + $4 | 0;
     $3 = $0 + $4 | 0;
     $26 = HEAP32[$3 >> 2] | 0;
     $1332 = $26;
     i64toi32_i32$2 = $3 + -4 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $29 = i64toi32_i32$1;
     $29$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $29$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($29 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1338 = i64toi32_i32$1;
     $1338$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $3 + -8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1341$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $1341$hi;
     $697 = i64toi32_i32$0;
     i64toi32_i32$0 = $28$hi;
     i64toi32_i32$0 = __wasm_i64_mul($697 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1343 = i64toi32_i32$0;
     $1343$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1338$hi;
     i64toi32_i32$2 = $1338;
     i64toi32_i32$0 = $1343$hi;
     i64toi32_i32$3 = $1343;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = $1344$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $607 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      $607 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     HEAP32[$1326 >> 2] = $1332 - $607 | 0;
     $4 = $4 | 4 | 0;
     $1353 = $5 + $4 | 0;
     $1357 = HEAP32[($0 + $4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $26;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $1359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$2 = $1359$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($26 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1361 = i64toi32_i32$1;
     $1361$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $29$hi;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$2 = $29$hi;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = __wasm_i64_mul($29 | 0, i64toi32_i32$2 | 0, $28 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1364 = i64toi32_i32$1;
     $1364$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1361$hi;
     i64toi32_i32$5 = $1361;
     i64toi32_i32$1 = $1364$hi;
     i64toi32_i32$3 = $1364;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1365$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $27$hi;
     i64toi32_i32$4 = $1365$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $608 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
      $608 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
     }
     HEAP32[$1353 >> 2] = $1357 - $608 | 0;
     $2 = $2 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($6 | 0)) {
      continue label12
     }
     break label12;
    };
   }
   if (!$7) {
    break block1
   }
   $2 = $2 << 2 | 0;
   $1383 = $5 + $2 | 0;
   $2 = $0 + $2 | 0;
   $1388 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$4 = $2 + -4 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $1391$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $25$hi;
   i64toi32_i32$2 = $1391$hi;
   $698 = i64toi32_i32$5;
   i64toi32_i32$5 = $25$hi;
   i64toi32_i32$5 = __wasm_i64_mul($698 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $1393 = i64toi32_i32$5;
   $1393$hi = i64toi32_i32$2;
   i64toi32_i32$4 = $2 + -8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $1396$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $28$hi;
   i64toi32_i32$5 = $1396$hi;
   $699 = i64toi32_i32$2;
   i64toi32_i32$2 = $28$hi;
   i64toi32_i32$2 = __wasm_i64_mul($699 | 0, i64toi32_i32$5 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $1398 = i64toi32_i32$2;
   $1398$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1393$hi;
   i64toi32_i32$4 = $1393;
   i64toi32_i32$2 = $1398$hi;
   i64toi32_i32$3 = $1398;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $1399$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $27$hi;
   i64toi32_i32$0 = $1399$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$4 = $27$hi;
   i64toi32_i32$3 = $27;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $609 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
    $609 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   HEAP32[$1383 >> 2] = $1388 - $609 | 0;
   return;
  }
 }
 
 function FLAC__lpc_restore_signal($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $25 = 0, $45 = 0, $42 = 0, $44 = 0, $43 = 0, $41 = 0, $40 = 0, $39 = 0, $38 = 0, $37 = 0, $36 = 0, $35 = 0, $34 = 0, $33 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0;
  block1 : {
   block : {
    if ($3 >>> 0 < 13 >>> 0) {
     break block
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $6 = $5 + -56 | 0;
    $7 = $5 + -60 | 0;
    $8 = $5 + -64 | 0;
    $9 = $5 + -68 | 0;
    $10 = $5 + -72 | 0;
    $11 = $5 + -76 | 0;
    $12 = $5 + -80 | 0;
    $13 = $5 + -84 | 0;
    $14 = $5 + -88 | 0;
    $15 = $5 + -92 | 0;
    $16 = $5 + -96 | 0;
    $17 = $5 + -100 | 0;
    $18 = $5 + -104 | 0;
    $19 = $5 + -108 | 0;
    $20 = $5 + -112 | 0;
    $21 = $5 + -116 | 0;
    $22 = $5 + -120 | 0;
    $23 = $5 + -124 | 0;
    $24 = $5 + -128 | 0;
    $25 = 0;
    $26 = $3 + -13 | 0;
    label : while (1) {
     $27 = 0;
     $28 = 0;
     $29 = 0;
     $30 = 0;
     $31 = 0;
     $32 = 0;
     $33 = 0;
     $34 = 0;
     $35 = 0;
     $36 = 0;
     $37 = 0;
     $38 = 0;
     $39 = 0;
     $40 = 0;
     $41 = 0;
     $42 = 0;
     $43 = 0;
     $44 = 0;
     $45 = 0;
     $3 = 0;
     block22 : {
      switch ($26 | 0) {
      case 19:
       $27 = Math_imul(HEAP32[($24 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
      case 18:
       $28 = Math_imul(HEAP32[($23 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $27 | 0;
      case 17:
       $29 = Math_imul(HEAP32[($22 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $28 | 0;
      case 16:
       $30 = Math_imul(HEAP32[($21 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $29 | 0;
      case 15:
       $31 = Math_imul(HEAP32[($20 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $30 | 0;
      case 14:
       $32 = Math_imul(HEAP32[($19 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $31 | 0;
      case 13:
       $33 = Math_imul(HEAP32[($18 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $32 | 0;
      case 12:
       $34 = Math_imul(HEAP32[($17 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $33 | 0;
      case 11:
       $35 = Math_imul(HEAP32[($16 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $34 | 0;
      case 10:
       $36 = Math_imul(HEAP32[($15 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $35 | 0;
      case 9:
       $37 = Math_imul(HEAP32[($14 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $36 | 0;
      case 8:
       $38 = Math_imul(HEAP32[($13 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $37 | 0;
      case 7:
       $39 = Math_imul(HEAP32[($12 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $38 | 0;
      case 6:
       $40 = Math_imul(HEAP32[($11 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $39 | 0;
      case 5:
       $41 = Math_imul(HEAP32[($10 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $40 | 0;
      case 4:
       $42 = Math_imul(HEAP32[($9 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $41 | 0;
      case 3:
       $43 = Math_imul(HEAP32[($8 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $42 | 0;
      case 2:
       $44 = Math_imul(HEAP32[($7 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $43 | 0;
      case 1:
       $45 = Math_imul(HEAP32[($6 + ($25 << 2 | 0) | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $44 | 0;
      case 0:
       $3 = $5 + ($25 << 2 | 0) | 0;
       $3 = ((((((((((((Math_imul(HEAP32[($3 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $45 | 0) + Math_imul(HEAP32[($3 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($3 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
       break;
      default:
       break block22;
      };
     }
     $45 = $25 << 2 | 0;
     HEAP32[($5 + $45 | 0) >> 2] = (HEAP32[($0 + $45 | 0) >> 2] | 0) + ($3 >> $4 | 0) | 0;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   block23 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break block23
    }
    block24 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break block24
     }
     block25 : {
      if (($3 | 0) == (12 | 0)) {
       break block25
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $44 = HEAP32[$2 >> 2] | 0;
      $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $37 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $36 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $35 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $34 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $25 = 0;
      label1 : while (1) {
       $45 = $25 << 2 | 0;
       $2 = $5 + $45 | 0;
       $3 = (((((((((((Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $35) + Math_imul(HEAP32[($2 + -44 | 0) >> 2] | 0, $34) | 0) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $36) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
       HEAP32[$2 >> 2] = $3;
       $25 = $25 + 1 | 0;
       if (($25 | 0) != ($1 | 0)) {
        continue label1
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $44 = HEAP32[$2 >> 2] | 0;
     $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $37 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $36 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $35 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $34 = HEAP32[($2 + 40 | 0) >> 2] | 0;
     $33 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     $25 = 0;
     label2 : while (1) {
      $45 = $25 << 2 | 0;
      $2 = $5 + $45 | 0;
      $3 = ((((((((((((Math_imul(HEAP32[($2 + -44 | 0) >> 2] | 0, $34) + Math_imul(HEAP32[($2 + -48 | 0) >> 2] | 0, $33) | 0) + Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $35) | 0) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $36) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
      HEAP32[$2 >> 2] = $3;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label2
      }
      break block1;
     };
    }
    block26 : {
     if (($3 | 0) == (10 | 0)) {
      break block26
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $44 = HEAP32[$2 >> 2] | 0;
     $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $37 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $36 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $25 = 0;
     label3 : while (1) {
      $45 = $25 << 2 | 0;
      $2 = $5 + $45 | 0;
      $3 = (((((((((Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $37) + Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $36) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
      HEAP32[$2 >> 2] = $3;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label3
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $44 = HEAP32[$2 >> 2] | 0;
    $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    $37 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $36 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $35 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $25 = 0;
    label4 : while (1) {
     $45 = $25 << 2 | 0;
     $2 = $5 + $45 | 0;
     $3 = ((((((((((Math_imul(HEAP32[($2 + -36 | 0) >> 2] | 0, $36) + Math_imul(HEAP32[($2 + -40 | 0) >> 2] | 0, $35) | 0) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
     HEAP32[$2 >> 2] = $3;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label4
     }
     break block1;
    };
   }
   block27 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break block27
    }
    block28 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break block28
     }
     block29 : {
      if (($3 | 0) == (8 | 0)) {
       break block29
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $44 = HEAP32[$2 >> 2] | 0;
      $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $25 = 0;
      label5 : while (1) {
       $45 = $25 << 2 | 0;
       $2 = $5 + $45 | 0;
       $3 = (((((((Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) + Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
       HEAP32[$2 >> 2] = $3;
       $25 = $25 + 1 | 0;
       if (($25 | 0) != ($1 | 0)) {
        continue label5
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $44 = HEAP32[$2 >> 2] | 0;
     $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $38 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $37 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $25 = 0;
     label6 : while (1) {
      $45 = $25 << 2 | 0;
      $2 = $5 + $45 | 0;
      $3 = ((((((((Math_imul(HEAP32[($2 + -28 | 0) >> 2] | 0, $38) + Math_imul(HEAP32[($2 + -32 | 0) >> 2] | 0, $37) | 0) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
      HEAP32[$2 >> 2] = $3;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label6
      }
      break block1;
     };
    }
    block30 : {
     if (($3 | 0) == (6 | 0)) {
      break block30
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $44 = HEAP32[$2 >> 2] | 0;
     $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $25 = 0;
     label7 : while (1) {
      $45 = $25 << 2 | 0;
      $2 = $5 + $45 | 0;
      $3 = (((((Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) + Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
      HEAP32[$2 >> 2] = $3;
      $25 = $25 + 1 | 0;
      if (($25 | 0) != ($1 | 0)) {
       continue label7
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $44 = HEAP32[$2 >> 2] | 0;
    $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $40 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $39 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $25 = 0;
    label8 : while (1) {
     $45 = $25 << 2 | 0;
     $2 = $5 + $45 | 0;
     $3 = ((((((Math_imul(HEAP32[($2 + -20 | 0) >> 2] | 0, $40) + Math_imul(HEAP32[($2 + -24 | 0) >> 2] | 0, $39) | 0) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
     HEAP32[$2 >> 2] = $3;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label8
     }
     break block1;
    };
   }
   block31 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break block31
    }
    block32 : {
     if (($3 | 0) == (4 | 0)) {
      break block32
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $44 = HEAP32[$2 >> 2] | 0;
     $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $2 = 0;
     label9 : while (1) {
      $45 = $2 << 2 | 0;
      $25 = $5 + $45 | 0;
      $3 = (((Math_imul(HEAP32[($25 + -8 | 0) >> 2] | 0, $43) + Math_imul(HEAP32[($25 + -12 | 0) >> 2] | 0, $42) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
      HEAP32[$25 >> 2] = $3;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label9
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $44 = HEAP32[$2 >> 2] | 0;
    $43 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $42 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $41 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $25 = 0;
    label10 : while (1) {
     $45 = $25 << 2 | 0;
     $2 = $5 + $45 | 0;
     $3 = ((((Math_imul(HEAP32[($2 + -12 | 0) >> 2] | 0, $42) + Math_imul(HEAP32[($2 + -16 | 0) >> 2] | 0, $41) | 0) + Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, $43) | 0) + Math_imul($3, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $45 | 0) >> 2] | 0) | 0;
     HEAP32[$2 >> 2] = $3;
     $25 = $25 + 1 | 0;
     if (($25 | 0) != ($1 | 0)) {
      continue label10
     }
     break block1;
    };
   }
   block33 : {
    if (($3 | 0) == (2 | 0)) {
     break block33
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $42 = $1 & 1 | 0;
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $45 = HEAP32[$2 >> 2] | 0;
    $2 = 0;
    block34 : {
     if (($1 | 0) == (1 | 0)) {
      break block34
     }
     $43 = $1 & 2147483646 | 0;
     $2 = 0;
     $44 = 0;
     label11 : while (1) {
      $25 = $2 << 2 | 0;
      $3 = (Math_imul($3, $45) >> $4 | 0) + (HEAP32[($0 + $25 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $25 | 0) >> 2] = $3;
      $25 = $25 | 4 | 0;
      $3 = (Math_imul($3, $45) >> $4 | 0) + (HEAP32[($0 + $25 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $25 | 0) >> 2] = $3;
      $2 = $2 + 2 | 0;
      $44 = $44 + 2 | 0;
      if (($44 | 0) != ($43 | 0)) {
       continue label11
      }
      break label11;
     };
    }
    if (!$42) {
     break block1
    }
    $2 = $2 << 2 | 0;
    HEAP32[($5 + $2 | 0) >> 2] = (Math_imul($3, $45) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
    return;
   }
   if (($1 | 0) < (1 | 0)) {
    break block1
   }
   $40 = $1 & 1 | 0;
   $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
   $45 = HEAP32[$2 >> 2] | 0;
   $44 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $2 = 0;
   block35 : {
    if (($1 | 0) == (1 | 0)) {
     break block35
    }
    $41 = $1 & 2147483646 | 0;
    $2 = 0;
    $43 = 0;
    label12 : while (1) {
     $25 = $2 << 2 | 0;
     $42 = $5 + $25 | 0;
     $3 = ((Math_imul($3, $45) + Math_imul(HEAP32[($42 + -8 | 0) >> 2] | 0, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $25 | 0) >> 2] | 0) | 0;
     HEAP32[$42 >> 2] = $3;
     $25 = $25 | 4 | 0;
     $42 = $5 + $25 | 0;
     $3 = ((Math_imul($3, $45) + Math_imul(HEAP32[($42 + -8 | 0) >> 2] | 0, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $25 | 0) >> 2] | 0) | 0;
     HEAP32[$42 >> 2] = $3;
     $2 = $2 + 2 | 0;
     $43 = $43 + 2 | 0;
     if (($43 | 0) != ($41 | 0)) {
      continue label12
     }
     break label12;
    };
   }
   if (!$40) {
    break block1
   }
   $2 = $2 << 2 | 0;
   $25 = $5 + $2 | 0;
   HEAP32[$25 >> 2] = ((Math_imul($3, $45) + Math_imul(HEAP32[($25 + -8 | 0) >> 2] | 0, $44) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
   return;
  }
 }
 
 function FLAC__lpc_restore_signal_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $27$hi = 0, $27 = 0, $25$hi = 0, $26 = 0, $28$hi = 0, $25 = 0, $29$hi = 0, $30$hi = 0, $28 = 0, $31$hi = 0, $32$hi = 0, $29 = 0, $30 = 0, $33$hi = 0, $31 = 0, $34$hi = 0, $32 = 0, $33 = 0, $35$hi = 0, $34 = 0, $36$hi = 0, $35 = 0, $6 = 0, $36 = 0, $37$hi = 0, $7 = 0, $37 = 0, $592 = 0, $593 = 0, $38$hi = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $90 = 0, $90$hi = 0, $92 = 0, $92$hi = 0, $98 = 0, $98$hi = 0, $100 = 0, $100$hi = 0, $101$hi = 0, $108 = 0, $108$hi = 0, $110 = 0, $110$hi = 0, $111$hi = 0, $118 = 0, $118$hi = 0, $120 = 0, $120$hi = 0, $121$hi = 0, $128 = 0, $128$hi = 0, $130 = 0, $130$hi = 0, $131$hi = 0, $138 = 0, $138$hi = 0, $140 = 0, $140$hi = 0, $141$hi = 0, $148 = 0, $148$hi = 0, $150 = 0, $150$hi = 0, $151$hi = 0, $158 = 0, $158$hi = 0, $160 = 0, $160$hi = 0, $161$hi = 0, $168 = 0, $168$hi = 0, $170 = 0, $170$hi = 0, $171$hi = 0, $178 = 0, $178$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $188 = 0, $188$hi = 0, $190 = 0, $190$hi = 0, $191$hi = 0, $198 = 0, $198$hi = 0, $200 = 0, $200$hi = 0, $201$hi = 0, $208 = 0, $208$hi = 0, $210 = 0, $210$hi = 0, $211$hi = 0, $218 = 0, $218$hi = 0, $220 = 0, $220$hi = 0, $221$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $231$hi = 0, $238 = 0, $238$hi = 0, $240 = 0, $240$hi = 0, $241$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $250$hi = 0, $251$hi = 0, $258 = 0, $258$hi = 0, $260 = 0, $260$hi = 0, $261$hi = 0, $268 = 0, $268$hi = 0, $270 = 0, $270$hi = 0, $271$hi = 0, $280 = 0, $280$hi = 0, $282 = 0, $282$hi = 0, $283$hi = 0, $285$hi = 0, $288 = 0, $288$hi = 0, $290 = 0, $290$hi = 0, $291 = 0, $291$hi = 0, $292$hi = 0, $295 = 0, $295$hi = 0, $297 = 0, $297$hi = 0, $298 = 0, $298$hi = 0, $299$hi = 0, $302 = 0, $302$hi = 0, $304 = 0, $304$hi = 0, $305 = 0, $305$hi = 0, $306$hi = 0, $309 = 0, $309$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $313$hi = 0, $316 = 0, $316$hi = 0, $318 = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320$hi = 0, $323 = 0, $323$hi = 0, $325 = 0, $325$hi = 0, $326 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $333 = 0, $333$hi = 0, $334$hi = 0, $337 = 0, $337$hi = 0, $339 = 0, $339$hi = 0, $340 = 0, $340$hi = 0, $341$hi = 0, $344 = 0, $344$hi = 0, $346 = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348$hi = 0, $351 = 0, $351$hi = 0, $353 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $361 = 0, $361$hi = 0, $362$hi = 0, $365 = 0, $365$hi = 0, $367 = 0, $367$hi = 0, $368 = 0, $368$hi = 0, $374 = 0, $378 = 0, $429 = 0, $433 = 0, $436$hi = 0, $613 = 0, $438 = 0, $438$hi = 0, $441$hi = 0, $614 = 0, $443 = 0, $443$hi = 0, $444$hi = 0, $447$hi = 0, $615 = 0, $449 = 0, $449$hi = 0, $450$hi = 0, $453$hi = 0, $616 = 0, $455 = 0, $455$hi = 0, $456$hi = 0, $459$hi = 0, $618 = 0, $461 = 0, $461$hi = 0, $462$hi = 0, $465$hi = 0, $619 = 0, $467 = 0, $467$hi = 0, $468$hi = 0, $471$hi = 0, $620 = 0, $473 = 0, $473$hi = 0, $474$hi = 0, $477$hi = 0, $621 = 0, $479 = 0, $479$hi = 0, $480$hi = 0, $483$hi = 0, $622 = 0, $485 = 0, $485$hi = 0, $486$hi = 0, $489$hi = 0, $623 = 0, $491 = 0, $491$hi = 0, $492$hi = 0, $494$hi = 0, $496 = 0, $496$hi = 0, $497$hi = 0, $38 = 0, $544 = 0, $548 = 0, $551$hi = 0, $624 = 0, $553 = 0, $553$hi = 0, $556$hi = 0, $625 = 0, $558 = 0, $558$hi = 0, $559$hi = 0, $562$hi = 0, $626 = 0, $564 = 0, $564$hi = 0, $565$hi = 0, $568$hi = 0, $627 = 0, $570 = 0, $570$hi = 0, $571$hi = 0, $574$hi = 0, $628 = 0, $576 = 0, $576$hi = 0, $577$hi = 0, $580$hi = 0, $629 = 0, $582 = 0, $582$hi = 0, $583$hi = 0, $586$hi = 0, $630 = 0, $588 = 0, $588$hi = 0, $589$hi = 0, $592$hi = 0, $631 = 0, $594 = 0, $594$hi = 0, $595$hi = 0, $598$hi = 0, $632 = 0, $600 = 0, $600$hi = 0, $601$hi = 0, $604$hi = 0, $633 = 0, $606 = 0, $606$hi = 0, $607$hi = 0, $610$hi = 0, $634 = 0, $612 = 0, $612$hi = 0, $613$hi = 0, $615$hi = 0, $617 = 0, $617$hi = 0, $618$hi = 0, $661 = 0, $665 = 0, $668$hi = 0, $635 = 0, $670 = 0, $670$hi = 0, $673$hi = 0, $636 = 0, $675 = 0, $675$hi = 0, $676$hi = 0, $679$hi = 0, $637 = 0, $681 = 0, $681$hi = 0, $682$hi = 0, $685$hi = 0, $638 = 0, $687 = 0, $687$hi = 0, $688$hi = 0, $691$hi = 0, $639 = 0, $693 = 0, $693$hi = 0, $694$hi = 0, $697$hi = 0, $640 = 0, $699 = 0, $699$hi = 0, $700$hi = 0, $703$hi = 0, $641 = 0, $705 = 0, $705$hi = 0, $706$hi = 0, $709$hi = 0, $642 = 0, $711 = 0, $711$hi = 0, $712$hi = 0, $714$hi = 0, $716 = 0, $716$hi = 0, $717$hi = 0, $760 = 0, $764 = 0, $767$hi = 0, $643 = 0, $769 = 0, $769$hi = 0, $772$hi = 0, $644 = 0, $774 = 0, $774$hi = 0, $775$hi = 0, $778$hi = 0, $645 = 0, $780 = 0, $780$hi = 0, $781$hi = 0, $784$hi = 0, $646 = 0, $786 = 0, $786$hi = 0, $787$hi = 0, $790$hi = 0, $647 = 0, $792 = 0, $792$hi = 0, $793$hi = 0, $796$hi = 0, $648 = 0, $798 = 0, $798$hi = 0, $799$hi = 0, $802$hi = 0, $649 = 0, $804 = 0, $804$hi = 0, $805$hi = 0, $808$hi = 0, $650 = 0, $810 = 0, $810$hi = 0, $811$hi = 0, $814$hi = 0, $651 = 0, $816 = 0, $816$hi = 0, $817$hi = 0, $819$hi = 0, $821 = 0, $821$hi = 0, $822$hi = 0, $865 = 0, $869 = 0, $872$hi = 0, $652 = 0, $874 = 0, $874$hi = 0, $877$hi = 0, $653 = 0, $879 = 0, $879$hi = 0, $880$hi = 0, $883$hi = 0, $654 = 0, $885 = 0, $885$hi = 0, $886$hi = 0, $889$hi = 0, $655 = 0, $891 = 0, $891$hi = 0, $892$hi = 0, $895$hi = 0, $656 = 0, $897 = 0, $897$hi = 0, $898$hi = 0, $901$hi = 0, $657 = 0, $903 = 0, $903$hi = 0, $904$hi = 0, $906$hi = 0, $908 = 0, $908$hi = 0, $909$hi = 0, $948 = 0, $952 = 0, $955$hi = 0, $658 = 0, $957 = 0, $957$hi = 0, $960$hi = 0, $659 = 0, $962 = 0, $962$hi = 0, $963$hi = 0, $966$hi = 0, $660 = 0, $968 = 0, $968$hi = 0, $969$hi = 0, $972$hi = 0, $662 = 0, $974 = 0, $974$hi = 0, $975$hi = 0, $978$hi = 0, $663 = 0, $980 = 0, $980$hi = 0, $981$hi = 0, $984$hi = 0, $664 = 0, $986 = 0, $986$hi = 0, $987$hi = 0, $990$hi = 0, $666 = 0, $992 = 0, $992$hi = 0, $993$hi = 0, $995$hi = 0, $997 = 0, $997$hi = 0, $998$hi = 0, $1033 = 0, $1037 = 0, $1040$hi = 0, $667 = 0, $1042 = 0, $1042$hi = 0, $1045$hi = 0, $668 = 0, $1047 = 0, $1047$hi = 0, $1048$hi = 0, $1051$hi = 0, $669 = 0, $1053 = 0, $1053$hi = 0, $1054$hi = 0, $1057$hi = 0, $671 = 0, $1059 = 0, $1059$hi = 0, $1060$hi = 0, $1062$hi = 0, $1064 = 0, $1064$hi = 0, $1065$hi = 0, $1100 = 0, $1104 = 0, $1107$hi = 0, $672 = 0, $1109 = 0, $1109$hi = 0, $1112$hi = 0, $673 = 0, $1114 = 0, $1114$hi = 0, $1115$hi = 0, $1118$hi = 0, $674 = 0, $1120 = 0, $1120$hi = 0, $1121$hi = 0, $1124$hi = 0, $676 = 0, $1126 = 0, $1126$hi = 0, $1127$hi = 0, $1130$hi = 0, $677 = 0, $1132 = 0, $1132$hi = 0, $1133$hi = 0, $1135$hi = 0, $1137 = 0, $1137$hi = 0, $1138$hi = 0, $1171 = 0, $1175 = 0, $1178$hi = 0, $678 = 0, $1180 = 0, $1180$hi = 0, $1183$hi = 0, $679 = 0, $1185 = 0, $1185$hi = 0, $1186$hi = 0, $1188$hi = 0, $1190 = 0, $1190$hi = 0, $1191$hi = 0, $1222 = 0, $1226 = 0, $1229$hi = 0, $680 = 0, $1231 = 0, $1231$hi = 0, $1234$hi = 0, $682 = 0, $1236 = 0, $1236$hi = 0, $1237$hi = 0, $1240$hi = 0, $683 = 0, $1242 = 0, $1242$hi = 0, $1243$hi = 0, $1245$hi = 0, $1247 = 0, $1247$hi = 0, $1248$hi = 0, $1280 = 0, $1284 = 0, $1286$hi = 0, $1288$hi = 0, $1298 = 0, $1302 = 0, $1304$hi = 0, $1306$hi = 0, $1325 = 0, $1329 = 0, $1331$hi = 0, $1333$hi = 0, $1360 = 0, $1364 = 0, $1366$hi = 0, $1368 = 0, $1368$hi = 0, $1371$hi = 0, $684 = 0, $1373 = 0, $1373$hi = 0, $1374$hi = 0, $1385 = 0, $1389 = 0, $1391$hi = 0, $1393 = 0, $1393$hi = 0, $1396$hi = 0, $685 = 0, $1398 = 0, $1398$hi = 0, $1399$hi = 0, $1419 = 0, $1423 = 0, $1425$hi = 0, $1427 = 0, $1427$hi = 0, $1430$hi = 0, $686 = 0, $1432 = 0, $1432$hi = 0, $1433$hi = 0;
  block1 : {
   block : {
    if ($3 >>> 0 < 13 >>> 0) {
     break block
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $6 = $5 + -56 | 0;
    $7 = $5 + -60 | 0;
    $8 = $5 + -64 | 0;
    $9 = $5 + -68 | 0;
    $10 = $5 + -72 | 0;
    $11 = $5 + -76 | 0;
    $12 = $5 + -80 | 0;
    $13 = $5 + -84 | 0;
    $14 = $5 + -88 | 0;
    $15 = $5 + -92 | 0;
    $16 = $5 + -96 | 0;
    $17 = $5 + -100 | 0;
    $18 = $5 + -104 | 0;
    $19 = $5 + -108 | 0;
    $20 = $5 + -112 | 0;
    $21 = $5 + -116 | 0;
    $22 = $5 + -120 | 0;
    $23 = $5 + -124 | 0;
    $24 = $5 + -128 | 0;
    i64toi32_i32$0 = 0;
    $25 = $4;
    $25$hi = i64toi32_i32$0;
    $4 = 0;
    $26 = $3 + -13 | 0;
    label : while (1) {
     i64toi32_i32$0 = 0;
     $27 = 0;
     $27$hi = i64toi32_i32$0;
     block22 : {
      switch ($26 | 0) {
      case 19:
       i64toi32_i32$2 = $24 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $90 = i64toi32_i32$0;
       $90$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $92 = i64toi32_i32$1;
       $92$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $90$hi;
       i64toi32_i32$1 = $92$hi;
       i64toi32_i32$1 = __wasm_i64_mul($90 | 0, i64toi32_i32$0 | 0, $92 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$0;
      case 18:
       i64toi32_i32$2 = $23 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $98 = i64toi32_i32$0;
       $98$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $100 = i64toi32_i32$1;
       $100$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $98$hi;
       i64toi32_i32$1 = $100$hi;
       i64toi32_i32$1 = __wasm_i64_mul($98 | 0, i64toi32_i32$0 | 0, $100 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $101$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $101$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 17:
       i64toi32_i32$0 = $22 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $108 = i64toi32_i32$5;
       $108$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $110 = i64toi32_i32$2;
       $110$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $108$hi;
       i64toi32_i32$2 = $110$hi;
       i64toi32_i32$2 = __wasm_i64_mul($108 | 0, i64toi32_i32$5 | 0, $110 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $111$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $111$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 16:
       i64toi32_i32$5 = $21 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $118 = i64toi32_i32$4;
       $118$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $120 = i64toi32_i32$0;
       $120$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $118$hi;
       i64toi32_i32$0 = $120$hi;
       i64toi32_i32$0 = __wasm_i64_mul($118 | 0, i64toi32_i32$4 | 0, $120 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $121$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $121$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 15:
       i64toi32_i32$4 = $20 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $128 = i64toi32_i32$1;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $130 = i64toi32_i32$5;
       $130$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $128$hi;
       i64toi32_i32$5 = $130$hi;
       i64toi32_i32$5 = __wasm_i64_mul($128 | 0, i64toi32_i32$1 | 0, $130 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $131$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $131$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 14:
       i64toi32_i32$1 = $19 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $138 = i64toi32_i32$2;
       $138$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $140 = i64toi32_i32$4;
       $140$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $138$hi;
       i64toi32_i32$4 = $140$hi;
       i64toi32_i32$4 = __wasm_i64_mul($138 | 0, i64toi32_i32$2 | 0, $140 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $141$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $141$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 13:
       i64toi32_i32$2 = $18 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $148 = i64toi32_i32$0;
       $148$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $150 = i64toi32_i32$1;
       $150$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $148$hi;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$1 = __wasm_i64_mul($148 | 0, i64toi32_i32$0 | 0, $150 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $151$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $151$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 12:
       i64toi32_i32$0 = $17 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $158 = i64toi32_i32$5;
       $158$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $160 = i64toi32_i32$2;
       $160$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $158$hi;
       i64toi32_i32$2 = $160$hi;
       i64toi32_i32$2 = __wasm_i64_mul($158 | 0, i64toi32_i32$5 | 0, $160 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $161$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $161$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 11:
       i64toi32_i32$5 = $16 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $168 = i64toi32_i32$4;
       $168$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 92 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $170 = i64toi32_i32$0;
       $170$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $168$hi;
       i64toi32_i32$0 = $170$hi;
       i64toi32_i32$0 = __wasm_i64_mul($168 | 0, i64toi32_i32$4 | 0, $170 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $171$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $171$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 10:
       i64toi32_i32$4 = $15 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $178 = i64toi32_i32$1;
       $178$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $180 = i64toi32_i32$5;
       $180$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $178$hi;
       i64toi32_i32$5 = $180$hi;
       i64toi32_i32$5 = __wasm_i64_mul($178 | 0, i64toi32_i32$1 | 0, $180 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $181$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $181$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 9:
       i64toi32_i32$1 = $14 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $188 = i64toi32_i32$2;
       $188$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $190 = i64toi32_i32$4;
       $190$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $188$hi;
       i64toi32_i32$4 = $190$hi;
       i64toi32_i32$4 = __wasm_i64_mul($188 | 0, i64toi32_i32$2 | 0, $190 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $191$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $191$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 8:
       i64toi32_i32$2 = $13 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $198 = i64toi32_i32$0;
       $198$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $200 = i64toi32_i32$1;
       $200$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $198$hi;
       i64toi32_i32$1 = $200$hi;
       i64toi32_i32$1 = __wasm_i64_mul($198 | 0, i64toi32_i32$0 | 0, $200 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $201$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $201$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 7:
       i64toi32_i32$0 = $12 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $208 = i64toi32_i32$5;
       $208$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $210 = i64toi32_i32$2;
       $210$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $208$hi;
       i64toi32_i32$2 = $210$hi;
       i64toi32_i32$2 = __wasm_i64_mul($208 | 0, i64toi32_i32$5 | 0, $210 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $211$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $211$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 6:
       i64toi32_i32$5 = $11 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $218 = i64toi32_i32$4;
       $218$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $220 = i64toi32_i32$0;
       $220$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $218$hi;
       i64toi32_i32$0 = $220$hi;
       i64toi32_i32$0 = __wasm_i64_mul($218 | 0, i64toi32_i32$4 | 0, $220 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $221$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $221$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 5:
       i64toi32_i32$4 = $10 + ($4 << 2 | 0) | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $228 = i64toi32_i32$1;
       $228$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 68 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $230 = i64toi32_i32$5;
       $230$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $228$hi;
       i64toi32_i32$5 = $230$hi;
       i64toi32_i32$5 = __wasm_i64_mul($228 | 0, i64toi32_i32$1 | 0, $230 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $231$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $231$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$2;
      case 4:
       i64toi32_i32$1 = $9 + ($4 << 2 | 0) | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $238 = i64toi32_i32$2;
       $238$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $240 = i64toi32_i32$4;
       $240$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $238$hi;
       i64toi32_i32$4 = $240$hi;
       i64toi32_i32$4 = __wasm_i64_mul($238 | 0, i64toi32_i32$2 | 0, $240 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $241$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $241$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $27 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$0;
      case 3:
       i64toi32_i32$2 = $8 + ($4 << 2 | 0) | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $248 = i64toi32_i32$0;
       $248$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $250 = i64toi32_i32$1;
       $250$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $248$hi;
       i64toi32_i32$1 = $250$hi;
       i64toi32_i32$1 = __wasm_i64_mul($248 | 0, i64toi32_i32$0 | 0, $250 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $251$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $251$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
      case 2:
       i64toi32_i32$0 = $7 + ($4 << 2 | 0) | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $258 = i64toi32_i32$5;
       $258$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $260 = i64toi32_i32$2;
       $260$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $258$hi;
       i64toi32_i32$2 = $260$hi;
       i64toi32_i32$2 = __wasm_i64_mul($258 | 0, i64toi32_i32$5 | 0, $260 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $261$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$5 = $261$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$4;
      case 1:
       i64toi32_i32$5 = $6 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $268 = i64toi32_i32$4;
       $268$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $270 = i64toi32_i32$0;
       $270$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $268$hi;
       i64toi32_i32$0 = $270$hi;
       i64toi32_i32$0 = __wasm_i64_mul($268 | 0, i64toi32_i32$4 | 0, $270 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $271$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $271$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $27 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$1;
      case 0:
       $3 = $5 + ($4 << 2 | 0) | 0;
       i64toi32_i32$4 = $3 + -52 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $280 = i64toi32_i32$1;
       $280$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $282 = i64toi32_i32$5;
       $282$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $280$hi;
       i64toi32_i32$5 = $282$hi;
       i64toi32_i32$5 = __wasm_i64_mul($280 | 0, i64toi32_i32$1 | 0, $282 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $283$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $283$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $285$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -48 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $288 = i64toi32_i32$2;
       $288$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $290 = i64toi32_i32$4;
       $290$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $288$hi;
       i64toi32_i32$4 = $290$hi;
       i64toi32_i32$4 = __wasm_i64_mul($288 | 0, i64toi32_i32$2 | 0, $290 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $291 = i64toi32_i32$4;
       $291$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $285$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $291$hi;
       i64toi32_i32$3 = $291;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $292$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -44 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $295 = i64toi32_i32$0;
       $295$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $297 = i64toi32_i32$1;
       $297$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $295$hi;
       i64toi32_i32$1 = $297$hi;
       i64toi32_i32$1 = __wasm_i64_mul($295 | 0, i64toi32_i32$0 | 0, $297 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $298 = i64toi32_i32$1;
       $298$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $292$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $298$hi;
       i64toi32_i32$3 = $298;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $299$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $3 + -40 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $302 = i64toi32_i32$5;
       $302$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $304 = i64toi32_i32$2;
       $304$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $302$hi;
       i64toi32_i32$2 = $304$hi;
       i64toi32_i32$2 = __wasm_i64_mul($302 | 0, i64toi32_i32$5 | 0, $304 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $305 = i64toi32_i32$2;
       $305$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $299$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $305$hi;
       i64toi32_i32$3 = $305;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $306$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3 + -36 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $309 = i64toi32_i32$4;
       $309$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $311 = i64toi32_i32$0;
       $311$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $309$hi;
       i64toi32_i32$0 = $311$hi;
       i64toi32_i32$0 = __wasm_i64_mul($309 | 0, i64toi32_i32$4 | 0, $311 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $312 = i64toi32_i32$0;
       $312$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $306$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $312$hi;
       i64toi32_i32$3 = $312;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $313$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $3 + -32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $316 = i64toi32_i32$1;
       $316$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $318 = i64toi32_i32$5;
       $318$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $316$hi;
       i64toi32_i32$5 = $318$hi;
       i64toi32_i32$5 = __wasm_i64_mul($316 | 0, i64toi32_i32$1 | 0, $318 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $319 = i64toi32_i32$5;
       $319$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $313$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$5 = $319$hi;
       i64toi32_i32$3 = $319;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $320$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -28 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $323 = i64toi32_i32$2;
       $323$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $325 = i64toi32_i32$4;
       $325$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $323$hi;
       i64toi32_i32$4 = $325$hi;
       i64toi32_i32$4 = __wasm_i64_mul($323 | 0, i64toi32_i32$2 | 0, $325 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $326 = i64toi32_i32$4;
       $326$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $320$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $326$hi;
       i64toi32_i32$3 = $326;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $330 = i64toi32_i32$0;
       $330$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $332 = i64toi32_i32$1;
       $332$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $330$hi;
       i64toi32_i32$1 = $332$hi;
       i64toi32_i32$1 = __wasm_i64_mul($330 | 0, i64toi32_i32$0 | 0, $332 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $333 = i64toi32_i32$1;
       $333$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $327$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $333$hi;
       i64toi32_i32$3 = $333;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $334$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $3 + -20 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $337 = i64toi32_i32$5;
       $337$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $339 = i64toi32_i32$2;
       $339$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $337$hi;
       i64toi32_i32$2 = $339$hi;
       i64toi32_i32$2 = __wasm_i64_mul($337 | 0, i64toi32_i32$5 | 0, $339 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $340 = i64toi32_i32$2;
       $340$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $334$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $340$hi;
       i64toi32_i32$3 = $340;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $341$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3 + -16 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $344 = i64toi32_i32$4;
       $344$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $346 = i64toi32_i32$0;
       $346$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $344$hi;
       i64toi32_i32$0 = $346$hi;
       i64toi32_i32$0 = __wasm_i64_mul($344 | 0, i64toi32_i32$4 | 0, $346 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $347 = i64toi32_i32$0;
       $347$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $341$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $347$hi;
       i64toi32_i32$3 = $347;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $348$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $3 + -12 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $351 = i64toi32_i32$1;
       $351$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $2;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $353 = i64toi32_i32$5;
       $353$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $351$hi;
       i64toi32_i32$5 = $353$hi;
       i64toi32_i32$5 = __wasm_i64_mul($351 | 0, i64toi32_i32$1 | 0, $353 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $354 = i64toi32_i32$5;
       $354$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $348$hi;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$5 = $354$hi;
       i64toi32_i32$3 = $354;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $355$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $3 + -8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $358 = i64toi32_i32$2;
       $358$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $360 = i64toi32_i32$4;
       $360$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $358$hi;
       i64toi32_i32$4 = $360$hi;
       i64toi32_i32$4 = __wasm_i64_mul($358 | 0, i64toi32_i32$2 | 0, $360 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $361 = i64toi32_i32$4;
       $361$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $355$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $361$hi;
       i64toi32_i32$3 = $361;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $362$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3 + -4 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $365 = i64toi32_i32$0;
       $365$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $367 = i64toi32_i32$1;
       $367$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $365$hi;
       i64toi32_i32$1 = $367$hi;
       i64toi32_i32$1 = __wasm_i64_mul($365 | 0, i64toi32_i32$0 | 0, $367 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $368 = i64toi32_i32$1;
       $368$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $362$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $368$hi;
       i64toi32_i32$3 = $368;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27 = i64toi32_i32$4;
       $27$hi = i64toi32_i32$5;
       break;
      default:
       break block22;
      };
     }
     $3 = $4 << 2 | 0;
     $374 = $5 + $3 | 0;
     $378 = HEAP32[($0 + $3 | 0) >> 2] | 0;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$0 = $27;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$3 = $25;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $592 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
      $592 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     HEAP32[$374 >> 2] = $378 + $592 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   block23 : {
    if ($3 >>> 0 < 9 >>> 0) {
     break block23
    }
    block24 : {
     if ($3 >>> 0 < 11 >>> 0) {
      break block24
     }
     block25 : {
      if (($3 | 0) == (12 | 0)) {
       break block25
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $27 = $4;
      $27$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $28 = i64toi32_i32$0;
      $28$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $29 = i64toi32_i32$2;
      $29$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $30 = i64toi32_i32$0;
      $30$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $31 = i64toi32_i32$2;
      $31$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $32 = i64toi32_i32$0;
      $32$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $33 = i64toi32_i32$2;
      $33$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $34 = i64toi32_i32$0;
      $34$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $35 = i64toi32_i32$2;
      $35$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $36 = i64toi32_i32$0;
      $36$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $37 = i64toi32_i32$2;
      $37$hi = i64toi32_i32$0;
      $4 = 0;
      label1 : while (1) {
       $26 = $4 << 2 | 0;
       $2 = $5 + $26 | 0;
       $429 = $2;
       $433 = HEAP32[($0 + $26 | 0) >> 2] | 0;
       i64toi32_i32$5 = $2 + -40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $436$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $36$hi;
       i64toi32_i32$2 = $436$hi;
       $613 = i64toi32_i32$0;
       i64toi32_i32$0 = $36$hi;
       i64toi32_i32$0 = __wasm_i64_mul($613 | 0, i64toi32_i32$2 | 0, $36 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $438 = i64toi32_i32$0;
       $438$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $2 + -44 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $441$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $37$hi;
       i64toi32_i32$0 = $441$hi;
       $614 = i64toi32_i32$2;
       i64toi32_i32$2 = $37$hi;
       i64toi32_i32$2 = __wasm_i64_mul($614 | 0, i64toi32_i32$0 | 0, $37 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $443 = i64toi32_i32$2;
       $443$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $438$hi;
       i64toi32_i32$5 = $438;
       i64toi32_i32$2 = $443$hi;
       i64toi32_i32$3 = $443;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $444$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $2 + -36 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $447$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $35$hi;
       i64toi32_i32$5 = $447$hi;
       $615 = i64toi32_i32$4;
       i64toi32_i32$4 = $35$hi;
       i64toi32_i32$4 = __wasm_i64_mul($615 | 0, i64toi32_i32$5 | 0, $35 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $449 = i64toi32_i32$4;
       $449$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $444$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$4 = $449$hi;
       i64toi32_i32$3 = $449;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $450$hi = i64toi32_i32$1;
       i64toi32_i32$5 = $2 + -32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $453$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$0 = $453$hi;
       $616 = i64toi32_i32$1;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$1 = __wasm_i64_mul($616 | 0, i64toi32_i32$0 | 0, $34 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $455 = i64toi32_i32$1;
       $455$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $450$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $455$hi;
       i64toi32_i32$3 = $455;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $456$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $2 + -28 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $459$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $33$hi;
       i64toi32_i32$5 = $459$hi;
       $618 = i64toi32_i32$2;
       i64toi32_i32$2 = $33$hi;
       i64toi32_i32$2 = __wasm_i64_mul($618 | 0, i64toi32_i32$5 | 0, $33 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $461 = i64toi32_i32$2;
       $461$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $456$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $461$hi;
       i64toi32_i32$3 = $461;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $462$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $2 + -24 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $465$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $465$hi;
       $619 = i64toi32_i32$4;
       i64toi32_i32$4 = $32$hi;
       i64toi32_i32$4 = __wasm_i64_mul($619 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $467 = i64toi32_i32$4;
       $467$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $462$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$4 = $467$hi;
       i64toi32_i32$3 = $467;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $468$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2 + -20 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $471$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $31$hi;
       i64toi32_i32$5 = $471$hi;
       $620 = i64toi32_i32$1;
       i64toi32_i32$1 = $31$hi;
       i64toi32_i32$1 = __wasm_i64_mul($620 | 0, i64toi32_i32$5 | 0, $31 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $473 = i64toi32_i32$1;
       $473$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $468$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$1 = $473$hi;
       i64toi32_i32$3 = $473;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $474$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $2 + -16 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $477$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = $477$hi;
       $621 = i64toi32_i32$2;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = __wasm_i64_mul($621 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $479 = i64toi32_i32$2;
       $479$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $474$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$2 = $479$hi;
       i64toi32_i32$3 = $479;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $480$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $2 + -12 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $483$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $29$hi;
       i64toi32_i32$5 = $483$hi;
       $622 = i64toi32_i32$4;
       i64toi32_i32$4 = $29$hi;
       i64toi32_i32$4 = __wasm_i64_mul($622 | 0, i64toi32_i32$5 | 0, $29 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $485 = i64toi32_i32$4;
       $485$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $480$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$4 = $485$hi;
       i64toi32_i32$3 = $485;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $486$hi = i64toi32_i32$1;
       i64toi32_i32$5 = $2 + -8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $489$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $489$hi;
       $623 = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$1 = __wasm_i64_mul($623 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $491 = i64toi32_i32$1;
       $491$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $486$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $491$hi;
       i64toi32_i32$3 = $491;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $492$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $3;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $494$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = $494$hi;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $496 = i64toi32_i32$5;
       $496$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $492$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$5 = $496$hi;
       i64toi32_i32$3 = $496;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $497$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = $497$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $593 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
        $593 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
       }
       $3 = $433 + $593 | 0;
       HEAP32[$429 >> 2] = $3;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label1
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $28 = i64toi32_i32$2;
     $28$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $29 = i64toi32_i32$0;
     $29$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $30 = i64toi32_i32$2;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $31 = i64toi32_i32$0;
     $31$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $32 = i64toi32_i32$2;
     $32$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $33 = i64toi32_i32$0;
     $33$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $34 = i64toi32_i32$2;
     $34$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $35 = i64toi32_i32$0;
     $35$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $36 = i64toi32_i32$2;
     $36$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 40 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $37 = i64toi32_i32$0;
     $37$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 44 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $38 = i64toi32_i32$2;
     $38$hi = i64toi32_i32$0;
     $4 = 0;
     label2 : while (1) {
      $26 = $4 << 2 | 0;
      $2 = $5 + $26 | 0;
      $544 = $2;
      $548 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $551$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $37$hi;
      i64toi32_i32$2 = $551$hi;
      $624 = i64toi32_i32$0;
      i64toi32_i32$0 = $37$hi;
      i64toi32_i32$0 = __wasm_i64_mul($624 | 0, i64toi32_i32$2 | 0, $37 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $553 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $2 + -48 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $556$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$0 = $556$hi;
      $625 = i64toi32_i32$2;
      i64toi32_i32$2 = $38$hi;
      i64toi32_i32$2 = __wasm_i64_mul($625 | 0, i64toi32_i32$0 | 0, $38 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $558 = i64toi32_i32$2;
      $558$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $553$hi;
      i64toi32_i32$4 = $553;
      i64toi32_i32$2 = $558$hi;
      i64toi32_i32$3 = $558;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $559$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $562$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $36$hi;
      i64toi32_i32$4 = $562$hi;
      $626 = i64toi32_i32$1;
      i64toi32_i32$1 = $36$hi;
      i64toi32_i32$1 = __wasm_i64_mul($626 | 0, i64toi32_i32$4 | 0, $36 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $564 = i64toi32_i32$1;
      $564$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $559$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $564$hi;
      i64toi32_i32$3 = $564;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $565$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2 + -36 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $568$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $35$hi;
      i64toi32_i32$0 = $568$hi;
      $627 = i64toi32_i32$5;
      i64toi32_i32$5 = $35$hi;
      i64toi32_i32$5 = __wasm_i64_mul($627 | 0, i64toi32_i32$0 | 0, $35 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $570 = i64toi32_i32$5;
      $570$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $565$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $570$hi;
      i64toi32_i32$3 = $570;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $571$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2 + -32 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $574$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $34$hi;
      i64toi32_i32$4 = $574$hi;
      $628 = i64toi32_i32$2;
      i64toi32_i32$2 = $34$hi;
      i64toi32_i32$2 = __wasm_i64_mul($628 | 0, i64toi32_i32$4 | 0, $34 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $576 = i64toi32_i32$2;
      $576$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $576$hi;
      i64toi32_i32$3 = $576;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $577$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $2 + -28 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $580$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $33$hi;
      i64toi32_i32$0 = $580$hi;
      $629 = i64toi32_i32$1;
      i64toi32_i32$1 = $33$hi;
      i64toi32_i32$1 = __wasm_i64_mul($629 | 0, i64toi32_i32$0 | 0, $33 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $582 = i64toi32_i32$1;
      $582$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $577$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $582$hi;
      i64toi32_i32$3 = $582;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $583$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $2 + -24 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $586$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$4 = $586$hi;
      $630 = i64toi32_i32$5;
      i64toi32_i32$5 = $32$hi;
      i64toi32_i32$5 = __wasm_i64_mul($630 | 0, i64toi32_i32$4 | 0, $32 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $588 = i64toi32_i32$5;
      $588$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $588$hi;
      i64toi32_i32$3 = $588;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $589$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $2 + -20 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $592$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$0 = $592$hi;
      $631 = i64toi32_i32$2;
      i64toi32_i32$2 = $31$hi;
      i64toi32_i32$2 = __wasm_i64_mul($631 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $594 = i64toi32_i32$2;
      $594$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $589$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$2 = $594$hi;
      i64toi32_i32$3 = $594;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $595$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $598$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $30$hi;
      i64toi32_i32$4 = $598$hi;
      $632 = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = __wasm_i64_mul($632 | 0, i64toi32_i32$4 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $600 = i64toi32_i32$1;
      $600$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $595$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $600$hi;
      i64toi32_i32$3 = $600;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $601$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2 + -12 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $604$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$0 = $604$hi;
      $633 = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = __wasm_i64_mul($633 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $606 = i64toi32_i32$5;
      $606$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $601$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $606$hi;
      i64toi32_i32$3 = $606;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $607$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2 + -8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $610$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $28$hi;
      i64toi32_i32$4 = $610$hi;
      $634 = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$2 = __wasm_i64_mul($634 | 0, i64toi32_i32$4 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $612 = i64toi32_i32$2;
      $612$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $607$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $612$hi;
      i64toi32_i32$3 = $612;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $613$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $3;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $615$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = $615$hi;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $617 = i64toi32_i32$0;
      $617$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $613$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = $617$hi;
      i64toi32_i32$3 = $617;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $618$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$5 = $618$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $595 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
       $595 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $3 = $548 + $595 | 0;
      HEAP32[$544 >> 2] = $3;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label2
      }
      break block1;
     };
    }
    block26 : {
     if (($3 | 0) == (10 | 0)) {
      break block26
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$4 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $25 = i64toi32_i32$4;
     $25$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $28 = i64toi32_i32$1;
     $28$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $29 = i64toi32_i32$4;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $30 = i64toi32_i32$1;
     $30$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $31 = i64toi32_i32$4;
     $31$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $32 = i64toi32_i32$1;
     $32$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $33 = i64toi32_i32$4;
     $33$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $34 = i64toi32_i32$1;
     $34$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $35 = i64toi32_i32$4;
     $35$hi = i64toi32_i32$1;
     $4 = 0;
     label3 : while (1) {
      $26 = $4 << 2 | 0;
      $2 = $5 + $26 | 0;
      $661 = $2;
      $665 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      i64toi32_i32$5 = $2 + -32 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $34$hi;
      i64toi32_i32$4 = $668$hi;
      $635 = i64toi32_i32$1;
      i64toi32_i32$1 = $34$hi;
      i64toi32_i32$1 = __wasm_i64_mul($635 | 0, i64toi32_i32$4 | 0, $34 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $670 = i64toi32_i32$1;
      $670$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2 + -36 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $673$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $35$hi;
      i64toi32_i32$1 = $673$hi;
      $636 = i64toi32_i32$4;
      i64toi32_i32$4 = $35$hi;
      i64toi32_i32$4 = __wasm_i64_mul($636 | 0, i64toi32_i32$1 | 0, $35 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $675 = i64toi32_i32$4;
      $675$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $670$hi;
      i64toi32_i32$5 = $670;
      i64toi32_i32$4 = $675$hi;
      i64toi32_i32$3 = $675;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $676$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2 + -28 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $679$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $33$hi;
      i64toi32_i32$5 = $679$hi;
      $637 = i64toi32_i32$2;
      i64toi32_i32$2 = $33$hi;
      i64toi32_i32$2 = __wasm_i64_mul($637 | 0, i64toi32_i32$5 | 0, $33 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $681 = i64toi32_i32$2;
      $681$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $676$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $681$hi;
      i64toi32_i32$3 = $681;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $682$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $2 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $685$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $32$hi;
      i64toi32_i32$1 = $685$hi;
      $638 = i64toi32_i32$0;
      i64toi32_i32$0 = $32$hi;
      i64toi32_i32$0 = __wasm_i64_mul($638 | 0, i64toi32_i32$1 | 0, $32 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $687 = i64toi32_i32$0;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $682$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $687$hi;
      i64toi32_i32$3 = $687;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $688$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2 + -20 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $691$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $31$hi;
      i64toi32_i32$5 = $691$hi;
      $639 = i64toi32_i32$4;
      i64toi32_i32$4 = $31$hi;
      i64toi32_i32$4 = __wasm_i64_mul($639 | 0, i64toi32_i32$5 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $693 = i64toi32_i32$4;
      $693$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $688$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = $693$hi;
      i64toi32_i32$3 = $693;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $694$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2 + -16 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $697$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = $697$hi;
      $640 = i64toi32_i32$2;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$2 = __wasm_i64_mul($640 | 0, i64toi32_i32$1 | 0, $30 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $699 = i64toi32_i32$2;
      $699$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$2 = $699$hi;
      i64toi32_i32$3 = $699;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $700$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $2 + -12 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $703$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = $703$hi;
      $641 = i64toi32_i32$0;
      i64toi32_i32$0 = $29$hi;
      i64toi32_i32$0 = __wasm_i64_mul($641 | 0, i64toi32_i32$5 | 0, $29 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $705 = i64toi32_i32$0;
      $705$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $700$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$0 = $705$hi;
      i64toi32_i32$3 = $705;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $706$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2 + -8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $28$hi;
      i64toi32_i32$1 = $709$hi;
      $642 = i64toi32_i32$4;
      i64toi32_i32$4 = $28$hi;
      i64toi32_i32$4 = __wasm_i64_mul($642 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $711 = i64toi32_i32$4;
      $711$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $706$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $711$hi;
      i64toi32_i32$3 = $711;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $712$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $3;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $714$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = $714$hi;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $716 = i64toi32_i32$5;
      $716$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $712$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$5 = $716$hi;
      i64toi32_i32$3 = $716;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $717$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$0 = $717$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $596 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
       $596 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $3 = $665 + $596 | 0;
      HEAP32[$661 >> 2] = $3;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label3
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $25 = i64toi32_i32$1;
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $28 = i64toi32_i32$2;
    $28$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $29 = i64toi32_i32$1;
    $29$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $30 = i64toi32_i32$2;
    $30$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $31 = i64toi32_i32$1;
    $31$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $32 = i64toi32_i32$2;
    $32$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $33 = i64toi32_i32$1;
    $33$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $34 = i64toi32_i32$2;
    $34$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $35 = i64toi32_i32$1;
    $35$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $36 = i64toi32_i32$2;
    $36$hi = i64toi32_i32$1;
    $4 = 0;
    label4 : while (1) {
     $26 = $4 << 2 | 0;
     $2 = $5 + $26 | 0;
     $760 = $2;
     $764 = HEAP32[($0 + $26 | 0) >> 2] | 0;
     i64toi32_i32$0 = $2 + -36 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $767$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $35$hi;
     i64toi32_i32$2 = $767$hi;
     $643 = i64toi32_i32$1;
     i64toi32_i32$1 = $35$hi;
     i64toi32_i32$1 = __wasm_i64_mul($643 | 0, i64toi32_i32$2 | 0, $35 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $769 = i64toi32_i32$1;
     $769$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2 + -40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $772$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $36$hi;
     i64toi32_i32$1 = $772$hi;
     $644 = i64toi32_i32$2;
     i64toi32_i32$2 = $36$hi;
     i64toi32_i32$2 = __wasm_i64_mul($644 | 0, i64toi32_i32$1 | 0, $36 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $774 = i64toi32_i32$2;
     $774$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $769$hi;
     i64toi32_i32$0 = $769;
     i64toi32_i32$2 = $774$hi;
     i64toi32_i32$3 = $774;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $2 + -32 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $778$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $34$hi;
     i64toi32_i32$0 = $778$hi;
     $645 = i64toi32_i32$4;
     i64toi32_i32$4 = $34$hi;
     i64toi32_i32$4 = __wasm_i64_mul($645 | 0, i64toi32_i32$0 | 0, $34 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $780 = i64toi32_i32$4;
     $780$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $775$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $780$hi;
     i64toi32_i32$3 = $780;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $781$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $2 + -28 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $784$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $33$hi;
     i64toi32_i32$1 = $784$hi;
     $646 = i64toi32_i32$5;
     i64toi32_i32$5 = $33$hi;
     i64toi32_i32$5 = __wasm_i64_mul($646 | 0, i64toi32_i32$1 | 0, $33 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $786 = i64toi32_i32$5;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $781$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $786$hi;
     i64toi32_i32$3 = $786;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $787$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $2 + -24 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $790$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $32$hi;
     i64toi32_i32$0 = $790$hi;
     $647 = i64toi32_i32$2;
     i64toi32_i32$2 = $32$hi;
     i64toi32_i32$2 = __wasm_i64_mul($647 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $792 = i64toi32_i32$2;
     $792$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $787$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = $792$hi;
     i64toi32_i32$3 = $792;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $2 + -20 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $796$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $31$hi;
     i64toi32_i32$1 = $796$hi;
     $648 = i64toi32_i32$4;
     i64toi32_i32$4 = $31$hi;
     i64toi32_i32$4 = __wasm_i64_mul($648 | 0, i64toi32_i32$1 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $798 = i64toi32_i32$4;
     $798$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$4 = $798$hi;
     i64toi32_i32$3 = $798;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $799$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $2 + -16 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$0 = $802$hi;
     $649 = i64toi32_i32$5;
     i64toi32_i32$5 = $30$hi;
     i64toi32_i32$5 = __wasm_i64_mul($649 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $804 = i64toi32_i32$5;
     $804$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $799$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = $804$hi;
     i64toi32_i32$3 = $804;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $805$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2 + -12 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $808$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$1 = $808$hi;
     $650 = i64toi32_i32$2;
     i64toi32_i32$2 = $29$hi;
     i64toi32_i32$2 = __wasm_i64_mul($650 | 0, i64toi32_i32$1 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $810 = i64toi32_i32$2;
     $810$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $805$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $810$hi;
     i64toi32_i32$3 = $810;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $811$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $2 + -8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
     $814$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $28$hi;
     i64toi32_i32$0 = $814$hi;
     $651 = i64toi32_i32$4;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = __wasm_i64_mul($651 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $816 = i64toi32_i32$4;
     $816$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $811$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $816$hi;
     i64toi32_i32$3 = $816;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $817$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $819$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = $819$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $821 = i64toi32_i32$1;
     $821$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $817$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $821$hi;
     i64toi32_i32$3 = $821;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $822$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$2 = $822$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $597 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      $597 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $3 = $764 + $597 | 0;
     HEAP32[$760 >> 2] = $3;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label4
     }
     break block1;
    };
   }
   block27 : {
    if ($3 >>> 0 < 5 >>> 0) {
     break block27
    }
    block28 : {
     if ($3 >>> 0 < 7 >>> 0) {
      break block28
     }
     block29 : {
      if (($3 | 0) == (8 | 0)) {
       break block29
      }
      if (($1 | 0) < (1 | 0)) {
       break block1
      }
      $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $27 = $4;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $25 = i64toi32_i32$0;
      $25$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $28 = i64toi32_i32$5;
      $28$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $29 = i64toi32_i32$0;
      $29$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $30 = i64toi32_i32$5;
      $30$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $31 = i64toi32_i32$0;
      $31$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $32 = i64toi32_i32$5;
      $32$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $33 = i64toi32_i32$0;
      $33$hi = i64toi32_i32$5;
      $4 = 0;
      label5 : while (1) {
       $26 = $4 << 2 | 0;
       $2 = $5 + $26 | 0;
       $865 = $2;
       $869 = HEAP32[($0 + $26 | 0) >> 2] | 0;
       i64toi32_i32$2 = $2 + -24 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
       $872$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $872$hi;
       $652 = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$5 = __wasm_i64_mul($652 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $874 = i64toi32_i32$5;
       $874$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $2 + -28 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
       $877$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $33$hi;
       i64toi32_i32$5 = $877$hi;
       $653 = i64toi32_i32$0;
       i64toi32_i32$0 = $33$hi;
       i64toi32_i32$0 = __wasm_i64_mul($653 | 0, i64toi32_i32$5 | 0, $33 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $879 = i64toi32_i32$0;
       $879$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $874$hi;
       i64toi32_i32$2 = $874;
       i64toi32_i32$0 = $879$hi;
       i64toi32_i32$3 = $879;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $880$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $2 + -20 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $883$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $31$hi;
       i64toi32_i32$2 = $883$hi;
       $654 = i64toi32_i32$4;
       i64toi32_i32$4 = $31$hi;
       i64toi32_i32$4 = __wasm_i64_mul($654 | 0, i64toi32_i32$2 | 0, $31 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $885 = i64toi32_i32$4;
       $885$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $880$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$4 = $885$hi;
       i64toi32_i32$3 = $885;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $886$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $2 + -16 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $889$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = $889$hi;
       $655 = i64toi32_i32$1;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$1 = __wasm_i64_mul($655 | 0, i64toi32_i32$5 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $891 = i64toi32_i32$1;
       $891$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $886$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$1 = $891$hi;
       i64toi32_i32$3 = $891;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $892$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $2 + -12 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $895$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$2 = $895$hi;
       $656 = i64toi32_i32$0;
       i64toi32_i32$0 = $29$hi;
       i64toi32_i32$0 = __wasm_i64_mul($656 | 0, i64toi32_i32$2 | 0, $29 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $897 = i64toi32_i32$0;
       $897$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $892$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $897$hi;
       i64toi32_i32$3 = $897;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $898$hi = i64toi32_i32$4;
       i64toi32_i32$2 = $2 + -8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $901$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$5 = $901$hi;
       $657 = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = __wasm_i64_mul($657 | 0, i64toi32_i32$5 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $903 = i64toi32_i32$4;
       $903$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $898$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$4 = $903$hi;
       i64toi32_i32$3 = $903;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $904$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $906$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $25$hi;
       i64toi32_i32$1 = $906$hi;
       i64toi32_i32$2 = $25$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $908 = i64toi32_i32$2;
       $908$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $904$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$2 = $908$hi;
       i64toi32_i32$3 = $908;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $909$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $909$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $27;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
        $598 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
        $598 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
       }
       $3 = $869 + $598 | 0;
       HEAP32[$865 >> 2] = $3;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label5
       }
       break block1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$5 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $2;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $25 = i64toi32_i32$5;
     $25$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $28 = i64toi32_i32$1;
     $28$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $29 = i64toi32_i32$5;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $30 = i64toi32_i32$1;
     $30$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $31 = i64toi32_i32$5;
     $31$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $32 = i64toi32_i32$1;
     $32$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
     $33 = i64toi32_i32$5;
     $33$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $34 = i64toi32_i32$1;
     $34$hi = i64toi32_i32$5;
     $4 = 0;
     label6 : while (1) {
      $26 = $4 << 2 | 0;
      $2 = $5 + $26 | 0;
      $948 = $2;
      $952 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      i64toi32_i32$0 = $2 + -28 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $955$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $33$hi;
      i64toi32_i32$1 = $955$hi;
      $658 = i64toi32_i32$5;
      i64toi32_i32$5 = $33$hi;
      i64toi32_i32$5 = __wasm_i64_mul($658 | 0, i64toi32_i32$1 | 0, $33 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $957 = i64toi32_i32$5;
      $957$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + -32 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $960$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $34$hi;
      i64toi32_i32$5 = $960$hi;
      $659 = i64toi32_i32$1;
      i64toi32_i32$1 = $34$hi;
      i64toi32_i32$1 = __wasm_i64_mul($659 | 0, i64toi32_i32$5 | 0, $34 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $962 = i64toi32_i32$1;
      $962$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $957$hi;
      i64toi32_i32$0 = $957;
      i64toi32_i32$1 = $962$hi;
      i64toi32_i32$3 = $962;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $963$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2 + -24 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $966$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $32$hi;
      i64toi32_i32$0 = $966$hi;
      $660 = i64toi32_i32$4;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$4 = __wasm_i64_mul($660 | 0, i64toi32_i32$0 | 0, $32 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $968 = i64toi32_i32$4;
      $968$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $963$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $968$hi;
      i64toi32_i32$3 = $968;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $969$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2 + -20 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $972$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $31$hi;
      i64toi32_i32$5 = $972$hi;
      $662 = i64toi32_i32$2;
      i64toi32_i32$2 = $31$hi;
      i64toi32_i32$2 = __wasm_i64_mul($662 | 0, i64toi32_i32$5 | 0, $31 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $974 = i64toi32_i32$2;
      $974$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $969$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $974$hi;
      i64toi32_i32$3 = $974;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $975$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $2 + -16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $978$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$0 = $978$hi;
      $663 = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = __wasm_i64_mul($663 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $980 = i64toi32_i32$1;
      $980$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $975$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $980$hi;
      i64toi32_i32$3 = $980;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $981$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $2 + -12 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = $984$hi;
      $664 = i64toi32_i32$4;
      i64toi32_i32$4 = $29$hi;
      i64toi32_i32$4 = __wasm_i64_mul($664 | 0, i64toi32_i32$5 | 0, $29 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $986 = i64toi32_i32$4;
      $986$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $981$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $986$hi;
      i64toi32_i32$3 = $986;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $987$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $2 + -8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $990$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = $990$hi;
      $666 = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$2 = __wasm_i64_mul($666 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $992 = i64toi32_i32$2;
      $992$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $987$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = $992$hi;
      i64toi32_i32$3 = $992;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $993$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $3;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $995$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = $995$hi;
      i64toi32_i32$5 = $25$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $997 = i64toi32_i32$5;
      $997$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $993$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $997$hi;
      i64toi32_i32$3 = $997;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $998$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$4 = $998$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $599 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       $599 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $3 = $952 + $599 | 0;
      HEAP32[$948 >> 2] = $3;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label6
      }
      break block1;
     };
    }
    block30 : {
     if (($3 | 0) == (6 | 0)) {
      break block30
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $28 = i64toi32_i32$1;
     $28$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $29 = i64toi32_i32$0;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $30 = i64toi32_i32$1;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $31 = i64toi32_i32$0;
     $31$hi = i64toi32_i32$1;
     $4 = 0;
     label7 : while (1) {
      $26 = $4 << 2 | 0;
      $2 = $5 + $26 | 0;
      $1033 = $2;
      $1037 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2 + -16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $1040$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$0 = $1040$hi;
      $667 = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$1 = __wasm_i64_mul($667 | 0, i64toi32_i32$0 | 0, $30 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1042 = i64toi32_i32$1;
      $1042$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2 + -20 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $1045$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $31$hi;
      i64toi32_i32$1 = $1045$hi;
      $668 = i64toi32_i32$0;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$0 = __wasm_i64_mul($668 | 0, i64toi32_i32$1 | 0, $31 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1047 = i64toi32_i32$0;
      $1047$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1042$hi;
      i64toi32_i32$4 = $1042;
      i64toi32_i32$0 = $1047$hi;
      i64toi32_i32$3 = $1047;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1048$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2 + -12 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1051$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $29$hi;
      i64toi32_i32$4 = $1051$hi;
      $669 = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = __wasm_i64_mul($669 | 0, i64toi32_i32$4 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1053 = i64toi32_i32$2;
      $1053$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1048$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $1053$hi;
      i64toi32_i32$3 = $1053;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1054$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2 + -8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1057$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $28$hi;
      i64toi32_i32$1 = $1057$hi;
      $671 = i64toi32_i32$5;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = __wasm_i64_mul($671 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1059 = i64toi32_i32$5;
      $1059$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1054$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $1059$hi;
      i64toi32_i32$3 = $1059;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1060$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $3;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $1062$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $1062$hi;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1064 = i64toi32_i32$4;
      $1064$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1060$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = $1064$hi;
      i64toi32_i32$3 = $1064;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1065$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = $1065$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $601 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       $601 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3 = $1037 + $601 | 0;
      HEAP32[$1033 >> 2] = $3;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label7
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $25 = i64toi32_i32$1;
    $25$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $28 = i64toi32_i32$0;
    $28$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $29 = i64toi32_i32$1;
    $29$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $30 = i64toi32_i32$0;
    $30$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $31 = i64toi32_i32$1;
    $31$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $32 = i64toi32_i32$0;
    $32$hi = i64toi32_i32$1;
    $4 = 0;
    label8 : while (1) {
     $26 = $4 << 2 | 0;
     $2 = $5 + $26 | 0;
     $1100 = $2;
     $1104 = HEAP32[($0 + $26 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2 + -20 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $1107$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $31$hi;
     i64toi32_i32$0 = $1107$hi;
     $672 = i64toi32_i32$1;
     i64toi32_i32$1 = $31$hi;
     i64toi32_i32$1 = __wasm_i64_mul($672 | 0, i64toi32_i32$0 | 0, $31 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1109 = i64toi32_i32$1;
     $1109$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $2 + -24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $32$hi;
     i64toi32_i32$1 = $1112$hi;
     $673 = i64toi32_i32$0;
     i64toi32_i32$0 = $32$hi;
     i64toi32_i32$0 = __wasm_i64_mul($673 | 0, i64toi32_i32$1 | 0, $32 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1114 = i64toi32_i32$0;
     $1114$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1109$hi;
     i64toi32_i32$2 = $1109;
     i64toi32_i32$0 = $1114$hi;
     i64toi32_i32$3 = $1114;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1115$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $2 + -16 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $1118$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $30$hi;
     i64toi32_i32$2 = $1118$hi;
     $674 = i64toi32_i32$5;
     i64toi32_i32$5 = $30$hi;
     i64toi32_i32$5 = __wasm_i64_mul($674 | 0, i64toi32_i32$2 | 0, $30 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1120 = i64toi32_i32$5;
     $1120$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1115$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $1120$hi;
     i64toi32_i32$3 = $1120;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1121$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $2 + -12 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $1124$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$1 = $1124$hi;
     $676 = i64toi32_i32$4;
     i64toi32_i32$4 = $29$hi;
     i64toi32_i32$4 = __wasm_i64_mul($676 | 0, i64toi32_i32$1 | 0, $29 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1126 = i64toi32_i32$4;
     $1126$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1121$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $1126$hi;
     i64toi32_i32$3 = $1126;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1127$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + -8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $1130$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$2 = $1130$hi;
     $677 = i64toi32_i32$0;
     i64toi32_i32$0 = $28$hi;
     i64toi32_i32$0 = __wasm_i64_mul($677 | 0, i64toi32_i32$2 | 0, $28 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $1132 = i64toi32_i32$0;
     $1132$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1127$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $1132$hi;
     i64toi32_i32$3 = $1132;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1133$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
     $1135$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = $1135$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1137 = i64toi32_i32$1;
     $1137$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1133$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = $1137$hi;
     i64toi32_i32$3 = $1137;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1138$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $27$hi;
     i64toi32_i32$4 = $1138$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $602 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
      $602 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $3 = $1104 + $602 | 0;
     HEAP32[$1100 >> 2] = $3;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label8
     }
     break block1;
    };
   }
   block31 : {
    if ($3 >>> 0 < 3 >>> 0) {
     break block31
    }
    block32 : {
     if (($3 | 0) == (4 | 0)) {
      break block32
     }
     if (($1 | 0) < (1 | 0)) {
      break block1
     }
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $27 = $4;
     $27$hi = i64toi32_i32$2;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $25 = i64toi32_i32$2;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $28 = i64toi32_i32$5;
     $28$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $29 = i64toi32_i32$2;
     $29$hi = i64toi32_i32$5;
     $2 = 0;
     label9 : while (1) {
      $26 = $2 << 2 | 0;
      $4 = $5 + $26 | 0;
      $1171 = $4;
      $1175 = HEAP32[($0 + $26 | 0) >> 2] | 0;
      i64toi32_i32$4 = $4 + -8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $1178$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$2 = $1178$hi;
      $678 = i64toi32_i32$5;
      i64toi32_i32$5 = $28$hi;
      i64toi32_i32$5 = __wasm_i64_mul($678 | 0, i64toi32_i32$2 | 0, $28 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1180 = i64toi32_i32$5;
      $1180$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $4 + -12 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $1183$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = $1183$hi;
      $679 = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$2 = __wasm_i64_mul($679 | 0, i64toi32_i32$5 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1185 = i64toi32_i32$2;
      $1185$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1180$hi;
      i64toi32_i32$4 = $1180;
      i64toi32_i32$2 = $1185$hi;
      i64toi32_i32$3 = $1185;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1186$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $3;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $1188$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = $1188$hi;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1190 = i64toi32_i32$4;
      $1190$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1186$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $1190$hi;
      i64toi32_i32$3 = $1190;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1191$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = $1191$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $603 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
       $603 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3 = $1175 + $603 | 0;
      HEAP32[$1171 >> 2] = $3;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label9
      }
      break block1;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    i64toi32_i32$5 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $2;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    $25 = i64toi32_i32$5;
    $25$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $28 = i64toi32_i32$0;
    $28$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    $29 = i64toi32_i32$5;
    $29$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $30 = i64toi32_i32$0;
    $30$hi = i64toi32_i32$5;
    $4 = 0;
    label10 : while (1) {
     $26 = $4 << 2 | 0;
     $2 = $5 + $26 | 0;
     $1222 = $2;
     $1226 = HEAP32[($0 + $26 | 0) >> 2] | 0;
     i64toi32_i32$1 = $2 + -12 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $1229$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $29$hi;
     i64toi32_i32$0 = $1229$hi;
     $680 = i64toi32_i32$5;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$5 = __wasm_i64_mul($680 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1231 = i64toi32_i32$5;
     $1231$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + -16 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $1234$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $30$hi;
     i64toi32_i32$5 = $1234$hi;
     $682 = i64toi32_i32$0;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$0 = __wasm_i64_mul($682 | 0, i64toi32_i32$5 | 0, $30 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1236 = i64toi32_i32$0;
     $1236$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1231$hi;
     i64toi32_i32$1 = $1231;
     i64toi32_i32$0 = $1236$hi;
     i64toi32_i32$3 = $1236;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1237$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $2 + -8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
     $1240$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $1240$hi;
     $683 = i64toi32_i32$2;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$2 = __wasm_i64_mul($683 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1242 = i64toi32_i32$2;
     $1242$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1237$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $1242$hi;
     i64toi32_i32$3 = $1242;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1243$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $3;
     i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
     $1245$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $25$hi;
     i64toi32_i32$4 = $1245$hi;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $1247 = i64toi32_i32$5;
     $1247$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1243$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $1247$hi;
     i64toi32_i32$3 = $1247;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1248$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$0 = $1248$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $604 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
      $604 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $3 = $1226 + $604 | 0;
     HEAP32[$1222 >> 2] = $3;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue label10
     }
     break block1;
    };
   }
   block33 : {
    if (($3 | 0) == (2 | 0)) {
     break block33
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $6 = $1 & 1 | 0;
    $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $27 = $4;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
    $25 = i64toi32_i32$1;
    $25$hi = i64toi32_i32$4;
    $2 = 0;
    block34 : {
     if (($1 | 0) == (1 | 0)) {
      break block34
     }
     $26 = $1 & 2147483646 | 0;
     $2 = 0;
     $1 = 0;
     label11 : while (1) {
      $4 = $2 << 2 | 0;
      $1280 = $5 + $4 | 0;
      $1284 = HEAP32[($0 + $4 | 0) >> 2] | 0;
      i64toi32_i32$1 = $3;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1286$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = $1286$hi;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1288$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $27$hi;
      i64toi32_i32$4 = $1288$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $605 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       $605 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $3 = $1284 + $605 | 0;
      HEAP32[$1280 >> 2] = $3;
      $4 = $4 | 4 | 0;
      $1298 = $5 + $4 | 0;
      $1302 = HEAP32[($0 + $4 | 0) >> 2] | 0;
      i64toi32_i32$0 = $3;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $1304$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$1 = $1304$hi;
      i64toi32_i32$0 = $25$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1306$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = $1306$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $607 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       $607 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $3 = $1302 + $607 | 0;
      HEAP32[$1298 >> 2] = $3;
      $2 = $2 + 2 | 0;
      $1 = $1 + 2 | 0;
      if (($1 | 0) != ($26 | 0)) {
       continue label11
      }
      break label11;
     };
    }
    if (!$6) {
     break block1
    }
    $2 = $2 << 2 | 0;
    $1325 = $5 + $2 | 0;
    $1329 = HEAP32[($0 + $2 | 0) >> 2] | 0;
    i64toi32_i32$4 = $3;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $1331$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$0 = $1331$hi;
    i64toi32_i32$4 = $25$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1333$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$0 = $1333$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
     $608 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
     $608 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
    }
    HEAP32[$1325 >> 2] = $1329 + $608 | 0;
    return;
   }
   if (($1 | 0) < (1 | 0)) {
    break block1
   }
   $7 = $1 & 1 | 0;
   $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
   i64toi32_i32$4 = 0;
   $27 = $4;
   $27$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $2;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
   $25 = i64toi32_i32$4;
   $25$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
   $28 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$4;
   $2 = 0;
   block35 : {
    if (($1 | 0) == (1 | 0)) {
     break block35
    }
    $6 = $1 & 2147483646 | 0;
    $2 = 0;
    $1 = 0;
    label12 : while (1) {
     $4 = $2 << 2 | 0;
     $26 = $5 + $4 | 0;
     $1360 = $26;
     $1364 = HEAP32[($0 + $4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $1366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $25$hi;
     i64toi32_i32$4 = $1366$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $1368 = i64toi32_i32$1;
     $1368$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $26 + -8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $1371$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $1371$hi;
     $684 = i64toi32_i32$4;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = __wasm_i64_mul($684 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1373 = i64toi32_i32$4;
     $1373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1368$hi;
     i64toi32_i32$0 = $1368;
     i64toi32_i32$4 = $1373$hi;
     i64toi32_i32$3 = $1373;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1374$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$2 = $1374$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $609 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      $609 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $1364 + $609 | 0;
     HEAP32[$1360 >> 2] = $3;
     $4 = $4 | 4 | 0;
     $26 = $5 + $4 | 0;
     $1385 = $26;
     $1389 = HEAP32[($0 + $4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $1391$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $1391$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $1393 = i64toi32_i32$1;
     $1393$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $26 + -8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $1396$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$1 = $1396$hi;
     $685 = i64toi32_i32$0;
     i64toi32_i32$0 = $28$hi;
     i64toi32_i32$0 = __wasm_i64_mul($685 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $1398 = i64toi32_i32$0;
     $1398$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1393$hi;
     i64toi32_i32$2 = $1393;
     i64toi32_i32$0 = $1398$hi;
     i64toi32_i32$3 = $1398;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1399$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = $1399$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $610 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      $610 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $3 = $1389 + $610 | 0;
     HEAP32[$1385 >> 2] = $3;
     $2 = $2 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($6 | 0)) {
      continue label12
     }
     break label12;
    };
   }
   if (!$7) {
    break block1
   }
   $2 = $2 << 2 | 0;
   $4 = $5 + $2 | 0;
   $1419 = $4;
   $1423 = HEAP32[($0 + $2 | 0) >> 2] | 0;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $1425$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $25$hi;
   i64toi32_i32$2 = $1425$hi;
   i64toi32_i32$1 = $25$hi;
   i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $1427 = i64toi32_i32$1;
   $1427$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $4 + -8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $1430$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$1 = $1430$hi;
   $686 = i64toi32_i32$2;
   i64toi32_i32$2 = $28$hi;
   i64toi32_i32$2 = __wasm_i64_mul($686 | 0, i64toi32_i32$1 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1432 = i64toi32_i32$2;
   $1432$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1427$hi;
   i64toi32_i32$5 = $1427;
   i64toi32_i32$2 = $1432$hi;
   i64toi32_i32$3 = $1432;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1433$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $27$hi;
   i64toi32_i32$4 = $1433$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $27$hi;
   i64toi32_i32$3 = $27;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
    $611 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
    $611 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   HEAP32[$1419 >> 2] = $1423 + $611 | 0;
   return;
  }
 }
 
 function FLAC__lpc_compute_expected_bits_per_residual_sample($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  block : {
   if (!($0 > 0.0)) {
    break block
   }
   $0 = +log(+($0 * (.5 / +($1 >>> 0)))) * .5 / .6931471805599453;
   return +($0 >= 0.0 ? $0 : 0.0);
  }
  return +($0 < 0.0 ? 1.e+32 : 0.0);
 }
 
 function FLAC__lpc_compute_best_order($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $9 = 0.0, $4 = 0, $6 = 0, $7 = 0.0, $8 = 0, $10 = 0, $5 = 0.0;
  $4 = 1;
  block : {
   if (!$1) {
    break block
   }
   $5 = .5 / +($2 >>> 0);
   $6 = 0;
   $7 = 4294967295.0;
   $8 = 0;
   label : while (1) {
    block2 : {
     block1 : {
      $9 = +HEAPF64[($0 + ($6 << 3 | 0) | 0) >> 3];
      if (!($9 > 0.0)) {
       break block1
      }
      $9 = +log(+($5 * $9)) * .5 / .6931471805599453;
      $9 = $9 >= 0.0 ? $9 : 0.0;
      break block2;
     }
     $9 = $9 < 0.0 ? 1.e+32 : 0.0;
    }
    $9 = $9 * +(($2 - $4 | 0) >>> 0) + +(Math_imul($4, $3) >>> 0);
    $10 = $9 < $7;
    $7 = $10 ? $9 : $7;
    $8 = $10 ? $6 : $8;
    $4 = $4 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
   $4 = $8 + 1 | 0;
  }
  return $4 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  block2 : {
   block : {
    if (!($1 & 3 | 0)) {
     break block
    }
    block1 : {
     if (HEAPU8[$1 >> 0] | 0) {
      break block1
     }
     return $1 - $1 | 0 | 0;
    }
    $1 = $0;
    label : while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3 | 0)) {
      break block
     }
     if (HEAPU8[$1 >> 0] | 0) {
      continue label
     }
     break block2;
    };
   }
   label1 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (((16843008 - $3 | 0 | $3 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
     continue label1
    }
    break label1;
   };
   label2 : while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 >> 0] | 0) {
     continue label2
    }
    break label2;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0;
  block2 : {
   block4 : {
    block3 : {
     block : {
      $2 = $1 & 255 | 0;
      if (!$2) {
       break block
      }
      block1 : {
       if (!($0 & 3 | 0)) {
        break block1
       }
       $3 = $1 & 255 | 0;
       label : while (1) {
        $4 = HEAPU8[$0 >> 0] | 0;
        if (!$4) {
         break block2
        }
        if (($4 | 0) == ($3 | 0)) {
         break block2
        }
        $0 = $0 + 1 | 0;
        if ($0 & 3 | 0) {
         continue label
        }
        break label;
       };
      }
      $3 = HEAP32[$0 >> 2] | 0;
      if (((16843008 - $3 | 0 | $3 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block3
      }
      $2 = Math_imul($2, 16843009);
      label1 : while (1) {
       $4 = $3 ^ $2 | 0;
       if (((16843008 - $4 | 0 | $4 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break block3
       }
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $4 = $0 + 4 | 0;
       $0 = $4;
       if ((($3 | (16843008 - $3 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
        continue label1
       }
       break block4;
      };
     }
     return $0 + (strlen($0 | 0) | 0) | 0 | 0;
    }
    $4 = $0;
   }
   label2 : while (1) {
    $0 = $4;
    $3 = HEAPU8[$0 >> 0] | 0;
    if (!$3) {
     break block2
    }
    $4 = $0 + 1 | 0;
    if (($3 | 0) != ($1 & 255 | 0 | 0)) {
     continue label2
    }
    break label2;
   };
  }
  return $0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function FLAC__memory_alloc_aligned_int32_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  block : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break block
   }
   $0 = $0 << 2 | 0;
   $0 = emscripten_builtin_malloc(($0 >>> 0 > 1 >>> 0 ? $0 : 1) | 0) | 0;
   if (!$0) {
    break block
   }
   block1 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break block1
    }
    emscripten_builtin_free($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_uint64_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  block : {
   if ($0 >>> 0 > 536870911 >>> 0) {
    break block
   }
   $0 = $0 << 3 | 0;
   $0 = emscripten_builtin_malloc(($0 >>> 0 > 1 >>> 0 ? $0 : 1) | 0) | 0;
   if (!$0) {
    break block
   }
   block1 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break block1
    }
    emscripten_builtin_free($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_unsigned_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  block : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break block
   }
   $0 = $0 << 2 | 0;
   $0 = emscripten_builtin_malloc(($0 >>> 0 > 1 >>> 0 ? $0 : 1) | 0) | 0;
   if (!$0) {
    break block
   }
   block1 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break block1
    }
    emscripten_builtin_free($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_real_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  block : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break block
   }
   $0 = $0 << 2 | 0;
   $0 = emscripten_builtin_malloc(($0 >>> 0 > 1 >>> 0 ? $0 : 1) | 0) | 0;
   if (!$0) {
    break block
   }
   block1 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break block1
    }
    emscripten_builtin_free($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function safe_malloc_mul_2op_p($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $8$hi = 0, $10$hi = 0, i64toi32_i32$2 = 0;
  $2 = 1;
  block1 : {
   block : {
    if (!$0) {
     break block
    }
    if (!$1) {
     break block
    }
    $2 = 0;
    i64toi32_i32$0 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    if ($10) {
     break block1
    }
    $2 = Math_imul($1, $0);
   }
   $2 = emscripten_builtin_malloc($2 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $10 = 0, $11 = 0, $7 = 0, $8 = 0, $6 = 0, $9 = 0, $5 = 0, $13 = 0, $16 = 0, $4 = 0, $3 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $15 = 0, $12 = 0, $14 = 0, $101 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3 = 0;
  $4 = 0;
  $5 = 0;
  $6 = 0;
  $7 = 0;
  $8 = 0;
  block : {
   if (!$1) {
    break block
   }
   $9 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $12 = $11 - $10 | 0;
   $13 = ($9 - $10 | 0) + $12 | 0;
   $14 = (($9 << 1 | 0) - ($10 + (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) | 0) + $13 | 0;
   $15 = 0;
   $8 = 0;
   $7 = 0;
   $6 = 0;
   $5 = 0;
   $4 = 0;
   label : while (1) {
    $10 = HEAP32[($0 + ($15 << 2 | 0) | 0) >> 2] | 0;
    $9 = $10 >> 31 | 0;
    $4 = (($10 ^ $9 | 0) - $9 | 0) + $4 | 0;
    $9 = $10 - $11 | 0;
    $16 = $9 >> 31 | 0;
    $5 = (($9 ^ $16 | 0) - $16 | 0) + $5 | 0;
    $16 = $9 - $12 | 0;
    $11 = $16 >> 31 | 0;
    $6 = (($16 ^ $11 | 0) - $11 | 0) + $6 | 0;
    $13 = $16 - $13 | 0;
    $11 = $13 >> 31 | 0;
    $7 = (($13 ^ $11 | 0) - $11 | 0) + $7 | 0;
    $11 = $13 - $14 | 0;
    $101 = $11;
    $11 = $11 >> 31 | 0;
    $8 = (($101 ^ $11 | 0) - $11 | 0) + $8 | 0;
    $11 = $10;
    $12 = $9;
    $14 = $13;
    $13 = $16;
    $15 = $15 + 1 | 0;
    if (($15 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
  block1 : {
   $10 = $5 >>> 0 < $6 >>> 0 ? $5 : $6;
   $10 = $10 >>> 0 < $7 >>> 0 ? $10 : $7;
   if ($4 >>> 0 < ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
    break block1
   }
   block2 : {
    $10 = $6 >>> 0 < $7 >>> 0 ? $6 : $7;
    if ($5 >>> 0 >= ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
     break block2
    }
    $3 = 1;
    break block1;
   }
   block3 : {
    $10 = $7 >>> 0 < $8 >>> 0;
    if ($6 >>> 0 >= ($10 ? $7 : $8) >>> 0) {
     break block3
    }
    $3 = 2;
    break block1;
   }
   $3 = $10 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  block4 : {
   if (!$4) {
    break block4
   }
   $18 = Math_fround(+log(+(+($4 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  block5 : {
   if (!$5) {
    break block5
   }
   $17 = Math_fround(+log(+(+($5 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  block6 : {
   if (!$6) {
    break block6
   }
   $18 = Math_fround(+log(+(+($6 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  block7 : {
   if (!$7) {
    break block7
   }
   $17 = Math_fround(+log(+(+($7 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  block8 : {
   if ($8) {
    break block8
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $3 | 0;
  }
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+(+($8 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $3 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor_wide($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9 = 0, $7$hi = 0, $10 = 0, i64toi32_i32$5 = 0, $6$hi = 0, $5$hi = 0, $4$hi = 0, $8 = 0, $5 = 0, $6 = 0, $4 = 0, $7 = 0, $12 = 0, $16$hi = 0, $3$hi = 0, $15 = 0, $3 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $14 = 0, $11 = 0, $13 = 0, $60$hi = 0, $73$hi = 0, $86$hi = 0, $99$hi = 0, $105 = 0, $112$hi = 0, $141 = 0, $141$hi = 0, $155 = 0, $155$hi = 0, $164 = 0, $164$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block1 : {
   block : {
    if ($1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $7 = 0;
    $7$hi = i64toi32_i32$0;
    break block1;
   }
   $8 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $9 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $11 = $10 - $9 | 0;
   $12 = ($8 - $9 | 0) + $11 | 0;
   $13 = (($8 << 1 | 0) - ($9 + (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) | 0) + $12 | 0;
   i64toi32_i32$0 = 0;
   $7 = 0;
   $7$hi = i64toi32_i32$0;
   $14 = 0;
   i64toi32_i32$0 = 0;
   $6 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $5 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $3 = 0;
   $3$hi = i64toi32_i32$0;
   label : while (1) {
    i64toi32_i32$0 = $3$hi;
    $9 = HEAP32[($0 + ($14 << 2 | 0) | 0) >> 2] | 0;
    $8 = $9 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $60$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = ($9 ^ $8 | 0) - $8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $8 = $9 - $10 | 0;
    $15 = $8 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $73$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = $73$hi;
    i64toi32_i32$3 = ($8 ^ $15 | 0) - $15 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    $15 = $8 - $11 | 0;
    $10 = $15 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$3 = ($15 ^ $10 | 0) - $10 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    $12 = $15 - $12 | 0;
    $10 = $12 >> 31 | 0;
    i64toi32_i32$1 = 0;
    $99$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$4 = $6;
    i64toi32_i32$5 = $99$hi;
    i64toi32_i32$3 = ($12 ^ $10 | 0) - $10 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    $10 = $12 - $13 | 0;
    $105 = $10;
    $10 = $10 >> 31 | 0;
    i64toi32_i32$2 = 0;
    $112$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = $112$hi;
    i64toi32_i32$3 = ($105 ^ $10 | 0) - $10 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$0;
    $10 = $9;
    $11 = $8;
    $13 = $12;
    $12 = $15;
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
  block3 : {
   block2 : {
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$4 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4 ? $4 : i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    $16 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$0 ? $16 : i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$3;
    $16 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$3 ? $16 : i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$2;
    $141 = i64toi32_i32$1;
    $141$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$0 = $141;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break block2
    }
    $9 = 0;
    break block3;
   }
   block4 : {
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$0 = $5;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$2 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$2 ? $5 : i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$3;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7;
    i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3 ? $16 : i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
    $155 = i64toi32_i32$4;
    $155$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$4 = $155$hi;
    i64toi32_i32$2 = $155;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block4
    }
    $9 = 1;
    break block3;
   }
   block5 : {
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$4 = $7;
    $9 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $9;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$1 ? $6 : i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$3;
    $164 = i64toi32_i32$0;
    $164$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = $164$hi;
    i64toi32_i32$2 = $164;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block5
    }
    $9 = 2;
    break block3;
   }
   $9 = $9 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  block6 : {
   i64toi32_i32$1 = $3$hi;
   if (!($3 | i64toi32_i32$1 | 0)) {
    break block6
   }
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  block7 : {
   i64toi32_i32$1 = $4$hi;
   if (!($4 | i64toi32_i32$1 | 0)) {
    break block7
   }
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  block8 : {
   i64toi32_i32$1 = $5$hi;
   if (!($5 | i64toi32_i32$1 | 0)) {
    break block8
   }
   i64toi32_i32$4 = $5;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  block9 : {
   i64toi32_i32$1 = $6$hi;
   if (!($6 | i64toi32_i32$1 | 0)) {
    break block9
   }
   i64toi32_i32$4 = $6;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  block10 : {
   i64toi32_i32$1 = $7$hi;
   if (!!($7 | i64toi32_i32$1 | 0)) {
    break block10
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $9 | 0;
  }
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$4 = $7;
  i64toi32_i32$2 = 0;
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $9 | 0;
 }
 
 function FLAC__fixed_compute_residual($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $7 = 0, $5 = 0, $6 = 0, $15 = 0, $50 = 0, $105 = 0, $133 = 0, $174 = 0, $197 = 0;
  block5 : {
   block : {
    switch ($2 | 0) {
    case 4:
     $4 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break block5
     }
     label : while (1) {
      $2 = $4 << 2 | 0;
      $15 = $3 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$15 >> 2] = ((Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, 6) + (HEAP32[$2 >> 2] | 0) | 0) + (HEAP32[($2 + -16 | 0) >> 2] | 0) | 0) - (((HEAP32[($2 + -12 | 0) >> 2] | 0) + (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label
      }
      break block5;
     };
    case 3:
     $4 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break block5
     }
     label1 : while (1) {
      $2 = $4 << 2 | 0;
      $50 = $3 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$50 >> 2] = ((HEAP32[$2 >> 2] | 0) - (HEAP32[($2 + -12 | 0) >> 2] | 0) | 0) + Math_imul((HEAP32[($2 + -8 | 0) >> 2] | 0) - (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0, 3) | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue label1
      }
      break block5;
     };
    case 2:
     if (($1 | 0) < (1 | 0)) {
      break block5
     }
     $5 = $1 & 1 | 0;
     $2 = 0;
     block6 : {
      if (($1 | 0) == (1 | 0)) {
       break block6
      }
      $6 = $1 & 2147483646 | 0;
      $2 = 0;
      $7 = 0;
      label2 : while (1) {
       $4 = $2 << 2 | 0;
       $1 = $0 + $4 | 0;
       HEAP32[($3 + $4 | 0) >> 2] = ((HEAP32[$1 >> 2] | 0) - ((HEAP32[($1 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($1 + -8 | 0) >> 2] | 0) | 0;
       $4 = $4 | 4 | 0;
       $105 = $3 + $4 | 0;
       $4 = $0 + $4 | 0;
       HEAP32[$105 >> 2] = ((HEAP32[$4 >> 2] | 0) - ((HEAP32[($4 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($4 + -8 | 0) >> 2] | 0) | 0;
       $2 = $2 + 2 | 0;
       $7 = $7 + 2 | 0;
       if (($7 | 0) != ($6 | 0)) {
        continue label2
       }
       break label2;
      };
     }
     if (!$5) {
      break block5
     }
     $2 = $2 << 2 | 0;
     $133 = $3 + $2 | 0;
     $2 = $0 + $2 | 0;
     HEAP32[$133 >> 2] = ((HEAP32[$2 >> 2] | 0) - ((HEAP32[($2 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($2 + -8 | 0) >> 2] | 0) | 0;
     return;
    case 1:
     if (($1 | 0) < (1 | 0)) {
      break block5
     }
     $5 = $1 & 1 | 0;
     $2 = 0;
     block7 : {
      if (($1 | 0) == (1 | 0)) {
       break block7
      }
      $6 = $1 & 2147483646 | 0;
      $2 = 0;
      $1 = 0;
      label3 : while (1) {
       $4 = $2 << 2 | 0;
       $7 = $0 + $4 | 0;
       HEAP32[($3 + $4 | 0) >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[($7 + -4 | 0) >> 2] | 0) | 0;
       $4 = $4 | 4 | 0;
       $174 = $3 + $4 | 0;
       $4 = $0 + $4 | 0;
       HEAP32[$174 >> 2] = (HEAP32[$4 >> 2] | 0) - (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
       $2 = $2 + 2 | 0;
       $1 = $1 + 2 | 0;
       if (($1 | 0) != ($6 | 0)) {
        continue label3
       }
       break label3;
      };
     }
     if (!$5) {
      break block5
     }
     $2 = $2 << 2 | 0;
     $197 = $3 + $2 | 0;
     $2 = $0 + $2 | 0;
     HEAP32[$197 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0;
     return;
    case 0:
     break block;
    default:
     break block5;
    };
   }
   $2 = $1 << 2 | 0;
   if (!$2) {
    break block5
   }
   wasm2js_memory_copy($3, $0, $2);
  }
 }
 
 function FLAC__fixed_restore_signal($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $9 = 0, $8 = 0, $7 = 0, $64 = 0, $72 = 0;
  block5 : {
   block9 : {
    block8 : {
     block : {
      switch ($2 | 0) {
      case 4:
       if (($1 | 0) < (1 | 0)) {
        break block5
       }
       $4 = HEAP32[($3 + -4 | 0) >> 2] | 0;
       $5 = 0;
       label : while (1) {
        $6 = $5 << 2 | 0;
        $2 = $3 + $6 | 0;
        $4 = ((Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, -6) + (HEAP32[($0 + $6 | 0) >> 2] | 0) | 0) - (HEAP32[($2 + -16 | 0) >> 2] | 0) | 0) + (((HEAP32[($2 + -12 | 0) >> 2] | 0) + $4 | 0) << 2 | 0) | 0;
        HEAP32[$2 >> 2] = $4;
        $5 = $5 + 1 | 0;
        if (($5 | 0) != ($1 | 0)) {
         continue label
        }
        break block5;
       };
      case 3:
       if (($1 | 0) < (1 | 0)) {
        break block5
       }
       $7 = $1 & 1 | 0;
       $6 = HEAP32[($3 + -4 | 0) >> 2] | 0;
       $2 = 0;
       block6 : {
        if (($1 | 0) == (1 | 0)) {
         break block6
        }
        $8 = $1 & 2147483646 | 0;
        $2 = 0;
        $1 = 0;
        label1 : while (1) {
         $5 = $2 << 2 | 0;
         $4 = $3 + $5 | 0;
         $64 = $4;
         $72 = (HEAP32[($4 + -12 | 0) >> 2] | 0) + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0;
         $4 = HEAP32[($4 + -8 | 0) >> 2] | 0;
         $6 = $72 + Math_imul($6 - $4 | 0, 3) | 0;
         HEAP32[$64 >> 2] = $6;
         $5 = $5 | 4 | 0;
         $9 = $3 + $5 | 0;
         $6 = ($4 + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0) + Math_imul($6 - (HEAP32[($9 + -8 | 0) >> 2] | 0) | 0, 3) | 0;
         HEAP32[$9 >> 2] = $6;
         $2 = $2 + 2 | 0;
         $1 = $1 + 2 | 0;
         if (($1 | 0) != ($8 | 0)) {
          continue label1
         }
         break label1;
        };
       }
       if (!$7) {
        break block5
       }
       $2 = $2 << 2 | 0;
       $3 = $3 + $2 | 0;
       HEAP32[$3 >> 2] = ((HEAP32[($3 + -12 | 0) >> 2] | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0) + Math_imul($6 - (HEAP32[($3 + -8 | 0) >> 2] | 0) | 0, 3) | 0;
       return;
      case 2:
       if (($1 | 0) < (1 | 0)) {
        break block5
       }
       $8 = $1 & 1 | 0;
       $4 = HEAP32[($3 + -4 | 0) >> 2] | 0;
       $2 = 0;
       block7 : {
        if (($1 | 0) == (1 | 0)) {
         break block7
        }
        $9 = $1 & 2147483646 | 0;
        $2 = 0;
        $6 = 0;
        label2 : while (1) {
         $5 = $2 << 2 | 0;
         $1 = $3 + $5 | 0;
         $4 = (($4 << 1 | 0) + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0) - (HEAP32[($1 + -8 | 0) >> 2] | 0) | 0;
         HEAP32[$1 >> 2] = $4;
         $5 = $5 | 4 | 0;
         $1 = $3 + $5 | 0;
         $4 = (($4 << 1 | 0) + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0) - (HEAP32[($1 + -8 | 0) >> 2] | 0) | 0;
         HEAP32[$1 >> 2] = $4;
         $2 = $2 + 2 | 0;
         $6 = $6 + 2 | 0;
         if (($6 | 0) != ($9 | 0)) {
          continue label2
         }
         break label2;
        };
       }
       if (!$8) {
        break block5
       }
       $2 = $2 << 2 | 0;
       $3 = $3 + $2 | 0;
       HEAP32[$3 >> 2] = (($4 << 1 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0) - (HEAP32[($3 + -8 | 0) >> 2] | 0) | 0;
       return;
      case 1:
       if (($1 | 0) < (1 | 0)) {
        break block5
       }
       $8 = $1 & 3 | 0;
       $4 = HEAP32[($3 + -4 | 0) >> 2] | 0;
       $6 = 0;
       if ($1 >>> 0 >= 4 >>> 0) {
        break block8
       }
       $2 = 0;
       break block9;
      case 0:
       break block;
      default:
       break block5;
      };
     }
     $2 = $1 << 2 | 0;
     if (!$2) {
      break block5
     }
     wasm2js_memory_copy($3, $0, $2);
     return;
    }
    $7 = $1 & 2147483644 | 0;
    $2 = 0;
    $1 = 0;
    label3 : while (1) {
     $5 = $2 << 2 | 0;
     $4 = $4 + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $5 | 0) >> 2] = $4;
     $9 = $5 | 4 | 0;
     $4 = $4 + (HEAP32[($0 + $9 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $9 | 0) >> 2] = $4;
     $9 = $5 | 8 | 0;
     $4 = $4 + (HEAP32[($0 + $9 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $9 | 0) >> 2] = $4;
     $5 = $5 | 12 | 0;
     $4 = $4 + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $5 | 0) >> 2] = $4;
     $2 = $2 + 4 | 0;
     $1 = $1 + 4 | 0;
     if (($1 | 0) != ($7 | 0)) {
      continue label3
     }
     break label3;
    };
   }
   if (!$8) {
    break block5
   }
   label4 : while (1) {
    $5 = $2 << 2 | 0;
    $4 = $4 + (HEAP32[($0 + $5 | 0) >> 2] | 0) | 0;
    HEAP32[($3 + $5 | 0) >> 2] = $4;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($8 | 0)) {
     continue label4
    }
    break label4;
   };
  }
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  block : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  block1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break block1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function FLAC__stream_decoder_new() {
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $0 = 0, $3 = 0, $4 = 0;
  block : {
   $0 = emscripten_builtin_calloc(1 | 0, 8 | 0) | 0;
   if (!$0) {
    break block
   }
   $1 = emscripten_builtin_calloc(1 | 0, 504 | 0) | 0;
   HEAP32[$0 >> 2] = $1;
   block1 : {
    if (!$1) {
     break block1
    }
    $2 = emscripten_builtin_calloc(1 | 0, 6160 | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    block2 : {
     if (!$2) {
      break block2
     }
     $3 = FLAC__bitreader_new() | 0;
     HEAP32[($2 + 56 | 0) >> 2] = $3;
     block3 : {
      if (!$3) {
       break block3
      }
      HEAP32[($2 + 1128 | 0) >> 2] = 16;
      $4 = emscripten_builtin_malloc(((HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) << 1 | 0) & -16 | 0 | 0) | 0;
      HEAP32[($2 + 1120 | 0) >> 2] = $4;
      block4 : {
       if (!$4) {
        break block4
       }
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 3592 | 0) >> 2] = 0;
       HEAP32[($2 + 3596 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 252 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 220 | 0) >> 2] = 0;
       HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 60 | 0) >> 2] = 0;
       HEAP32[($2 + 64 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3616 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3608 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3600 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 68 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 76 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 84 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 108 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 116 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 124 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 136 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 148 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 160 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 172 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 184 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 196 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 208 | 0 | 0);
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 48 | 0) >> 2] = 0;
       HEAP32[($2 + 52 | 0) >> 2] = i64toi32_i32$0;
       block5 : {
        if (!512) {
         break block5
        }
        wasm2js_memory_fill($2 + 608 | 0, 0, 512);
       }
       HEAP32[($2 + 32 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 16 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 1124 | 0) >> 2] = 0;
       HEAP32[($2 + 608 | 0) >> 2] = 1;
       HEAP32[($1 + 28 | 0) >> 2] = 0;
       FLAC__ogg_decoder_aspect_set_defaults($1 + 32 | 0 | 0);
       HEAP32[$1 >> 2] = 9;
       return $0 | 0;
      }
      FLAC__bitreader_delete($3 | 0);
     }
     emscripten_builtin_free($2 | 0);
    }
    emscripten_builtin_free($1 | 0);
   }
   emscripten_builtin_free($0 | 0);
  }
  return 0 | 0;
 }
 
 function FLAC__stream_decoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  block : {
   if (!$0) {
    break block
   }
   FLAC__stream_decoder_finish($0 | 0) | 0;
   block1 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 1120 | 0) >> 2] | 0;
    if (!$2) {
     break block1
    }
    emscripten_builtin_free($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__bitreader_delete(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 124 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 136 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 148 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 160 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 172 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 184 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 196 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 208 | 0 | 0);
   emscripten_builtin_free(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   emscripten_builtin_free(HEAP32[$0 >> 2] | 0 | 0);
   emscripten_builtin_free($0 | 0);
  }
 }
 
 function FLAC__stream_decoder_finish($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $1 = 1;
  block : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
    break block
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   FLAC__MD5Final($2 + 3732 | 0 | 0, $2 + 3636 | 0 | 0);
   emscripten_builtin_free(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 252 | 0) >> 2] = 0;
   FLAC__bitreader_free(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0);
   block1 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $1 = HEAP32[($2 + 60 | 0) >> 2] | 0;
    if (!$1) {
     break block1
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 60 | 0) >> 2] = 0;
   }
   block2 : {
    $1 = HEAP32[($2 + 3592 | 0) >> 2] | 0;
    if (!$1) {
     break block2
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3592 | 0) >> 2] = 0;
    HEAP32[($2 + 92 | 0) >> 2] = 0;
   }
   block3 : {
    $1 = HEAP32[($2 + 64 | 0) >> 2] | 0;
    if (!$1) {
     break block3
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 64 | 0) >> 2] = 0;
   }
   block4 : {
    $1 = HEAP32[($2 + 3596 | 0) >> 2] | 0;
    if (!$1) {
     break block4
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3596 | 0) >> 2] = 0;
    HEAP32[($2 + 96 | 0) >> 2] = 0;
   }
   block5 : {
    $1 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if (!$1) {
     break block5
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 68 | 0) >> 2] = 0;
   }
   block6 : {
    $1 = HEAP32[($2 + 3600 | 0) >> 2] | 0;
    if (!$1) {
     break block6
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3600 | 0) >> 2] = 0;
    HEAP32[($2 + 100 | 0) >> 2] = 0;
   }
   block7 : {
    $1 = HEAP32[($2 + 72 | 0) >> 2] | 0;
    if (!$1) {
     break block7
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = 0;
   }
   block8 : {
    $1 = HEAP32[($2 + 3604 | 0) >> 2] | 0;
    if (!$1) {
     break block8
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3604 | 0) >> 2] = 0;
    HEAP32[($2 + 104 | 0) >> 2] = 0;
   }
   block9 : {
    $1 = HEAP32[($2 + 76 | 0) >> 2] | 0;
    if (!$1) {
     break block9
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 76 | 0) >> 2] = 0;
   }
   block10 : {
    $1 = HEAP32[($2 + 3608 | 0) >> 2] | 0;
    if (!$1) {
     break block10
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3608 | 0) >> 2] = 0;
    HEAP32[($2 + 108 | 0) >> 2] = 0;
   }
   block11 : {
    $1 = HEAP32[($2 + 80 | 0) >> 2] | 0;
    if (!$1) {
     break block11
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 80 | 0) >> 2] = 0;
   }
   block12 : {
    $1 = HEAP32[($2 + 3612 | 0) >> 2] | 0;
    if (!$1) {
     break block12
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3612 | 0) >> 2] = 0;
    HEAP32[($2 + 112 | 0) >> 2] = 0;
   }
   block13 : {
    $1 = HEAP32[($2 + 84 | 0) >> 2] | 0;
    if (!$1) {
     break block13
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 84 | 0) >> 2] = 0;
   }
   block14 : {
    $1 = HEAP32[($2 + 3616 | 0) >> 2] | 0;
    if (!$1) {
     break block14
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3616 | 0) >> 2] = 0;
    HEAP32[($2 + 116 | 0) >> 2] = 0;
   }
   block15 : {
    $1 = HEAP32[($2 + 88 | 0) >> 2] | 0;
    if (!$1) {
     break block15
    }
    emscripten_builtin_free($1 + -16 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 88 | 0) >> 2] = 0;
   }
   block16 : {
    $1 = HEAP32[($2 + 3620 | 0) >> 2] | 0;
    if (!$1) {
     break block16
    }
    emscripten_builtin_free($1 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 3620 | 0) >> 2] = 0;
    HEAP32[($2 + 120 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 220 | 0) >> 2] = 0;
   HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
   block17 : {
    if (!(HEAP32[$2 >> 2] | 0)) {
     break block17
    }
    FLAC__ogg_decoder_aspect_finish((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   block18 : {
    $1 = HEAP32[($2 + 52 | 0) >> 2] | 0;
    if (!$1) {
     break block18
    }
    block19 : {
     if (($1 | 0) == (HEAP32[GOT_data_internal_stdin >> 2] | 0 | 0)) {
      break block19
     }
     fclose($1 | 0) | 0;
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 52 | 0) >> 2] = 0;
   }
   block21 : {
    block20 : {
     if (HEAP32[($2 + 3624 | 0) >> 2] | 0) {
      break block20
     }
     $1 = 1;
     break block21;
    }
    $1 = !(memcmp($2 + 312 | 0 | 0, $2 + 3732 | 0 | 0, 16 | 0) | 0);
   }
   HEAP32[($2 + 48 | 0) >> 2] = 0;
   HEAP32[($2 + 3632 | 0) >> 2] = 0;
   block22 : {
    if (!512) {
     break block22
    }
    wasm2js_memory_fill($2 + 608 | 0, 0, 512);
   }
   HEAP32[($2 + 32 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 1124 | 0) >> 2] = 0;
   HEAP32[($2 + 608 | 0) >> 2] = 1;
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 28 | 0) >> 2] = 0;
   FLAC__ogg_decoder_aspect_set_defaults($2 + 32 | 0 | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 9;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_init_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, i64toi32_i32$0 = 0, $12 = 0;
  $11 = 5;
  block3 : {
   block : {
    $12 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$12 >> 2] | 0 | 0) != (9 | 0)) {
     break block
    }
    $11 = 2;
    if (!$1) {
     break block
    }
    if (!$6) {
     break block
    }
    if (!$8) {
     break block
    }
    block1 : {
     if (!$2) {
      break block1
     }
     if (!$3) {
      break block
     }
     if (!$4) {
      break block
     }
     if (!$5) {
      break block
     }
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[$11 >> 2] = $10;
    block2 : {
     if (!$10) {
      break block2
     }
     if (!(FLAC__ogg_decoder_aspect_init($12 + 32 | 0 | 0) | 0)) {
      break block3
     }
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    FLAC__cpu_info($11 + 3524 | 0 | 0);
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $10 = GOT_func_internal_FLAC__lpc_restore_signal;
    HEAP32[($11 + 44 | 0) >> 2] = $10;
    HEAP32[($11 + 40 | 0) >> 2] = GOT_func_internal_FLAC__lpc_restore_signal_wide;
    HEAP32[($11 + 36 | 0) >> 2] = $10;
    $10 = GOT_data_internal___table_base;
    block4 : {
     if (FLAC__bitreader_init(HEAP32[($11 + 56 | 0) >> 2] | 0 | 0, $10 + 8 | 0 | 0, $0 | 0) | 0) {
      break block4
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     return 3 | 0;
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($11 + 48 | 0) >> 2] = $9;
    HEAP32[($11 + 32 | 0) >> 2] = $8;
    HEAP32[($11 + 28 | 0) >> 2] = $7;
    HEAP32[($11 + 24 | 0) >> 2] = $6;
    HEAP32[($11 + 20 | 0) >> 2] = $5;
    HEAP32[($11 + 16 | 0) >> 2] = $4;
    HEAP32[($11 + 12 | 0) >> 2] = $3;
    HEAP32[($11 + 8 | 0) >> 2] = $2;
    HEAP32[($11 + 4 | 0) >> 2] = $1;
    HEAP32[($11 + 3520 | 0) >> 2] = 0;
    HEAP32[($11 + 248 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 240 | 0) >> 2] = 0;
    HEAP32[($11 + 244 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 228 | 0) >> 2] = 0;
    HEAP32[($11 + 232 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($11 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 3628 | 0) >> 2] = 1;
    HEAP32[($11 + 3632 | 0) >> 2] = i64toi32_i32$0;
    $11 = FLAC__stream_decoder_reset($0 | 0) | 0 ? 0 : 3;
   }
   return $11 | 0;
  }
  HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] = 4;
  return 4 | 0;
 }
 
 function read_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $6 = 0, $5 = 0;
  block8 : {
   block1 : {
    block : {
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (HEAP32[$3 >> 2] | 0) {
      break block
     }
     $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     if (!$4) {
      break block
     }
     if (!(FUNCTION_TABLE[$4 | 0]($2, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0)) {
      break block
     }
     HEAP32[$1 >> 2] = 0;
     $3 = 4;
     break block1;
    }
    $3 = 7;
    if (!(HEAP32[$1 >> 2] | 0)) {
     break block1
    }
    block2 : {
     $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($4 + 3632 | 0) >> 2] | 0)) {
      break block2
     }
     if ((HEAP32[($4 + 6152 | 0) >> 2] | 0) >>> 0 > 20 >>> 0) {
      break block1
     }
    }
    $5 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    block6 : {
     block5 : {
      block4 : {
       block3 : {
        if (!(HEAP32[$4 >> 2] | 0)) {
         break block3
        }
        $4 = GOT_data_internal___table_base;
        $6 = 0;
        switch (FLAC__ogg_decoder_aspect_read_callback_wrapper((HEAP32[$2 >> 2] | 0) + 32 | 0 | 0, $0 | 0, $1 | 0, $4 + 9 | 0 | 0, $2 | 0, $5 | 0) | 0 | 0) {
        case 0:
        case 2:
         break block4;
        case 1:
         break block5;
        default:
         break block1;
        };
       }
       $6 = FUNCTION_TABLE[HEAP32[($4 + 4 | 0) >> 2] | 0 | 0]($2, $0, $1, $5) | 0;
       if (($6 | 0) == (2 | 0)) {
        break block1
       }
      }
      if (!(HEAP32[$1 >> 2] | 0)) {
       break block6
      }
      return 1 | 0;
     }
     block7 : {
      if (!(HEAP32[$1 >> 2] | 0)) {
       break block7
      }
      return 1 | 0;
     }
     $3 = 4;
     break block1;
    }
    $1 = 1;
    $3 = 4;
    if (($6 | 0) == (1 | 0)) {
     break block1
    }
    $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    if (HEAP32[$4 >> 2] | 0) {
     break block8
    }
    $0 = HEAP32[($4 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break block8
    }
    if (!(FUNCTION_TABLE[$0 | 0]($2, HEAP32[($4 + 48 | 0) >> 2] | 0) | 0)) {
     break block8
    }
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = $3;
   $1 = 0;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_reset($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, $3 = 0, $2 = 0;
  block1 : {
   block : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
     break block
    }
    $2 = 0;
    if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
     break block1
    }
   }
   $2 = 0;
   HEAP32[($1 + 3624 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 240 | 0) >> 2] = 0;
   HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$0;
   block2 : {
    if (!(HEAP32[$1 >> 2] | 0)) {
     break block2
    }
    FLAC__ogg_decoder_aspect_flush((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   $1 = FLAC__bitreader_clear(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0) | 0;
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$3 >> 2] = $1 ? 2 : 8;
   if (!$1) {
    break block1
   }
   block3 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[$1 >> 2] | 0)) {
     break block3
    }
    FLAC__ogg_decoder_aspect_reset($3 + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   block5 : {
    block4 : {
     if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
      break block4
     }
     $3 = GOT_data_internal_stdin;
     if ((HEAP32[($1 + 52 | 0) >> 2] | 0 | 0) == (HEAP32[$3 >> 2] | 0 | 0)) {
      break block1
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break block5
     }
     i64toi32_i32$0 = 0;
     if ((FUNCTION_TABLE[$3 | 0]($0, 0, i64toi32_i32$0, HEAP32[($1 + 48 | 0) >> 2] | 0) | 0 | 0) == (1 | 0)) {
      break block1
     }
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     break block5;
    }
    HEAP32[($1 + 3628 | 0) >> 2] = 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 0;
   HEAP32[($1 + 248 | 0) >> 2] = 0;
   emscripten_builtin_free(HEAP32[($1 + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 252 | 0) >> 2] = 0;
   HEAP32[($1 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 228 | 0) >> 2] = 0;
   HEAP32[($1 + 232 | 0) >> 2] = i64toi32_i32$0;
   FLAC__MD5Init($1 + 3636 | 0 | 0);
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($0 + 6152 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 6136 | 0) >> 2] = 0;
   HEAP32[($0 + 6140 | 0) >> 2] = i64toi32_i32$0;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 1 | 0) | 0 | 0;
 }
 
 function FLAC__stream_decoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   FLAC__ogg_decoder_aspect_set_serial_number($0 + 32 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_md5_checking($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if ($1 >>> 0 > 126 >>> 0) {
    break block
   }
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   $2 = 1;
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[(($0 + ($1 << 2 | 0) | 0) + 608 | 0) >> 2] = 1;
   if (($1 | 0) != (2 | 0)) {
    break block
   }
   HEAP32[($0 + 1124 | 0) >> 2] = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond_application($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = 0;
  block2 : {
   block6 : {
    block : {
     if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
      break block
     }
     $2 = 1;
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($3 + 616 | 0) >> 2] | 0) {
      break block
     }
     $4 = HEAP32[($3 + 1120 | 0) >> 2] | 0;
     block1 : {
      $2 = HEAP32[($3 + 1124 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($3 + 1128 | 0) >> 2] | 0 | 0)) {
       break block1
      }
      $3 = $4;
      break block2;
     }
     block7 : {
      block3 : {
       if (!$2) {
        break block3
       }
       block4 : {
        if (($2 | 0) < (0 | 0)) {
         break block4
        }
        block5 : {
         $3 = emscripten_builtin_realloc($4 | 0, $2 << 1 | 0 | 0) | 0;
         if (!$3) {
          break block5
         }
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         HEAP32[($2 + 1120 | 0) >> 2] = $3;
         break block6;
        }
        emscripten_builtin_free($4 | 0);
        $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       }
       HEAP32[($3 + 1120 | 0) >> 2] = 0;
       break block7;
      }
      $3 = emscripten_builtin_realloc($4 | 0, 0 | 0) | 0;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 1120 | 0) >> 2] = $3;
      if ($3) {
       break block6
      }
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     $2 = 0;
    }
    return $2 | 0;
   }
   HEAP32[($2 + 1128 | 0) >> 2] = (HEAP32[($2 + 1128 | 0) >> 2] | 0) << 1 | 0;
   $2 = HEAP32[($2 + 1124 | 0) >> 2] | 0;
  }
  block8 : {
   $4 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
   if (!$4) {
    break block8
   }
   wasm2js_memory_copy($3 + Math_imul($4, $2) | 0, $1, $4);
  }
  $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP32[($0 + 1124 | 0) >> 2] = (HEAP32[($0 + 1124 | 0) >> 2] | 0) + 1 | 0;
  return 1 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond_all($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, $1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0;
  $1 = 0;
  block : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = $2 + 608 | 0;
   $1 = 0;
   label : while (1) {
    $0 = $3 + ($1 << 2 | 0) | 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 16 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 24 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 8 | 0;
    if (($1 | 0) != (128 | 0)) {
     continue label
    }
    break label;
   };
   HEAP32[($2 + 1124 | 0) >> 2] = 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if ($1 >>> 0 > 126 >>> 0) {
    break block
   }
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[(($0 + ($1 << 2 | 0) | 0) + 608 | 0) >> 2] = 0;
   $2 = 1;
   if (($1 | 0) != (2 | 0)) {
    break block
   }
   HEAP32[($0 + 1124 | 0) >> 2] = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore_application($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  block3 : {
   block7 : {
    block : {
     if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
      break block
     }
     block1 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (HEAP32[($2 + 616 | 0) >> 2] | 0) {
       break block1
      }
      return 1 | 0;
     }
     $3 = HEAP32[($2 + 1120 | 0) >> 2] | 0;
     block2 : {
      $4 = HEAP32[($2 + 1124 | 0) >> 2] | 0;
      if (($4 | 0) == (HEAP32[($2 + 1128 | 0) >> 2] | 0 | 0)) {
       break block2
      }
      $2 = $3;
      break block3;
     }
     block8 : {
      block4 : {
       if (!$4) {
        break block4
       }
       block5 : {
        if (($4 | 0) < (0 | 0)) {
         break block5
        }
        block6 : {
         $2 = emscripten_builtin_realloc($3 | 0, $4 << 1 | 0 | 0) | 0;
         if (!$2) {
          break block6
         }
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         HEAP32[($4 + 1120 | 0) >> 2] = $2;
         break block7;
        }
        emscripten_builtin_free($3 | 0);
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       }
       HEAP32[($2 + 1120 | 0) >> 2] = 0;
       break block8;
      }
      $2 = emscripten_builtin_realloc($3 | 0, 0 | 0) | 0;
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($4 + 1120 | 0) >> 2] = $2;
      if ($2) {
       break block7
      }
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    }
    return 0 | 0;
   }
   HEAP32[($4 + 1128 | 0) >> 2] = (HEAP32[($4 + 1128 | 0) >> 2] | 0) << 1 | 0;
   $4 = HEAP32[($4 + 1124 | 0) >> 2] | 0;
  }
  block9 : {
   $3 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
   if (!$3) {
    break block9
   }
   wasm2js_memory_copy($2 + Math_imul($3, $4) | 0, $1, $3);
  }
  $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP32[($0 + 1124 | 0) >> 2] = (HEAP32[($0 + 1124 | 0) >> 2] | 0) + 1 | 0;
  return 1 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore_all($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 0;
  block : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break block
   }
   block1 : {
    if (!512) {
     break block1
    }
    wasm2js_memory_fill((HEAP32[($0 + 4 | 0) >> 2] | 0) + 608 | 0, 0, 512);
   }
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1124 | 0) >> 2] = 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_get_md5_checking($0) {
  $0 = $0 | 0;
  return HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_process_single($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block5 : {
   block4 : {
    label : while (1) {
     $2 = 0;
     block3 : {
      switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
      case 0:
       if (find_metadata_($0 | 0) | 0) {
        continue label
       }
       break block5;
      case 1:
       $2 = read_metadata_($0 | 0) | 0;
       break block5;
      case 2:
       if (frame_sync_($0 | 0) | 0) {
        continue label
       }
       break block4;
      case 3:
       break block3;
      case 4:
      case 7:
       break block4;
      default:
       break block5;
      };
     }
     if (!(read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0)) {
      break block5
     }
     if (!(HEAP32[($1 + 12 | 0) >> 2] | 0)) {
      continue label
     }
     break label;
    };
   }
   $2 = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function find_metadata_($0) {
  $0 = $0 | 0;
  var $4 = 0, $6 = 0, $1 = 0, $5 = 0, $3 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = HEAPU8[GOT_data_internal_FLAC__STREAM_SYNC_STRING >> 0] | 0;
  $3 = 1;
  $4 = 0;
  block3 : {
   label : while (1) {
    block1 : {
     block : {
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (!(HEAP32[($5 + 3520 | 0) >> 2] | 0)) {
       break block
      }
      $6 = HEAPU8[($5 + 3590 | 0) >> 0] | 0;
      HEAP32[($1 + 8 | 0) >> 2] = $6;
      HEAP32[($5 + 3520 | 0) >> 2] = 0;
      break block1;
     }
     block2 : {
      if (FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
       break block2
      }
      $4 = 0;
      break block3;
     }
     $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    }
    block19 : {
     block4 : {
      if (($6 | 0) == (HEAPU8[(GOT_data_internal_FLAC__STREAM_SYNC_STRING + $4 | 0) >> 0] | 0 | 0)) {
       break block4
      }
      block12 : {
       block5 : {
        if (($6 | 0) != (73 | 0)) {
         break block5
        }
        block7 : {
         block6 : {
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (!(HEAP32[($4 + 3520 | 0) >> 2] | 0)) {
           break block6
          }
          $6 = HEAPU8[($4 + 3590 | 0) >> 0] | 0;
          HEAP32[($1 + 8 | 0) >> 2] = $6;
          HEAP32[($4 + 3520 | 0) >> 2] = 0;
          break block7;
         }
         block8 : {
          if (FLAC__bitreader_read_raw_uint32(HEAP32[($4 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
           break block8
          }
          $4 = 0;
          break block3;
         }
         $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        }
        $4 = 0;
        if (($6 | 0) == ($2 | 0)) {
         break block4
        }
        if (($6 | 0) != (68 | 0)) {
         break block5
        }
        block10 : {
         block9 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (!(HEAP32[($5 + 3520 | 0) >> 2] | 0)) {
           break block9
          }
          $6 = HEAPU8[($5 + 3590 | 0) >> 0] | 0;
          HEAP32[($1 + 8 | 0) >> 2] = $6;
          HEAP32[($5 + 3520 | 0) >> 2] = 0;
          break block10;
         }
         block11 : {
          if (FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
           break block11
          }
          $4 = 0;
          break block3;
         }
         $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        }
        if (($6 | 0) == ($2 | 0)) {
         break block4
        }
        if (($6 | 0) != (51 | 0)) {
         break block5
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 24 | 0) | 0)) {
         break block12
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
         break block12
        }
        $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
         break block12
        }
        $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
         break block12
        }
        $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
         break block12
        }
        $4 = 0;
        if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) & 127 | 0 | (($3 << 7 | 0) & 16256 | 0 | (($5 & 127 | 0 | (($6 << 7 | 0) & 16256 | 0) | 0) << 14 | 0) | 0) | 0 | 0) | 0)) {
         break block3
        }
        block14 : {
         block13 : {
          $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (!(HEAP32[($6 + 3520 | 0) >> 2] | 0)) {
           break block13
          }
          $5 = HEAPU8[($6 + 3590 | 0) >> 0] | 0;
          HEAP32[($1 + 8 | 0) >> 2] = $5;
          HEAP32[($6 + 3520 | 0) >> 2] = 0;
          break block14;
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0)) {
          break block3
         }
         $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        }
        $4 = 0;
        if (($5 | 0) == ($2 | 0)) {
         break block4
        }
        break block3;
       }
       block15 : {
        if (($6 | 0) != (255 | 0)) {
         break block15
        }
        HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
        block16 : {
         if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
          break block16
         }
         $4 = 0;
         break block3;
        }
        block17 : {
         $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
         if (($4 | 0) != (255 | 0)) {
          break block17
         }
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         HEAP32[($4 + 3520 | 0) >> 2] = 1;
         HEAP8[($4 + 3590 | 0) >> 0] = 255;
         break block15;
        }
        if (($4 & -2 | 0 | 0) != (248 | 0)) {
         break block15
        }
        HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $4;
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
        $4 = 1;
        break block3;
       }
       $4 = 0;
       block18 : {
        if ($3) {
         break block18
        }
        $3 = 0;
        break block19;
       }
       $3 = 0;
       $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[($6 + 3632 | 0) >> 2] | 0) {
        break block19
       }
       $4 = 0;
       FUNCTION_TABLE[HEAP32[($6 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($6 + 48 | 0) >> 2] | 0);
       $3 = 0;
       break block19;
      }
      $4 = 0;
      break block3;
     }
     $3 = 1;
     $4 = $4 + 1 | 0;
    }
    if ($4 >>> 0 < 4 >>> 0) {
     continue label
    }
    break label;
   };
   $4 = 1;
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $4 | 0;
 }
 
 function read_metadata_($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $1 = 0, $6 = 0, $5 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, i64toi32_i32$2 = 0, $9 = 0, i64toi32_i32$5 = 0, $8 = 0, $13 = 0, $10 = 0, $11 = 0, $12 = 0, i64toi32_i32$3 = 0, $163 = 0, $165 = 0, $295 = 0, $309 = 0, $590$hi = 0, $593$hi = 0, $594 = 0;
  $1 = __stack_pointer - 192 | 0;
  __stack_pointer = $1;
  block1 : {
   block11 : {
    block : {
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 184 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     $2 = 0;
     $3 = HEAP32[($1 + 184 | 0) >> 2] | 0;
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 180 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN >> 2] | 0 | 0) | 0)) {
      break block1
     }
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 176 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
      break block1
     }
     $2 = ($3 | 0) != (0 | 0);
     block6 : {
      block3 : {
       block4 : {
        block2 : {
         $4 = HEAP32[($1 + 180 | 0) >> 2] | 0;
         switch ($4 | 0) {
         case 0:
          break block2;
         case 3:
          break block4;
         default:
          break block3;
         };
        }
        $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $5 = HEAP32[($1 + 176 | 0) >> 2] | 0;
        HEAP32[($4 + 264 | 0) >> 2] = $5;
        HEAP32[($4 + 260 | 0) >> 2] = $2;
        $2 = 0;
        HEAP32[($4 + 256 | 0) >> 2] = 0;
        $6 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
        $6 = HEAP32[$6 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($4 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $6 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 272 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN;
        $7 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $7 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 276 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN;
        $8 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $8 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 280 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN;
        $9 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $9 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 284 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN;
        $10 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $10 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 288 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN;
        $11 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $11 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 292 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
        $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN;
        $12 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $12 | 0) | 0)) {
         break block1
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 296 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
        $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $13 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN;
        $163 = HEAP32[($4 + 56 | 0) >> 2] | 0;
        $165 = $4 + 304 | 0;
        $4 = HEAP32[$13 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint64($163 | 0, $165 | 0, $4 | 0) | 0)) {
         break block1
        }
        $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($13 + 56 | 0) >> 2] | 0 | 0, $13 + 312 | 0 | 0, 16 | 0) | 0)) {
         break block1
        }
        if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 - ((((((((($6 + $7 | 0) + $8 | 0) + $9 | 0) + $10 | 0) + $11 | 0) + $12 | 0) + $4 | 0) + 128 | 0) >>> 3 | 0) | 0 | 0) | 0)) {
         break block
        }
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($2 + 248 | 0) >> 2] = 1;
        block5 : {
         if (memcmp($2 + 312 | 0 | 0, GOT_data_internal___memory_base + 76592 | 0 | 0, 16 | 0) | 0) {
          break block5
         }
         HEAP32[($2 + 3624 | 0) >> 2] = 0;
        }
        if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
         break block6
        }
        if (!(HEAP32[($2 + 608 | 0) >> 2] | 0)) {
         break block6
        }
        $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        if (!$4) {
         break block6
        }
        FUNCTION_TABLE[$4 | 0]($0, $2 + 256 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
        break block6;
       }
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($4 + 252 | 0) >> 2] = 0;
       $9 = HEAP32[($1 + 176 | 0) >> 2] | 0;
       HEAP32[($4 + 448 | 0) >> 2] = ($9 >>> 0) / (18 >>> 0) | 0;
       HEAP32[($4 + 440 | 0) >> 2] = $9;
       HEAP32[($4 + 436 | 0) >> 2] = $2;
       HEAP32[($4 + 432 | 0) >> 2] = 3;
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $6 = HEAP32[($2 + 452 | 0) >> 2] | 0;
       block10 : {
        block7 : {
         $4 = HEAP32[($2 + 448 | 0) >> 2] | 0;
         if (!$4) {
          break block7
         }
         block8 : {
          if ($4 >>> 0 > 178956970 >>> 0) {
           break block8
          }
          block9 : {
           $2 = emscripten_builtin_realloc($6 | 0, Math_imul($4, 24) | 0) | 0;
           if (!$2) {
            break block9
           }
           HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = $2;
           break block10;
          }
          emscripten_builtin_free($6 | 0);
          $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         }
         HEAP32[($2 + 452 | 0) >> 2] = 0;
         break block11;
        }
        $2 = emscripten_builtin_realloc($6 | 0, 0 | 0) | 0;
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = $2;
        if (!$2) {
         break block11
        }
       }
       block13 : {
        block12 : {
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (HEAP32[($2 + 448 | 0) >> 2] | 0) {
          break block12
         }
         $4 = 0;
         break block13;
        }
        $8 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN >> 2] | 0;
        $7 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN >> 2] | 0;
        $5 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN >> 2] | 0;
        $4 = 0;
        label : while (1) {
         if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0)) {
          break block
         }
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $6 = Math_imul($4, 24);
         i64toi32_i32$2 = $1;
         i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $295 = i64toi32_i32$0;
         i64toi32_i32$0 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $6 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $295;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $7 | 0) | 0)) {
          break block
         }
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $309 = i64toi32_i32$1;
         i64toi32_i32$1 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $6 | 0;
         HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $309;
         HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 188 | 0 | 0, $8 | 0) | 0)) {
          break block
         }
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         HEAP32[(((HEAP32[($2 + 452 | 0) >> 2] | 0) + $6 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 188 | 0) >> 2] | 0;
         $4 = $4 + 1 | 0;
         $6 = HEAP32[($2 + 448 | 0) >> 2] | 0;
         if ($4 >>> 0 < $6 >>> 0) {
          continue label
         }
         break label;
        };
        $4 = Math_imul($6, -18);
       }
       block14 : {
        $4 = $4 + $9 | 0;
        if (!$4) {
         break block14
        }
        if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
         break block
        }
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       }
       HEAP32[($2 + 252 | 0) >> 2] = 1;
       if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
        break block6
       }
       if (!(HEAP32[($2 + 620 | 0) >> 2] | 0)) {
        break block6
       }
       $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       if (!$4) {
        break block6
       }
       FUNCTION_TABLE[$4 | 0]($0, $2 + 432 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
       break block6;
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $7 = HEAP32[(($5 + ($4 << 2 | 0) | 0) + 608 | 0) >> 2] | 0;
      $6 = HEAP32[($1 + 176 | 0) >> 2] | 0;
      block15 : {
       if (!168) {
        break block15
       }
       wasm2js_memory_fill($1 + 8 | 0, 0, 168);
      }
      HEAP32[($1 + 8 | 0) >> 2] = $6;
      HEAP32[$1 >> 2] = $4;
      HEAP32[($1 + 4 | 0) >> 2] = $2;
      block19 : {
       block18 : {
        block16 : {
         if (($4 | 0) != (2 | 0)) {
          break block16
         }
         $2 = GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN;
         $4 = $1 + 16 | 0;
         $2 = (HEAP32[$2 >> 2] | 0) >>> 3 | 0;
         if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $4 | 0, $2 | 0) | 0)) {
          break block
         }
         block17 : {
          if ($6 >>> 0 >= $2 >>> 0) {
           break block17
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
          $2 = 0;
          break block1;
         }
         $6 = $6 - $2 | 0;
         $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(HEAP32[($5 + 1124 | 0) >> 2] | 0)) {
          break block16
         }
         if (($7 | 0) != (0 | 0) ^ !(has_id_filtered_($0 | 0, $4 | 0) | 0) | 0) {
          break block18
         }
         break block19;
        }
        if ($7) {
         break block19
        }
       }
       if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0) {
        break block6
       }
       break block;
      }
      block27 : {
       block20 : {
        block28 : {
         block26 : {
          switch (HEAP32[($1 + 180 | 0) >> 2] | 0 | 0) {
          case 1:
           if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0) {
            break block20
           }
           $5 = 1;
           break block27;
          case 2:
           if (!$6) {
            break block28
           }
           $2 = emscripten_builtin_malloc($6 | 0) | 0;
           HEAP32[($1 + 20 | 0) >> 2] = $2;
           block29 : {
            if ($2) {
             break block29
            }
            HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
            $5 = 1;
            break block27;
           }
           if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $6 | 0) | 0) {
            break block20
           }
           $5 = 1;
           break block27;
          case 4:
           if (read_metadata_vorbiscomment_($0 | 0, $1 + 16 | 0 | 0, $6 | 0) | 0) {
            break block20
           }
           $5 = 1;
           break block27;
          case 5:
           if (read_metadata_cuesheet_($0 | 0, $1 + 16 | 0 | 0) | 0) {
            break block20
           }
           $5 = 1;
           break block27;
          case 6:
           if (read_metadata_picture_($0 | 0, $1 + 16 | 0 | 0) | 0) {
            break block20
           }
           $5 = 1;
           break block27;
          case 0:
          case 3:
           break block20;
          default:
           break block26;
          };
         }
         block31 : {
          block30 : {
           if (!$6) {
            break block30
           }
           $2 = emscripten_builtin_malloc($6 | 0) | 0;
           HEAP32[($1 + 16 | 0) >> 2] = $2;
           if ($2) {
            break block31
           }
           HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
           $5 = 1;
           break block27;
          }
          HEAP32[($1 + 16 | 0) >> 2] = 0;
          break block20;
         }
         if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $6 | 0) | 0) {
          break block20
         }
         $5 = 1;
         break block27;
        }
        HEAP32[($1 + 20 | 0) >> 2] = 0;
       }
       $5 = 0;
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
        break block27
       }
       $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       if (!$4) {
        break block27
       }
       FUNCTION_TABLE[$4 | 0]($0, $1, HEAP32[($2 + 48 | 0) >> 2] | 0);
      }
      block32 : {
       block38 : {
        block34 : {
         switch ((HEAP32[($1 + 180 | 0) >> 2] | 0) + -1 | 0 | 0) {
         case 1:
          $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
          if ($2) {
           break block38
          }
          break block32;
         case 3:
          block39 : {
           $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
           if (!$2) {
            break block39
           }
           emscripten_builtin_free($2 | 0);
          }
          block40 : {
           $4 = HEAP32[($1 + 24 | 0) >> 2] | 0;
           if (!$4) {
            break block40
           }
           $2 = 0;
           label1 : while (1) {
            block41 : {
             $6 = HEAP32[(((HEAP32[($1 + 28 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
             if (!$6) {
              break block41
             }
             emscripten_builtin_free($6 | 0);
             $4 = HEAP32[($1 + 24 | 0) >> 2] | 0;
            }
            $2 = $2 + 1 | 0;
            if ($2 >>> 0 < $4 >>> 0) {
             continue label1
            }
            break label1;
           };
          }
          $2 = HEAP32[($1 + 28 | 0) >> 2] | 0;
          if ($2) {
           break block38
          }
          break block32;
         case 4:
          block42 : {
           $4 = HEAP32[($1 + 164 | 0) >> 2] | 0;
           if (!$4) {
            break block42
           }
           $2 = 0;
           label2 : while (1) {
            block43 : {
             $6 = HEAP32[(((HEAP32[($1 + 168 | 0) >> 2] | 0) + ($2 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
             if (!$6) {
              break block43
             }
             emscripten_builtin_free($6 | 0);
             $4 = HEAP32[($1 + 164 | 0) >> 2] | 0;
            }
            $2 = $2 + 1 | 0;
            if ($2 >>> 0 < $4 >>> 0) {
             continue label2
            }
            break label2;
           };
          }
          $2 = HEAP32[($1 + 168 | 0) >> 2] | 0;
          if ($2) {
           break block38
          }
          break block32;
         case 5:
          block44 : {
           $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
           if (!$2) {
            break block44
           }
           emscripten_builtin_free($2 | 0);
          }
          block45 : {
           $2 = HEAP32[($1 + 24 | 0) >> 2] | 0;
           if (!$2) {
            break block45
           }
           emscripten_builtin_free($2 | 0);
          }
          $2 = HEAP32[($1 + 48 | 0) >> 2] | 0;
          if ($2) {
           break block38
          }
          break block32;
         case 0:
          break block32;
         default:
          break block34;
         };
        }
        $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
        if (!$2) {
         break block32
        }
       }
       emscripten_builtin_free($2 | 0);
      }
      if ($5) {
       break block
      }
     }
     $2 = 1;
     if (!$3) {
      break block1
     }
     block47 : {
      block46 : {
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[$3 >> 2] | 0) {
        break block46
       }
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (!$4) {
        break block46
       }
       $6 = $3 + 6136 | 0;
       $4 = FUNCTION_TABLE[$4 | 0]($0, $6, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0;
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($4) {
        break block46
       }
       $4 = FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($3 + 56 | 0) >> 2] | 0 | 0) | 0;
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (!$4) {
        break block46
       }
       $3 = FLAC__bitreader_get_input_bits_unconsumed(HEAP32[($3 + 56 | 0) >> 2] | 0 | 0) | 0;
       i64toi32_i32$2 = $6;
       i64toi32_i32$0 = HEAP32[$6 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($6 + 4 | 0) >> 2] | 0;
       $590$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $593$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $590$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $593$hi;
       i64toi32_i32$3 = $3 >>> 3 | 0;
       i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $594 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$2 = $6;
       HEAP32[$6 >> 2] = $594;
       HEAP32[($6 + 4 | 0) >> 2] = i64toi32_i32$5;
       break block47;
      }
      i64toi32_i32$2 = $3;
      i64toi32_i32$5 = 0;
      HEAP32[($3 + 6136 | 0) >> 2] = 0;
      HEAP32[($3 + 6140 | 0) >> 2] = i64toi32_i32$5;
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
     break block1;
    }
    $2 = 0;
    break block1;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $2 = 0;
  }
  __stack_pointer = $1 + 192 | 0;
  return $2 | 0;
 }
 
 function frame_sync_($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3$hi = 0, $3 = 0, $18$hi = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block3 : {
   block1 : {
    block : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($2 + 248 | 0) >> 2] | 0)) {
      break block
     }
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[($2 + 304 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2 + 308 | 0) >> 2] | 0;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break block
     }
     $4 = 4;
     i64toi32_i32$1 = HEAP32[($2 + 240 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2 + 244 | 0) >> 2] | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $3 >>> 0 | 0) | 0) {
      break block1
     }
    }
    block2 : {
     if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0) | 0) {
      break block2
     }
     $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
     if (FLAC__bitreader_read_raw_uint32($2 | 0, $1 + 12 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($2 | 0) | 0 | 0) | 0) {
      break block2
     }
     $2 = 0;
     break block3;
    }
    block5 : {
     block4 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (!(HEAP32[($2 + 3520 | 0) >> 2] | 0)) {
       break block4
      }
      $4 = HEAPU8[($2 + 3590 | 0) >> 0] | 0;
      HEAP32[($1 + 12 | 0) >> 2] = $4;
      HEAP32[($2 + 3520 | 0) >> 2] = 0;
      break block5;
     }
     block6 : {
      if (FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
       break block6
      }
      $2 = 0;
      break block3;
     }
     $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    }
    block10 : {
     block7 : {
      if (($4 | 0) != (255 | 0)) {
       break block7
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      block8 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break block8
       }
       $2 = 0;
       break block3;
      }
      block9 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) == (255 | 0)) {
        break block9
       }
       if (($2 & -2 | 0 | 0) != (248 | 0)) {
        break block7
       }
       break block10;
      }
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 3520 | 0) >> 2] = 1;
      HEAP8[($2 + 3590 | 0) >> 0] = 255;
     }
     block11 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
       break block11
      }
      FUNCTION_TABLE[HEAP32[($2 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
     }
     label : while (1) {
      block13 : {
       block12 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(HEAP32[($2 + 3520 | 0) >> 2] | 0)) {
         break block12
        }
        $4 = HEAPU8[($2 + 3590 | 0) >> 0] | 0;
        HEAP32[($1 + 12 | 0) >> 2] = $4;
        HEAP32[($2 + 3520 | 0) >> 2] = 0;
        break block13;
       }
       block14 : {
        if (FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
         break block14
        }
        $2 = 0;
        break block3;
       }
       $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      }
      if (($4 | 0) != (255 | 0)) {
       continue label
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      block15 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break block15
       }
       $2 = 0;
       break block3;
      }
      block16 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != (255 | 0)) {
        break block16
       }
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($2 + 3520 | 0) >> 2] = 1;
       HEAP8[($2 + 3590 | 0) >> 0] = 255;
       continue label;
      }
      if (($2 & -2 | 0 | 0) != (248 | 0)) {
       continue label
      }
      break label;
     };
    }
    HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $2;
    $4 = 3;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $4;
   $2 = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function read_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $7 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $8 = 0, i64toi32_i32$2 = 0, $12 = 0, i64toi32_i32$1 = 0, $10 = 0, $11 = 0, $20 = 0, i64toi32_i32$3 = 0, $19 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, i64toi32_i32$4 = 0, $13 = 0, $13$hi = 0, $445$hi = 0, $447$hi = 0, $448 = 0, $460$hi = 0, $462$hi = 0, $463 = 0, $478$hi = 0, $480$hi = 0, $42 = 0, $481 = 0, $15 = 0, $18 = 0, $1574 = 0, $1661 = 0, $1663$hi = 0, $1665$hi = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $4 = 0;
  HEAP32[$1 >> 2] = 0;
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $6 = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = GOT_data_internal_FLAC__crc16_table;
  $6 = HEAPU16[($7 + ($6 << 1 | 0) | 0) >> 1] | 0;
  FLAC__bitreader_reset_read_crc16(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, (HEAPU16[($7 + ((($6 >>> 8 | 0) ^ (HEAPU8[($5 + 3589 | 0) >> 0] | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ (($6 << 8 | 0) & 65280 | 0) | 0 | 0);
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP8[($3 + 16 | 0) >> 0] = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = HEAPU8[($5 + 3589 | 0) >> 0] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = 2;
  HEAP8[($3 + 17 | 0) >> 0] = $7;
  block : {
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   block26 : {
    block1 : {
     $5 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     if (($5 | 0) == (255 | 0)) {
      break block1
     }
     HEAP8[($3 + 18 | 0) >> 0] = $5;
     HEAP32[($3 + 12 | 0) >> 2] = 3;
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
      break block
     }
     $5 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     if (($5 | 0) == (255 | 0)) {
      break block1
     }
     $8 = ($7 >>> 1 | 0) & 1 | 0;
     $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $5;
     $9 = 1;
     HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
     block2 : {
      block5 : {
       block7 : {
        block6 : {
         block4 : {
          block3 : {
           $5 = HEAPU8[($3 + 18 | 0) >> 0] | 0;
           $6 = $5 >>> 4 | 0;
           switch ($6 | 0) {
           case 1:
            break block3;
           case 2:
           case 3:
           case 4:
           case 5:
            break block4;
           case 6:
           case 7:
            break block5;
           case 8:
           case 9:
           case 10:
           case 11:
           case 12:
           case 13:
           case 14:
           case 15:
            break block6;
           default:
            break block2;
           };
          }
          HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] = 192;
          break block7;
         }
         HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] = 144 << $6 | 0;
         break block7;
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] = 1 << $6 | 0;
       }
       $6 = 0;
      }
      $9 = $8;
     }
     $7 = $5 & 15 | 0;
     HEAP32[($3 + 44 | 0) >> 2] = $7;
     block20 : {
      block23 : {
       block24 : {
        block22 : {
         block21 : {
          switch ($7 | 0) {
          default:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (HEAP32[($5 + 248 | 0) >> 2] | 0) {
            break block22
           }
           $9 = 1;
           break block23;
          case 1:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 88200;
           break block24;
          case 2:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 176400;
           break block24;
          case 3:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 192e3;
           break block24;
          case 4:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 8e3;
           break block24;
          case 5:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 16e3;
           break block24;
          case 6:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 22050;
           break block24;
          case 7:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 24e3;
           break block24;
          case 8:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 32e3;
           break block24;
          case 9:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 44100;
           break block24;
          case 10:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 48e3;
           break block24;
          case 11:
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $7 = 96e3;
           break block24;
          case 12:
          case 13:
          case 14:
           break block20;
          case 15:
           break block21;
          };
         }
         block25 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
           break block25
          }
          FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($5 + 48 | 0) >> 2] | 0);
         }
         $5 = HEAP32[$0 >> 2] | 0;
         HEAP32[$5 >> 2] = 2;
         break block26;
        }
        $7 = HEAP32[($5 + 288 | 0) >> 2] | 0;
       }
       HEAP32[($5 + 1140 | 0) >> 2] = $7;
      }
      $7 = 0;
     }
     $5 = HEAPU8[($3 + 19 | 0) >> 0] | 0;
     $10 = $5 >>> 4 | 0;
     block31 : {
      block28 : {
       block27 : {
        $11 = $5 << 24 >> 24;
        if (($11 | 0) > (-1 | 0)) {
         break block27
        }
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($5 + 1144 | 0) >> 2] = 2;
        $8 = 1;
        $12 = 0;
        block30 : {
         switch ($10 & 7 | 0 | 0) {
         case 1:
          $8 = 2;
          break block28;
         case 0:
          break block28;
         case 2:
          break block30;
         default:
          break block31;
         };
        }
        $8 = 3;
        break block28;
       }
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($5 + 1144 | 0) >> 2] = $10 + 1 | 0;
       $8 = 0;
      }
      HEAP32[($5 + 1148 | 0) >> 2] = $8;
      $12 = !$9;
     }
     $8 = ($11 >>> 1 | 0) & 7 | 0;
     HEAP32[($3 + 44 | 0) >> 2] = $8;
     $10 = 0;
     $9 = 8;
     block35 : {
      block33 : {
       block38 : {
        switch ($8 | 0) {
        default:
         if (!(HEAP32[($5 + 248 | 0) >> 2] | 0)) {
          break block35
         }
         $9 = HEAP32[($5 + 296 | 0) >> 2] | 0;
         break block33;
        case 2:
         $9 = 12;
         break block33;
        case 4:
         $9 = 16;
         break block33;
        case 5:
         $9 = 20;
         break block33;
        case 1:
         break block33;
        case 3:
        case 7:
         break block35;
        case 6:
         break block38;
        };
       }
       $9 = 24;
      }
      HEAP32[($5 + 1152 | 0) >> 2] = $9;
      $10 = $12;
     }
     block43 : {
      block40 : {
       block39 : {
        if ((HEAPU8[($3 + 17 | 0) >> 0] | 0) & 1 | 0) {
         break block39
        }
        if (!(HEAP32[($5 + 248 | 0) >> 2] | 0)) {
         break block40
        }
        if ((HEAP32[($5 + 272 | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 276 | 0) >> 2] | 0 | 0)) {
         break block40
        }
       }
       if (!(FLAC__bitreader_read_utf8_uint64(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $3 + 16 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
        break block
       }
       block41 : {
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
        $13 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break block41
        }
        $7 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 16 | 0) | 0) + -1 | 0) >> 0] | 0;
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($5 + 3520 | 0) >> 2] = 1;
        HEAP8[($5 + 3590 | 0) >> 0] = $7;
        block42 : {
         if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
          break block42
         }
         FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($5 + 48 | 0) >> 2] | 0);
        }
        $5 = HEAP32[$0 >> 2] | 0;
        HEAP32[$5 >> 2] = 2;
        break block26;
       }
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$1 = $5;
       HEAP32[($5 + 1160 | 0) >> 2] = $13;
       HEAP32[($5 + 1164 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[($5 + 1156 | 0) >> 2] = 1;
       break block43;
      }
      if (!(FLAC__bitreader_read_utf8_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, $3 + 16 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
       break block
      }
      block44 : {
       $5 = HEAP32[($3 + 44 | 0) >> 2] | 0;
       if (($5 | 0) != (-1 | 0)) {
        break block44
       }
       $7 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 16 | 0) | 0) + -1 | 0) >> 0] | 0;
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($5 + 3520 | 0) >> 2] = 1;
       HEAP8[($5 + 3590 | 0) >> 0] = $7;
       block45 : {
        if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
         break block45
        }
        FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($5 + 48 | 0) >> 2] | 0);
       }
       $5 = HEAP32[$0 >> 2] | 0;
       HEAP32[$5 >> 2] = 2;
       break block26;
      }
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($9 + 1160 | 0) >> 2] = $5;
      HEAP32[($9 + 1156 | 0) >> 2] = 0;
     }
     $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     block46 : {
      if (!$6) {
       break block46
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
       break block
      }
      $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $9 = HEAP32[($3 + 44 | 0) >> 2] | 0;
      HEAP8[(($3 + 16 | 0) + $5 | 0) >> 0] = $9;
      HEAP32[($3 + 12 | 0) >> 2] = $5 + 1 | 0;
      block47 : {
       if (($6 | 0) != (7 | 0)) {
        break block47
       }
       if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
        break block
       }
       $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       HEAP8[(($3 + 16 | 0) + $5 | 0) >> 0] = $6;
       HEAP32[($3 + 12 | 0) >> 2] = $5 + 1 | 0;
       $9 = $6 | ((HEAP32[($3 + 44 | 0) >> 2] | 0) << 8 | 0) | 0;
       HEAP32[($3 + 44 | 0) >> 2] = $9;
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 1136 | 0) >> 2] = $9 + 1 | 0;
     }
     block48 : {
      if (!$7) {
       break block48
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
       break block
      }
      $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $6 = HEAP32[($3 + 44 | 0) >> 2] | 0;
      HEAP8[(($3 + 16 | 0) + $5 | 0) >> 0] = $6;
      HEAP32[($3 + 12 | 0) >> 2] = $5 + 1 | 0;
      block50 : {
       block51 : {
        block49 : {
         if (($7 | 0) == (12 | 0)) {
          break block49
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
          break block
         }
         $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
         $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP8[(($3 + 16 | 0) + $5 | 0) >> 0] = $6;
         HEAP32[($3 + 12 | 0) >> 2] = $5 + 1 | 0;
         $6 = $6 | ((HEAP32[($3 + 44 | 0) >> 2] | 0) << 8 | 0) | 0;
         HEAP32[($3 + 44 | 0) >> 2] = $6;
         switch ($7 + -12 | 0 | 0) {
         case 0:
          break block49;
         case 1:
          break block50;
         default:
          break block51;
         };
        }
        $6 = Math_imul($6, 1e3);
        break block50;
       }
       $6 = Math_imul($6, 10);
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 1140 | 0) >> 2] = $6;
     }
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
      break block
     }
     $7 = HEAPU8[($3 + 44 | 0) >> 0] | 0;
     $4 = FLAC__crc8($3 + 16 | 0 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
     $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     block52 : {
      if (($4 | 0) == ($7 | 0)) {
       break block52
      }
      block53 : {
       if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
        break block53
       }
       FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($5 + 48 | 0) >> 2] | 0);
      }
      $5 = HEAP32[$0 >> 2] | 0;
      HEAP32[$5 >> 2] = 2;
      break block26;
     }
     HEAP32[($5 + 232 | 0) >> 2] = 0;
     block57 : {
      block54 : {
       if (HEAP32[($5 + 1156 | 0) >> 2] | 0) {
        break block54
       }
       $7 = HEAP32[($5 + 1160 | 0) >> 2] | 0;
       HEAP32[($3 + 44 | 0) >> 2] = $7;
       HEAP32[($5 + 1156 | 0) >> 2] = 1;
       block55 : {
        $4 = HEAP32[($5 + 228 | 0) >> 2] | 0;
        if (!$4) {
         break block55
        }
        i64toi32_i32$2 = 0;
        $445$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $447$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $445$hi;
        i64toi32_i32$1 = $447$hi;
        i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $448 = i64toi32_i32$1;
        i64toi32_i32$1 = $5;
        HEAP32[($5 + 1160 | 0) >> 2] = $448;
        HEAP32[($5 + 1164 | 0) >> 2] = i64toi32_i32$2;
        break block54;
       }
       block56 : {
        if (!(HEAP32[($5 + 248 | 0) >> 2] | 0)) {
         break block56
        }
        $4 = HEAP32[($5 + 272 | 0) >> 2] | 0;
        if (($4 | 0) != (HEAP32[($5 + 276 | 0) >> 2] | 0 | 0)) {
         break block57
        }
        i64toi32_i32$2 = 0;
        $460$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $462$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $460$hi;
        i64toi32_i32$1 = $462$hi;
        i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $463 = i64toi32_i32$1;
        i64toi32_i32$1 = $5;
        HEAP32[($5 + 1160 | 0) >> 2] = $463;
        HEAP32[($5 + 1164 | 0) >> 2] = i64toi32_i32$2;
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($5 + 232 | 0) >> 2] = HEAP32[($5 + 276 | 0) >> 2] | 0;
        break block54;
       }
       block58 : {
        if ($7) {
         break block58
        }
        i64toi32_i32$1 = $5;
        i64toi32_i32$2 = 0;
        HEAP32[($5 + 1160 | 0) >> 2] = 0;
        HEAP32[($5 + 1164 | 0) >> 2] = i64toi32_i32$2;
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($5 + 232 | 0) >> 2] = HEAP32[($5 + 1136 | 0) >> 2] | 0;
        break block54;
       }
       i64toi32_i32$3 = $5;
       i64toi32_i32$2 = HEAP32[($5 + 1136 | 0) >> 2] | 0;
       i64toi32_i32$1 = 0;
       $478$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $480$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $478$hi;
       $42 = i64toi32_i32$2;
       i64toi32_i32$2 = $480$hi;
       i64toi32_i32$2 = __wasm_i64_mul($42 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $481 = i64toi32_i32$2;
       i64toi32_i32$2 = $5;
       HEAP32[($5 + 1160 | 0) >> 2] = $481;
       HEAP32[($5 + 1164 | 0) >> 2] = i64toi32_i32$1;
      }
      block59 : {
       if ((!($11 & 1 | 0) & $10 | 0 | 0) != (1 | 0)) {
        break block59
       }
       $5 = HEAP32[$0 >> 2] | 0;
       break block26;
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     block61 : {
      block60 : {
       if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
        break block60
       }
       FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($5 + 48 | 0) >> 2] | 0);
       break block61;
      }
      HEAP32[($5 + 6152 | 0) >> 2] = (HEAP32[($5 + 6152 | 0) >> 2] | 0) + 1 | 0;
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[$5 >> 2] = 2;
     break block26;
    }
    $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($5 + 3520 | 0) >> 2] = 1;
    HEAP8[($5 + 3590 | 0) >> 0] = 255;
    block62 : {
     if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
      break block62
     }
     FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($5 + 48 | 0) >> 2] | 0);
    }
    $5 = HEAP32[$0 >> 2] | 0;
    HEAP32[$5 >> 2] = 2;
   }
   $4 = 1;
   if ((HEAP32[$5 >> 2] | 0 | 0) == (2 | 0)) {
    break block
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $6 = HEAP32[($5 + 1144 | 0) >> 2] | 0;
   block82 : {
    block64 : {
     block63 : {
      $9 = HEAP32[($5 + 1136 | 0) >> 2] | 0;
      if ($9 >>> 0 > (HEAP32[($5 + 220 | 0) >> 2] | 0) >>> 0) {
       break block63
      }
      if ($6 >>> 0 <= (HEAP32[($5 + 224 | 0) >> 2] | 0) >>> 0) {
       break block64
      }
     }
     block65 : {
      $7 = HEAP32[($5 + 60 | 0) >> 2] | 0;
      if (!$7) {
       break block65
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 60 | 0) >> 2] = 0;
     }
     block66 : {
      $7 = HEAP32[($5 + 3592 | 0) >> 2] | 0;
      if (!$7) {
       break block66
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3592 | 0) >> 2] = 0;
      HEAP32[($5 + 92 | 0) >> 2] = 0;
     }
     block67 : {
      $7 = HEAP32[($5 + 64 | 0) >> 2] | 0;
      if (!$7) {
       break block67
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 64 | 0) >> 2] = 0;
     }
     block68 : {
      $7 = HEAP32[($5 + 3596 | 0) >> 2] | 0;
      if (!$7) {
       break block68
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3596 | 0) >> 2] = 0;
      HEAP32[($5 + 96 | 0) >> 2] = 0;
     }
     block69 : {
      $7 = HEAP32[($5 + 68 | 0) >> 2] | 0;
      if (!$7) {
       break block69
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 68 | 0) >> 2] = 0;
     }
     block70 : {
      $7 = HEAP32[($5 + 3600 | 0) >> 2] | 0;
      if (!$7) {
       break block70
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3600 | 0) >> 2] = 0;
      HEAP32[($5 + 100 | 0) >> 2] = 0;
     }
     block71 : {
      $7 = HEAP32[($5 + 72 | 0) >> 2] | 0;
      if (!$7) {
       break block71
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 72 | 0) >> 2] = 0;
     }
     block72 : {
      $7 = HEAP32[($5 + 3604 | 0) >> 2] | 0;
      if (!$7) {
       break block72
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3604 | 0) >> 2] = 0;
      HEAP32[($5 + 104 | 0) >> 2] = 0;
     }
     block73 : {
      $7 = HEAP32[($5 + 76 | 0) >> 2] | 0;
      if (!$7) {
       break block73
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 76 | 0) >> 2] = 0;
     }
     block74 : {
      $7 = HEAP32[($5 + 3608 | 0) >> 2] | 0;
      if (!$7) {
       break block74
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3608 | 0) >> 2] = 0;
      HEAP32[($5 + 108 | 0) >> 2] = 0;
     }
     block75 : {
      $7 = HEAP32[($5 + 80 | 0) >> 2] | 0;
      if (!$7) {
       break block75
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 80 | 0) >> 2] = 0;
     }
     block76 : {
      $7 = HEAP32[($5 + 3612 | 0) >> 2] | 0;
      if (!$7) {
       break block76
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3612 | 0) >> 2] = 0;
      HEAP32[($5 + 112 | 0) >> 2] = 0;
     }
     block77 : {
      $7 = HEAP32[($5 + 84 | 0) >> 2] | 0;
      if (!$7) {
       break block77
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 84 | 0) >> 2] = 0;
     }
     block78 : {
      $7 = HEAP32[($5 + 3616 | 0) >> 2] | 0;
      if (!$7) {
       break block78
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3616 | 0) >> 2] = 0;
      HEAP32[($5 + 116 | 0) >> 2] = 0;
     }
     block79 : {
      $7 = HEAP32[($5 + 88 | 0) >> 2] | 0;
      if (!$7) {
       break block79
      }
      emscripten_builtin_free($7 + -16 | 0 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 88 | 0) >> 2] = 0;
     }
     block80 : {
      $7 = HEAP32[($5 + 3620 | 0) >> 2] | 0;
      if (!$7) {
       break block80
      }
      emscripten_builtin_free($7 | 0);
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 3620 | 0) >> 2] = 0;
      HEAP32[($5 + 120 | 0) >> 2] = 0;
     }
     block81 : {
      if (!$6) {
       break block81
      }
      if ($9 >>> 0 > 1073741819 >>> 0) {
       break block82
      }
      $8 = ($9 << 2 | 0) + 16 | 0;
      $7 = 0;
      block84 : {
       label : while (1) {
        $5 = emscripten_builtin_malloc($8 | 0) | 0;
        if (!$5) {
         break block82
        }
        i64toi32_i32$2 = $5;
        i64toi32_i32$1 = 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $5 + 8 | 0;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$2 >> 2] = 0;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
        $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0;
        HEAP32[($4 + 60 | 0) >> 2] = $5 + 16 | 0;
        block83 : {
         if (!(FLAC__memory_alloc_aligned_int32_array($9 | 0, $4 + 3592 | 0 | 0, $4 + 92 | 0 | 0) | 0)) {
          break block83
         }
         $7 = $7 + 1 | 0;
         if (($7 | 0) == ($6 | 0)) {
          break block84
         }
         continue label;
        }
        break label;
       };
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
       $4 = 0;
       break block;
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($5 + 224 | 0) >> 2] = $6;
     HEAP32[($5 + 220 | 0) >> 2] = $9;
     $6 = HEAP32[($5 + 1144 | 0) >> 2] | 0;
    }
    block130 : {
     block85 : {
      if (!$6) {
       break block85
      }
      $14 = HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN >> 2] | 0;
      $15 = -1 << $14 | 0;
      $16 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0;
      $17 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN >> 2] | 0;
      $18 = HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN >> 2] | 0;
      $6 = 0;
      label7 : while (1) {
       $7 = HEAP32[($5 + 1152 | 0) >> 2] | 0;
       block89 : {
        block88 : {
         switch ((HEAP32[($5 + 1148 | 0) >> 2] | 0) + -1 | 0 | 0) {
         case 0:
          $7 = $7 + (($6 | 0) == (1 | 0)) | 0;
          break block89;
         case 1:
          $7 = $7 + !$6 | 0;
          break block89;
         case 2:
          break block88;
         default:
          break block89;
         };
        }
        $7 = $7 + (($6 | 0) == (1 | 0)) | 0;
       }
       block112 : {
        block113 : {
         block98 : {
          block94 : {
           block101 : {
            block90 : {
             if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
              break block90
             }
             $5 = HEAP32[($3 + 44 | 0) >> 2] | 0;
             HEAP32[($3 + 44 | 0) >> 2] = $5 & 254 | 0;
             block92 : {
              block91 : {
               $11 = $5 & 1 | 0;
               if (!$11) {
                break block91
               }
               if (!(FLAC__bitreader_read_unary_unsigned(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0) | 0)) {
                break block90
               }
               $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               $4 = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0;
               HEAP32[(($5 + Math_imul($6, 292) | 0) + 1464 | 0) >> 2] = $4;
               if ($7 >>> 0 <= $4 >>> 0) {
                break block90
               }
               $7 = $7 - $4 | 0;
               break block92;
              }
              $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              HEAP32[(($5 + Math_imul($6, 292) | 0) + 1464 | 0) >> 2] = 0;
             }
             block93 : {
              $4 = HEAP32[($3 + 44 | 0) >> 2] | 0;
              if (!($4 & 128 | 0)) {
               break block93
              }
              if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
               break block94
              }
              FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
              break block94;
             }
             block96 : {
              switch ($4 | 0) {
              case 0:
               $4 = HEAP32[(($5 + ($6 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
               $9 = $5 + Math_imul($6, 292) | 0;
               HEAP32[($9 + 1176 | 0) >> 2] = 0;
               if (!(FLAC__bitreader_read_raw_int32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $7 | 0) | 0)) {
                break block90
               }
               $7 = HEAP32[($3 + 16 | 0) >> 2] | 0;
               HEAP32[($9 + 1180 | 0) >> 2] = $7;
               if (!$2) {
                break block98
               }
               $5 = 0;
               $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               if (!(HEAP32[($9 + 1136 | 0) >> 2] | 0)) {
                break block98
               }
               label1 : while (1) {
                HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = $7;
                $5 = $5 + 1 | 0;
                if ($5 >>> 0 < (HEAP32[($9 + 1136 | 0) >> 2] | 0) >>> 0) {
                 continue label1
                }
                break block98;
               };
              case 2:
               $4 = $5 + Math_imul($6, 292) | 0;
               $12 = $4 + 1180 | 0;
               $10 = $6 << 2 | 0;
               $9 = HEAP32[(($5 + $10 | 0) + 92 | 0) >> 2] | 0;
               HEAP32[$12 >> 2] = $9;
               HEAP32[($4 + 1176 | 0) >> 2] = 1;
               $4 = 0;
               block99 : {
                if (!(HEAP32[($5 + 1136 | 0) >> 2] | 0)) {
                 break block99
                }
                label2 : while (1) {
                 if (!(FLAC__bitreader_read_raw_int32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $7 | 0) | 0)) {
                  break block90
                 }
                 HEAP32[($9 + ($4 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
                 $4 = $4 + 1 | 0;
                 $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 $8 = HEAP32[($5 + 1136 | 0) >> 2] | 0;
                 if ($4 >>> 0 < $8 >>> 0) {
                  continue label2
                 }
                 break label2;
                };
                $4 = $8 << 2 | 0;
               }
               if (!$2) {
                break block98
               }
               if (!$4) {
                break block98
               }
               wasm2js_memory_copy(HEAP32[(($5 + $10 | 0) + 60 | 0) >> 2] | 0, HEAP32[$12 >> 2] | 0, $4);
               break block98;
              default:
               break block96;
              };
             }
             block100 : {
              if ($4 >>> 0 > 15 >>> 0) {
               break block100
              }
              if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
               break block101
              }
              FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($5 + 48 | 0) >> 2] | 0);
              break block94;
             }
             block102 : {
              if ($4 >>> 0 > 24 >>> 0) {
               break block102
              }
              $9 = $5 + Math_imul($6, 292) | 0;
              HEAP32[($9 + 1176 | 0) >> 2] = 2;
              $12 = $6 << 2 | 0;
              $8 = HEAP32[(($5 + $12 | 0) + 92 | 0) >> 2] | 0;
              $4 = ($4 >>> 1 | 0) & 7 | 0;
              HEAP32[($9 + 1192 | 0) >> 2] = $4;
              HEAP32[($9 + 1212 | 0) >> 2] = $8;
              $8 = $9 + 1180 | 0;
              block103 : {
               if (!$4) {
                break block103
               }
               $9 = $8 + 16 | 0;
               $5 = 0;
               label3 : while (1) {
                if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $7 | 0) | 0)) {
                 break block90
                }
                HEAP32[($9 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
                $5 = $5 + 1 | 0;
                if (($5 | 0) != ($4 | 0)) {
                 continue label3
                }
                break label3;
               };
               $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              }
              if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $17 | 0) | 0)) {
               break block90
              }
              $7 = HEAP32[($3 + 32 | 0) >> 2] | 0;
              HEAP32[$8 >> 2] = $7;
              $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              block107 : {
               block105 : {
                block104 : {
                 if ($7 >>> 0 > 1 >>> 0) {
                  break block104
                 }
                 if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $16 | 0) | 0)) {
                  break block90
                 }
                 $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 $7 = HEAP32[($3 + 32 | 0) >> 2] | 0;
                 if (((HEAP32[($5 + 1136 | 0) >> 2] | 0) >>> $7 | 0) >>> 0 >= $4 >>> 0) {
                  break block105
                 }
                 block106 : {
                  if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                   break block106
                  }
                  FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
                 }
                 HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
                 break block107;
                }
                block109 : {
                 block108 : {
                  if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                   break block108
                  }
                  FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($5 + 48 | 0) >> 2] | 0);
                  break block109;
                 }
                 HEAP32[($5 + 6152 | 0) >> 2] = (HEAP32[($5 + 6152 | 0) >> 2] | 0) + 1 | 0;
                }
                HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
                break block107;
               }
               HEAP32[($8 + 4 | 0) >> 2] = $7;
               $5 = Math_imul($6, 12);
               HEAP32[($8 + 8 | 0) >> 2] = ((HEAP32[($0 + 4 | 0) >> 2] | 0) + $5 | 0) + 124 | 0;
               block110 : {
                $9 = HEAP32[$8 >> 2] | 0;
                if ($9 >>> 0 >= 2 >>> 0) {
                 break block110
                }
                $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (!(read_residual_partitioned_rice_($0 | 0, $4 | 0, $7 | 0, ($10 + $5 | 0) + 124 | 0 | 0, HEAP32[(($10 + $12 | 0) + 92 | 0) >> 2] | 0 | 0, ($9 | 0) == (1 | 0) | 0) | 0)) {
                 break block90
                }
               }
               if (!$2) {
                break block107
               }
               block111 : {
                $5 = $4 << 2 | 0;
                if (!$5) {
                 break block111
                }
                wasm2js_memory_copy(HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $12 | 0) + 60 | 0) >> 2] | 0, $8 + 16 | 0, $5);
               }
               $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               $9 = $7 + $12 | 0;
               FLAC__fixed_restore_signal(HEAP32[($9 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) - $4 | 0 | 0, $4 | 0, (HEAP32[($9 + 60 | 0) >> 2] | 0) + $5 | 0 | 0);
              }
              if (!$11) {
               break block112
              }
              if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
               break block112
              }
              if ($2) {
               break block113
              }
              break block112;
             }
             block114 : {
              if ($4 >>> 0 > 63 >>> 0) {
               break block114
              }
              block115 : {
               if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                break block115
               }
               FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($5 + 48 | 0) >> 2] | 0);
               break block94;
              }
              HEAP32[($5 + 6152 | 0) >> 2] = (HEAP32[($5 + 6152 | 0) >> 2] | 0) + 1 | 0;
              break block94;
             }
             $12 = $5 + Math_imul($6, 292) | 0;
             HEAP32[($12 + 1176 | 0) >> 2] = 3;
             $19 = $6 << 2 | 0;
             $5 = HEAP32[(($5 + $19 | 0) + 92 | 0) >> 2] | 0;
             $9 = ($4 >>> 1 | 0) & 31 | 0;
             $20 = $9 + 1 | 0;
             HEAP32[($12 + 1192 | 0) >> 2] = $20;
             HEAP32[($12 + 1460 | 0) >> 2] = $5;
             $8 = $12 + 1332 | 0;
             $12 = $12 + 1180 | 0;
             $5 = 0;
             label4 : while (1) {
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $7 | 0) | 0)) {
               break block90
              }
              HEAP32[($8 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
              $4 = ($5 | 0) != ($9 | 0);
              $5 = $5 + 1 | 0;
              if ($4) {
               continue label4
              }
              break label4;
             };
             if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $14 | 0) | 0)) {
              break block90
             }
             block118 : {
              block116 : {
               $5 = HEAP32[($3 + 32 | 0) >> 2] | 0;
               if (($5 ^ $15 | 0 | 0) != (-1 | 0)) {
                break block116
               }
               block117 : {
                $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                 break block117
                }
                FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break block118;
              }
              HEAP32[($12 + 16 | 0) >> 2] = $5 + 1 | 0;
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $18 | 0) | 0)) {
               break block90
              }
              block119 : {
               $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
               if (($5 | 0) > (-1 | 0)) {
                break block119
               }
               block120 : {
                $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                 break block120
                }
                FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break block118;
              }
              HEAP32[($12 + 20 | 0) >> 2] = $5;
              $10 = $12 + 24 | 0;
              $5 = 0;
              label5 : while (1) {
               if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, HEAP32[($12 + 16 | 0) >> 2] | 0 | 0) | 0)) {
                break block90
               }
               HEAP32[($10 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
               $4 = ($5 | 0) != ($9 | 0);
               $5 = $5 + 1 | 0;
               if ($4) {
                continue label5
               }
               break label5;
              };
              if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $17 | 0) | 0)) {
               break block90
              }
              $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
              HEAP32[$12 >> 2] = $4;
              $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              block122 : {
               block121 : {
                if ($4 >>> 0 > 1 >>> 0) {
                 break block121
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $16 | 0) | 0)) {
                 break block90
                }
                $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
                if (((HEAP32[($5 + 1136 | 0) >> 2] | 0) >>> $4 | 0) >>> 0 > $9 >>> 0) {
                 break block122
                }
                block123 : {
                 if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                  break block123
                 }
                 FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
                }
                HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
                break block118;
               }
               block125 : {
                block124 : {
                 if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
                  break block124
                 }
                 FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($5 + 48 | 0) >> 2] | 0);
                 break block125;
                }
                HEAP32[($5 + 6152 | 0) >> 2] = (HEAP32[($5 + 6152 | 0) >> 2] | 0) + 1 | 0;
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break block118;
              }
              HEAP32[($12 + 4 | 0) >> 2] = $4;
              $5 = Math_imul($6, 12);
              HEAP32[($12 + 8 | 0) >> 2] = ((HEAP32[($0 + 4 | 0) >> 2] | 0) + $5 | 0) + 124 | 0;
              block126 : {
               $9 = HEAP32[$12 >> 2] | 0;
               if ($9 >>> 0 >= 2 >>> 0) {
                break block126
               }
               $21 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               if (!(read_residual_partitioned_rice_($0 | 0, $20 | 0, $4 | 0, ($21 + $5 | 0) + 124 | 0 | 0, HEAP32[(($21 + $19 | 0) + 92 | 0) >> 2] | 0 | 0, ($9 | 0) == (1 | 0) | 0) | 0)) {
                break block90
               }
              }
              if (!$2) {
               break block118
              }
              block127 : {
               $5 = $20 << 2 | 0;
               if (!$5) {
                break block127
               }
               wasm2js_memory_copy(HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $19 | 0) + 60 | 0) >> 2] | 0, $8, $5);
              }
              block129 : {
               block128 : {
                $9 = HEAP32[($12 + 16 | 0) >> 2] | 0;
                if ((((Math_clz32($20) ^ 31 | 0) + $7 | 0) + $9 | 0) >>> 0 > 32 >>> 0) {
                 break block128
                }
                $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                $8 = $4 + $19 | 0;
                $5 = (HEAP32[($8 + 60 | 0) >> 2] | 0) + $5 | 0;
                $19 = (HEAP32[($4 + 1136 | 0) >> 2] | 0) - $20 | 0;
                $8 = HEAP32[($8 + 92 | 0) >> 2] | 0;
                $12 = HEAP32[($12 + 20 | 0) >> 2] | 0;
                if ($7 >>> 0 > 16 >>> 0) {
                 break block129
                }
                if ($9 >>> 0 > 16 >>> 0) {
                 break block129
                }
                FUNCTION_TABLE[HEAP32[($4 + 44 | 0) >> 2] | 0 | 0]($8, $19, $10, $20, $12, $5);
                break block118;
               }
               $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               $4 = $7 + $19 | 0;
               FUNCTION_TABLE[HEAP32[($7 + 40 | 0) >> 2] | 0 | 0](HEAP32[($4 + 92 | 0) >> 2] | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) - $20 | 0, $10, $20, HEAP32[($12 + 20 | 0) >> 2] | 0, (HEAP32[($4 + 60 | 0) >> 2] | 0) + $5 | 0);
               break block118;
              }
              FUNCTION_TABLE[HEAP32[($4 + 36 | 0) >> 2] | 0 | 0]($8, $19, $10, $20, $12, $5);
             }
             if (!$11) {
              break block112
             }
             if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
              break block112
             }
             if (!$2) {
              break block112
             }
             break block113;
            }
            $4 = 0;
            break block;
           }
           HEAP32[($5 + 6152 | 0) >> 2] = (HEAP32[($5 + 6152 | 0) >> 2] | 0) + 1 | 0;
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          break block112;
         }
         if (!$2) {
          break block112
         }
         if (!$11) {
          break block112
         }
        }
        $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        HEAP32[($3 + 44 | 0) >> 2] = HEAP32[(($4 + Math_imul($6, 292) | 0) + 1464 | 0) >> 2] | 0;
        if (!(HEAP32[($4 + 1136 | 0) >> 2] | 0)) {
         break block112
        }
        $9 = HEAP32[(($4 + ($6 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
        $5 = 0;
        label6 : while (1) {
         $7 = $9 + ($5 << 2 | 0) | 0;
         HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) << (HEAP32[($3 + 44 | 0) >> 2] | 0) | 0;
         $5 = $5 + 1 | 0;
         if ($5 >>> 0 < (HEAP32[($4 + 1136 | 0) >> 2] | 0) >>> 0) {
          continue label6
         }
         break label6;
        };
       }
       if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
        break block130
       }
       $6 = $6 + 1 | 0;
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($6 >>> 0 < (HEAP32[($5 + 1144 | 0) >> 2] | 0) >>> 0) {
        continue label7
       }
       break label7;
      };
     }
     block131 : {
      if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0) | 0) {
       break block131
      }
      $4 = 0;
      HEAP32[($3 + 16 | 0) >> 2] = 0;
      $5 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
      block132 : {
       $5 = FLAC__bitreader_read_raw_uint32($5 | 0, $3 + 16 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($5 | 0) | 0 | 0) | 0;
       if (!$5) {
        break block132
       }
       if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
        break block132
       }
       block133 : {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
         break block133
        }
        FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($5 + 48 | 0) >> 2] | 0);
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
       break block131;
      }
      if (!$5) {
       break block
      }
     }
     $4 = 1;
     if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break block
     }
     $5 = FLAC__bitreader_get_read_crc16(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
     $4 = 0;
     if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     block135 : {
      block134 : {
       if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break block134
       }
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (!$2) {
        break block135
       }
       block138 : {
        switch ((HEAP32[($5 + 1148 | 0) >> 2] | 0) + -1 | 0 | 0) {
        case 1:
         if (!(HEAP32[($5 + 1136 | 0) >> 2] | 0)) {
          break block135
         }
         $8 = HEAP32[($5 + 60 | 0) >> 2] | 0;
         $11 = HEAP32[($5 + 64 | 0) >> 2] | 0;
         $7 = 0;
         label8 : while (1) {
          $6 = $7 << 2 | 0;
          $9 = $8 + $6 | 0;
          HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[($11 + $6 | 0) >> 2] | 0) | 0;
          $7 = $7 + 1 | 0;
          if ($7 >>> 0 < (HEAP32[($5 + 1136 | 0) >> 2] | 0) >>> 0) {
           continue label8
          }
          break block135;
         };
        case 0:
         if (!(HEAP32[($5 + 1136 | 0) >> 2] | 0)) {
          break block135
         }
         $8 = HEAP32[($5 + 64 | 0) >> 2] | 0;
         $11 = HEAP32[($5 + 60 | 0) >> 2] | 0;
         $7 = 0;
         label9 : while (1) {
          $6 = $7 << 2 | 0;
          $9 = $8 + $6 | 0;
          HEAP32[$9 >> 2] = (HEAP32[($11 + $6 | 0) >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0;
          $7 = $7 + 1 | 0;
          if ($7 >>> 0 < (HEAP32[($5 + 1136 | 0) >> 2] | 0) >>> 0) {
           continue label9
          }
          break block135;
         };
        case 2:
         break block138;
        default:
         break block135;
        };
       }
       if (!(HEAP32[($5 + 1136 | 0) >> 2] | 0)) {
        break block135
       }
       $11 = HEAP32[($5 + 64 | 0) >> 2] | 0;
       $12 = HEAP32[($5 + 60 | 0) >> 2] | 0;
       $7 = 0;
       label10 : while (1) {
        $6 = $7 << 2 | 0;
        $9 = $12 + $6 | 0;
        $1574 = $9;
        $8 = $11 + $6 | 0;
        $6 = HEAP32[$8 >> 2] | 0;
        $9 = $6 & 1 | 0 | ((HEAP32[$9 >> 2] | 0) << 1 | 0) | 0;
        HEAP32[$1574 >> 2] = ($9 + $6 | 0) >> 1 | 0;
        HEAP32[$8 >> 2] = ($9 - $6 | 0) >> 1 | 0;
        $7 = $7 + 1 | 0;
        if ($7 >>> 0 < (HEAP32[($5 + 1136 | 0) >> 2] | 0) >>> 0) {
         continue label10
        }
        break block135;
       };
      }
      block139 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[($5 + 3632 | 0) >> 2] | 0) {
        break block139
       }
       FUNCTION_TABLE[HEAP32[($5 + 32 | 0) >> 2] | 0 | 0]($0, 2, HEAP32[($5 + 48 | 0) >> 2] | 0);
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      }
      if (!$2) {
       break block135
      }
      if (!(HEAP32[($5 + 1144 | 0) >> 2] | 0)) {
       break block135
      }
      $7 = 0;
      label11 : while (1) {
       block140 : {
        $6 = (HEAP32[($5 + 1136 | 0) >> 2] | 0) << 2 | 0;
        if (!$6) {
         break block140
        }
        wasm2js_memory_fill(HEAP32[(($5 + ($7 << 2 | 0) | 0) + 60 | 0) >> 2] | 0, 0, $6);
       }
       $7 = $7 + 1 | 0;
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 < (HEAP32[($5 + 1144 | 0) >> 2] | 0) >>> 0) {
        continue label11
       }
       break label11;
      };
     }
     HEAP32[$1 >> 2] = 1;
     block141 : {
      $7 = HEAP32[($5 + 232 | 0) >> 2] | 0;
      if (!$7) {
       break block141
      }
      HEAP32[($5 + 228 | 0) >> 2] = $7;
     }
     $7 = HEAP32[$0 >> 2] | 0;
     HEAP32[($7 + 8 | 0) >> 2] = HEAP32[($5 + 1144 | 0) >> 2] | 0;
     HEAP32[($7 + 12 | 0) >> 2] = HEAP32[($5 + 1148 | 0) >> 2] | 0;
     HEAP32[($7 + 16 | 0) >> 2] = HEAP32[($5 + 1152 | 0) >> 2] | 0;
     HEAP32[($7 + 20 | 0) >> 2] = HEAP32[($5 + 1140 | 0) >> 2] | 0;
     $6 = HEAP32[($5 + 1136 | 0) >> 2] | 0;
     HEAP32[($7 + 24 | 0) >> 2] = $6;
     $1661 = $5;
     i64toi32_i32$3 = $5;
     i64toi32_i32$1 = HEAP32[($5 + 1160 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($5 + 1164 | 0) >> 2] | 0;
     $1663$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1665$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1663$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = $1665$hi;
     i64toi32_i32$0 = $6;
     i64toi32_i32$4 = i64toi32_i32$3 + $6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < $6 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$3 = $1661;
     HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] = i64toi32_i32$5;
     block142 : {
      if (!$2) {
       break block142
      }
      $5 = write_audio_frame_to_client_($0 | 0, $5 + 1136 | 0 | 0, $5 + 60 | 0 | 0) | 0;
      $7 = HEAP32[$0 >> 2] | 0;
      if (!$5) {
       break block142
      }
      HEAP32[$7 >> 2] = 7;
      break block;
     }
     HEAP32[$7 >> 2] = 2;
    }
    $4 = 1;
    break block;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $4 = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return $4 | 0;
 }
 
 function has_id_filtered_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 1124 | 0) >> 2] | 0;
   if ($2) {
    break block
   }
   return 0 | 0;
  }
  $3 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
  $4 = HEAP32[($0 + 1120 | 0) >> 2] | 0;
  $0 = 0;
  block1 : {
   label : while (1) {
    if (!(memcmp($4 + Math_imul($3, $0) | 0 | 0, $1 | 0, $3 | 0) | 0)) {
     break block1
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($2 | 0)) {
     continue label
    }
    break label;
   };
   return 0 | 0;
  }
  return 1 | 0;
 }
 
 function read_metadata_vorbiscomment_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, i64toi32_i32$0 = 0, $6 = 0, $8 = 0;
  block9 : {
   block7 : {
    block1 : {
     block : {
      if ($2 >>> 0 < 8 >>> 0) {
       break block
      }
      $3 = 0;
      if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0) | 0)) {
       break block1
      }
      $2 = $2 + -8 | 0;
      block5 : {
       block2 : {
        $4 = HEAP32[$1 >> 2] | 0;
        if (!$4) {
         break block2
        }
        block3 : {
         if ($2 >>> 0 >= $4 >>> 0) {
          break block3
         }
         i64toi32_i32$0 = 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
         break block;
        }
        $5 = emscripten_builtin_malloc($4 + 1 | 0 | 0) | 0;
        HEAP32[($1 + 4 | 0) >> 2] = $5;
        block4 : {
         if ($5) {
          break block4
         }
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
         return 0 | 0;
        }
        if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0)) {
         break block1
        }
        $2 = $2 - $4 | 0;
        HEAP8[((HEAP32[($1 + 4 | 0) >> 2] | 0) + (HEAP32[$1 >> 2] | 0) | 0) >> 0] = 0;
        break block5;
       }
       HEAP32[($1 + 4 | 0) >> 2] = 0;
      }
      $4 = $1 + 8 | 0;
      if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break block1
      }
      block6 : {
       $3 = HEAP32[$4 >> 2] | 0;
       if ($3 >>> 0 < 100001 >>> 0) {
        break block6
       }
       HEAP32[$4 >> 2] = 0;
       return 0 | 0;
      }
      if (!$3) {
       break block
      }
      $3 = safe_malloc_mul_2op_p($3 | 0, 8 | 0) | 0;
      HEAP32[($1 + 12 | 0) >> 2] = $3;
      if (!$3) {
       break block7
      }
      if (!(HEAP32[$4 >> 2] | 0)) {
       break block
      }
      $5 = 0;
      label : while (1) {
       $6 = $5 << 3 | 0;
       $3 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + $6 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$0;
       block8 : {
        if ($2 >>> 0 > 3 >>> 0) {
         break block8
        }
        HEAP32[$4 >> 2] = $5;
        break block;
       }
       if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 | 0) | 0)) {
        break block9
       }
       $2 = $2 + -4 | 0;
       block15 : {
        block10 : {
         $7 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + $6 | 0;
         $3 = HEAP32[$7 >> 2] | 0;
         if (!$3) {
          break block10
         }
         block11 : {
          if ($2 >>> 0 >= $3 >>> 0) {
           break block11
          }
          HEAP32[$4 >> 2] = $5;
          break block;
         }
         $8 = emscripten_builtin_malloc($3 + 1 | 0 | 0) | 0;
         HEAP32[($7 + 4 | 0) >> 2] = $8;
         block12 : {
          if ($8) {
           break block12
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
          break block9;
         }
         block13 : {
          if (!$3) {
           break block13
          }
          wasm2js_memory_fill($8, 0, $3);
         }
         $2 = $2 - $3 | 0;
         $3 = FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, HEAP32[$7 >> 2] | 0 | 0) | 0;
         $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         block14 : {
          if ($3) {
           break block14
          }
          $3 = $5 << 3 | 0;
          emscripten_builtin_free(HEAP32[(($7 + $3 | 0) + 4 | 0) >> 2] | 0 | 0);
          HEAP32[(((HEAP32[($1 + 12 | 0) >> 2] | 0) + $3 | 0) + 4 | 0) >> 2] = 0;
          HEAP32[($1 + 8 | 0) >> 2] = $5;
          break block;
         }
         $3 = $7 + $6 | 0;
         HEAP8[((HEAP32[($3 + 4 | 0) >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) >> 0] = 0;
         break block15;
        }
        HEAP32[($7 + 4 | 0) >> 2] = 0;
       }
       $5 = $5 + 1 | 0;
       if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        continue label
       }
       break label;
      };
     }
     block16 : {
      if (!$2) {
       break block16
      }
      block17 : {
       if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
        break block17
       }
       emscripten_builtin_free(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0);
       HEAP32[($1 + 12 | 0) >> 2] = 0;
      }
      if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 | 0) | 0) {
       break block16
      }
      return 0 | 0;
     }
     $3 = 1;
    }
    return $3 | 0;
   }
   HEAP32[$4 >> 2] = 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   return 0 | 0;
  }
  HEAP32[$4 >> 2] = $5;
  return 0 | 0;
 }
 
 function read_metadata_cuesheet_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $16 = 0, $15 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  block : {
   if (!160) {
    break block
   }
   wasm2js_memory_fill($1, 0, 160);
  }
  $4 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN;
  block1 : {
   if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, (HEAP32[$4 >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
    break block1
   }
   if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 136 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $3 = 0;
   HEAP32[($1 + 144 | 0) >> 2] = (HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) != (0 | 0);
   if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   HEAP32[($1 + 148 | 0) >> 2] = $3;
   block2 : {
    if ($3) {
     break block2
    }
    $3 = 1;
    break block1;
   }
   $3 = emscripten_builtin_calloc($3 | 0, 32 | 0) | 0;
   HEAP32[($1 + 152 | 0) >> 2] = $3;
   block4 : {
    block3 : {
     if (!$3) {
      break block3
     }
     $5 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN >> 2] | 0) >>> 3 | 0;
     $6 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN >> 2] | 0;
     $7 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN >> 2] | 0;
     $8 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN >> 2] | 0;
     $9 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN >> 2] | 0;
     $10 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN >> 2] | 0;
     $11 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN >> 2] | 0;
     $12 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN >> 2] | 0;
     $13 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN >> 2] | 0;
     $14 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN >> 2] | 0;
     $15 = 0;
     label1 : while (1) {
      $4 = (HEAP32[($1 + 152 | 0) >> 2] | 0) + ($15 << 5 | 0) | 0;
      if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 | 0, $14 | 0) | 0)) {
       break block4
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $13 | 0) | 0)) {
       break block4
      }
      HEAP8[($4 + 8 | 0) >> 0] = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 + 9 | 0 | 0, $5 | 0) | 0)) {
       break block4
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $12 | 0) | 0)) {
       break block4
      }
      HEAP8[($4 + 22 | 0) >> 0] = (HEAPU8[($4 + 22 | 0) >> 0] | 0) & 254 | 0 | ((HEAPU8[($2 + 12 | 0) >> 0] | 0) & 1 | 0) | 0;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $11 | 0) | 0)) {
       break block4
      }
      HEAP8[($4 + 22 | 0) >> 0] = ((HEAPU8[($2 + 12 | 0) >> 0] | 0) << 1 | 0) & 2 | 0 | ((HEAPU8[($4 + 22 | 0) >> 0] | 0) & 253 | 0) | 0;
      if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $10 | 0) | 0)) {
       break block4
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $9 | 0) | 0)) {
       break block4
      }
      $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      HEAP8[($4 + 23 | 0) >> 0] = $3;
      block5 : {
       $16 = $3 & 255 | 0;
       if (!$16) {
        break block5
       }
       $3 = emscripten_builtin_calloc($16 | 0, 16 | 0) | 0;
       HEAP32[($4 + 24 | 0) >> 2] = $3;
       if (!$3) {
        break block3
       }
       $3 = 0;
       $17 = 0;
       if (!$16) {
        break block5
       }
       label : while (1) {
        $16 = (HEAP32[($4 + 24 | 0) >> 2] | 0) + ($17 << 4 | 0) | 0;
        if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $16 | 0, $8 | 0) | 0)) {
         break block1
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $7 | 0) | 0)) {
         break block1
        }
        HEAP8[($16 + 8 | 0) >> 0] = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 | 0) | 0)) {
         break block1
        }
        $17 = $17 + 1 | 0;
        if ($17 >>> 0 < (HEAPU8[($4 + 23 | 0) >> 0] | 0) >>> 0) {
         continue label
        }
        break label;
       };
      }
      $3 = 1;
      $15 = $15 + 1 | 0;
      if ($15 >>> 0 < (HEAP32[($1 + 148 | 0) >> 2] | 0) >>> 0) {
       continue label1
      }
      break block1;
     };
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   }
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function read_metadata_picture_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  block : {
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   HEAP32[$1 >> 2] = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   block3 : {
    block2 : {
     block1 : {
      $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (($4 | 0) != (-1 | 0)) {
       break block1
      }
      HEAP32[($1 + 4 | 0) >> 2] = 0;
      break block2;
     }
     $5 = emscripten_builtin_malloc($4 + 1 | 0 | 0) | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $5;
     if ($5) {
      break block3
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break block;
   }
   $3 = 0;
   block5 : {
    block4 : {
     if ($4) {
      break block4
     }
     $4 = 0;
     break block5;
    }
    block6 : {
     if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0) {
      break block6
     }
     $3 = 0;
     break block;
    }
    $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   }
   HEAP8[($5 + $4 | 0) >> 0] = 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   block9 : {
    block8 : {
     block7 : {
      $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (($4 | 0) != (-1 | 0)) {
       break block7
      }
      HEAP32[($1 + 8 | 0) >> 2] = 0;
      break block8;
     }
     $5 = emscripten_builtin_malloc($4 + 1 | 0 | 0) | 0;
     HEAP32[($1 + 8 | 0) >> 2] = $5;
     if ($5) {
      break block9
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break block;
   }
   $3 = 0;
   block11 : {
    block10 : {
     if ($4) {
      break block10
     }
     $4 = 0;
     break block11;
    }
    block12 : {
     if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0) {
      break block12
     }
     $3 = 0;
     break block;
    }
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   }
   HEAP8[($5 + $4 | 0) >> 0] = 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 16 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 20 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 24 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 28 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
   $5 = emscripten_builtin_malloc(($4 >>> 0 > 1 >>> 0 ? $4 : 1) | 0) | 0;
   HEAP32[($1 + 32 | 0) >> 2] = $5;
   block13 : {
    if ($5) {
     break block13
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break block;
   }
   block14 : {
    if (!$4) {
     break block14
    }
    if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0)) {
     break block
    }
   }
   $3 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function read_residual_partitioned_rice_($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $7 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] | 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $9 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER;
  $10 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN;
  $11 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN;
  block2 : {
   block : {
    if (!(FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($3 | 0, ($2 >>> 0 > 6 >>> 0 ? $2 : 6) | 0) | 0)) {
     break block
    }
    $12 = $2 ? $7 >>> $2 | 0 : $7 - $1 | 0;
    $13 = HEAP32[($5 ? $9 : $8) >> 2] | 0;
    $10 = HEAP32[($5 ? $11 : $10) >> 2] | 0;
    $11 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0;
    $8 = 0;
    $5 = 0;
    label1 : while (1) {
     block1 : {
      if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $10 | 0) | 0) {
       break block1
      }
      $7 = 0;
      break block2;
     }
     $9 = $8 << 2 | 0;
     $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
     HEAP32[((HEAP32[$3 >> 2] | 0) + $9 | 0) >> 2] = $7;
     block4 : {
      block3 : {
       if ($7 >>> 0 >= $13 >>> 0) {
        break block3
       }
       $7 = 0;
       HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $9 | 0) >> 2] = 0;
       $9 = $12 - ($2 ? ($8 ? 0 : $1) : 0) | 0;
       if (!(FLAC__bitreader_read_rice_signed_block(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 + ($5 << 2 | 0) | 0 | 0, $9 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0)) {
        break block2
       }
       $5 = $9 + $5 | 0;
       break block4;
      }
      block5 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $11 | 0) | 0) {
        break block5
       }
       $7 = 0;
       break block2;
      }
      HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $9 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
      $7 = $2 ? ($8 ? 0 : $1) : 0;
      if ($7 >>> 0 >= $12 >>> 0) {
       break block4
      }
      label : while (1) {
       block6 : {
        if (FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0) {
         break block6
        }
        $7 = 0;
        break block2;
       }
       HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($6 + 8 | 0) >> 2] | 0;
       $5 = $5 + 1 | 0;
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($12 | 0)) {
        continue label
       }
       break label;
      };
     }
     $7 = 1;
     $8 = $8 + 1 | 0;
     if (!($8 >>> $2 | 0)) {
      continue label1
     }
     break block2;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $7 = 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $7 | 0;
 }
 
 function write_audio_frame_to_client_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3 = 0, $8 = 0, $6$hi = 0, $15 = 0, $6 = 0, $7$hi = 0, $14 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $5$hi = 0, $10 = 0, $5 = 0, $38 = 0, $38$hi = 0, $41$hi = 0, $12 = 0, $142 = 0, $144 = 0, $144$hi = 0, $146 = 0, $146$hi = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  block2 : {
   block : {
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[($4 + 3632 | 0) >> 2] | 0)) {
     break block
    }
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $5 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    HEAP32[($4 + 6156 | 0) >> 2] = 1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 6144 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 6148 | 0) >> 2] | 0;
    $7 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    block1 : {
     if (!2384) {
      break block1
     }
     wasm2js_memory_copy($4 + 3752 | 0, $1, 2384);
    }
    $4 = 0;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block2
    }
    i64toi32_i32$2 = i64toi32_i32$1;
    $38 = $7;
    $38$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $41$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $38$hi;
    i64toi32_i32$2 = $38;
    i64toi32_i32$3 = $41$hi;
    i64toi32_i32$0 = i64toi32_i32$4;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break block2
    }
    $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($8 + 3632 | 0) >> 2] = 0;
    block3 : {
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$4;
     $9 = i64toi32_i32$1;
     if (!i64toi32_i32$1) {
      break block3
     }
     block4 : {
      $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$1) {
       break block4
      }
      $10 = $1 & 3 | 0;
      $11 = 0;
      $4 = 0;
      block5 : {
       if ($1 >>> 0 < 4 >>> 0) {
        break block5
       }
       $12 = $1 & -4 | 0;
       $4 = 0;
       $13 = 0;
       label : while (1) {
        $1 = $4 << 2 | 0;
        $14 = $9 << 2 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + $14 | 0;
        $15 = $1 | 4 | 0;
        HEAP32[($3 + $15 | 0) >> 2] = (HEAP32[($2 + $15 | 0) >> 2] | 0) + $14 | 0;
        $15 = $1 | 8 | 0;
        HEAP32[($3 + $15 | 0) >> 2] = (HEAP32[($2 + $15 | 0) >> 2] | 0) + $14 | 0;
        $1 = $1 | 12 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + $14 | 0;
        $4 = $4 + 4 | 0;
        $13 = $13 + 4 | 0;
        if (($13 | 0) != ($12 | 0)) {
         continue label
        }
        break label;
       };
      }
      if (!$10) {
       break block4
      }
      label1 : while (1) {
       $1 = $4 << 2 | 0;
       HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + ($9 << 2 | 0) | 0;
       $4 = $4 + 1 | 0;
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($10 | 0)) {
        continue label1
       }
       break label1;
      };
     }
     HEAP32[($8 + 3752 | 0) >> 2] = (HEAP32[($8 + 3752 | 0) >> 2] | 0) - $9 | 0;
     $142 = $8;
     i64toi32_i32$2 = $8;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 3776 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3780 | 0) >> 2] | 0;
     $144 = i64toi32_i32$4;
     $144$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $146 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $146$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $144$hi;
     i64toi32_i32$0 = $144;
     i64toi32_i32$2 = $146$hi;
     i64toi32_i32$3 = $146;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$0 = $142;
     HEAP32[(i64toi32_i32$0 + 3776 | 0) >> 2] = i64toi32_i32$5;
     HEAP32[(i64toi32_i32$0 + 3780 | 0) >> 2] = i64toi32_i32$1;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $4 = FUNCTION_TABLE[HEAP32[($4 + 24 | 0) >> 2] | 0 | 0]($0, $4 + 3752 | 0, $3, HEAP32[($4 + 48 | 0) >> 2] | 0) | 0;
     break block2;
    }
    $4 = FUNCTION_TABLE[HEAP32[($8 + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, HEAP32[($8 + 48 | 0) >> 2] | 0) | 0;
    break block2;
   }
   block7 : {
    block6 : {
     if (HEAP32[($4 + 248 | 0) >> 2] | 0) {
      break block6
     }
     HEAP32[($4 + 3624 | 0) >> 2] = 0;
     break block7;
    }
    if (!(HEAP32[($4 + 3624 | 0) >> 2] | 0)) {
     break block7
    }
    block8 : {
     if (FLAC__MD5Accumulate($4 + 3636 | 0 | 0, $2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, ((HEAP32[($1 + 16 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0 | 0) | 0) {
      break block8
     }
     $4 = 1;
     break block2;
    }
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[($4 + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, HEAP32[($4 + 48 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_metadata($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block3 : {
   block2 : {
    label : while (1) {
     $1 = 0;
     block1 : {
      switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
      case 0:
       if (find_metadata_($0 | 0) | 0) {
        continue label
       }
       break block3;
      case 1:
       break block1;
      case 2:
      case 3:
      case 4:
      case 7:
       break block2;
      default:
       break block3;
      };
     }
     if (read_metadata_($0 | 0) | 0) {
      continue label
     }
     break block3;
    };
   }
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_stream($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block5 : {
   label : while (1) {
    $2 = 0;
    block3 : {
     switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
     case 0:
      if (find_metadata_($0 | 0) | 0) {
       continue label
      }
      break block5;
     case 1:
      if (read_metadata_($0 | 0) | 0) {
       continue label
      }
      break block5;
     case 2:
      if (frame_sync_($0 | 0) | 0) {
       continue label
      }
     case 4:
     case 7:
      $2 = 1;
      break block5;
     case 3:
      break block3;
     default:
      break block5;
     };
    }
    if (read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0) {
     continue label
    }
    break label;
   };
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function read_callback_proxy_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $1, $2, $3) | 0;
  return ($0 ? (($0 | 0) == (1 | 0) ? 1 : 5) : 0) | 0;
 }
 
 function _emscripten_tempret_set($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 65536;
  __stack_end = (0 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function FLAC__bitwriter_new() {
  return emscripten_builtin_calloc(1 | 0, 20 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  emscripten_builtin_free($0 | 0);
 }
 
 function FLAC__bitwriter_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_init($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 8192;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  $1 = emscripten_builtin_malloc(32768 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  return ($1 | 0) != (0 | 0) | 0;
 }
 
 function FLAC__bitwriter_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_get_write_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block1 : {
   block : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break block
    }
    $0 = 0;
    break block1;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc16(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
   $0 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitwriter_get_buffer($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = 0;
  block : {
   $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   if ($4 & 7 | 0) {
    break block
   }
   block2 : {
    block1 : {
     if ($4) {
      break block1
     }
     $5 = HEAP32[$0 >> 2] | 0;
     $3 = 0;
     break block2;
    }
    block4 : {
     block3 : {
      $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if (($6 | 0) == (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      $5 = HEAP32[$0 >> 2] | 0;
      break block4;
     }
     $7 = HEAP32[$0 >> 2] | 0;
     block5 : {
      $8 = ($4 + 63 | 0) >>> 5 | 0;
      $5 = $6 + $8 | 0;
      if ($6 >>> 0 < $5 >>> 0) {
       break block5
      }
      $5 = $7;
      break block4;
     }
     block7 : {
      block6 : {
       $4 = $8 & 1023 | 0;
       $4 = $4 ? ($5 - $4 | 0) + 1024 | 0 : $5;
       if (!$4) {
        break block6
       }
       if ($4 >>> 0 > 1073741823 >>> 0) {
        break block
       }
       $5 = emscripten_builtin_realloc($7 | 0, $4 << 2 | 0 | 0) | 0;
       if ($5) {
        break block7
       }
       emscripten_builtin_free($7 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $5 = emscripten_builtin_realloc($7 | 0, 0 | 0) | 0;
      if (!$5) {
       break block
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $4;
     HEAP32[$0 >> 2] = $5;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << (32 - $4 | 0) | 0;
    HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 3 | 0;
   }
   HEAP32[$1 >> 2] = $5;
   HEAP32[$2 >> 2] = $3 + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) | 0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_release_buffer($0) {
  $0 = $0 | 0;
 }
 
 function FLAC__bitwriter_get_write_crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block1 : {
   block : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break block
    }
    $0 = 0;
    break block1;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc8(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
   $0 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitwriter_write_zeroes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0;
  block3 : {
   block : {
    if (!$1) {
     break block
    }
    block1 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($2 >>> 0 > ($3 + $1 | 0) >>> 0) {
      break block1
     }
     $3 = ((($1 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($3 >>> 0 <= $2 >>> 0) {
      break block1
     }
     $4 = HEAP32[$0 >> 2] | 0;
     block4 : {
      block2 : {
       $2 = ($3 - $2 | 0) & 1023 | 0;
       $3 = $2 ? ($3 - $2 | 0) + 1024 | 0 : $3;
       if (!$3) {
        break block2
       }
       $2 = 0;
       if ($3 >>> 0 > 1073741823 >>> 0) {
        break block3
       }
       $5 = emscripten_builtin_realloc($4 | 0, $3 << 2 | 0 | 0) | 0;
       if ($5) {
        break block4
       }
       emscripten_builtin_free($4 | 0);
       return 0 | 0;
      }
      $2 = 0;
      $5 = emscripten_builtin_realloc($4 | 0, 0 | 0) | 0;
      if (!$5) {
       break block3
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $3;
     HEAP32[$0 >> 2] = $5;
    }
    block5 : {
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$2) {
      break block5
     }
     $3 = 32 - $2 | 0;
     $3 = $3 >>> 0 < $1 >>> 0 ? $3 : $1;
     $4 = $3 + $2 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $4;
     $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $3 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     if (($4 | 0) != (32 | 0)) {
      break block
     }
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 & 65280 | 0) << 8 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 16 | 0) >> 2] = 0;
     $1 = $1 - $3 | 0;
    }
    block6 : {
     if ($1 >>> 0 < 32 >>> 0) {
      break block6
     }
     $2 = HEAP32[$0 >> 2] | 0;
     block7 : {
      $6 = $1 + -32 | 0;
      if (($6 & 96 | 0 | 0) == (96 | 0)) {
       break block7
      }
      $5 = (($6 >>> 5 | 0) + 1 | 0) & 3 | 0;
      $3 = 0;
      label : while (1) {
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
       HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] = 0;
       $1 = $1 + -32 | 0;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($5 | 0)) {
        continue label
       }
       break label;
      };
     }
     if ($6 >>> 0 < 96 >>> 0) {
      break block6
     }
     label1 : while (1) {
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] = 0;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] = 0;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] = 0;
      $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
      HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] = 0;
      $1 = $1 + -128 | 0;
      if ($1 >>> 0 > 31 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if (!$1) {
     break block
    }
    HEAP32[($0 + 16 | 0) >> 2] = $1;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
   }
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  block1 : {
   block : {
    if ($2 >>> 0 > 31 >>> 0) {
     break block
    }
    $3 = 0;
    if ($1 >>> $2 | 0) {
     break block1
    }
   }
   $3 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, $2 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32_nocheck($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $3 = 0, $4 = 0;
  $3 = 0;
  block : {
   if (!$0) {
    break block
   }
   if ($2 >>> 0 > 32 >>> 0) {
    break block
   }
   $4 = HEAP32[$0 >> 2] | 0;
   if (!$4) {
    break block
   }
   block1 : {
    if ($2) {
     break block1
    }
    return 1 | 0;
   }
   block3 : {
    block2 : {
     $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($5 >>> 0 <= ($6 + $2 | 0) >>> 0) {
      break block2
     }
     $5 = $4;
     break block3;
    }
    block4 : {
     $6 = ((($2 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $6 | 0;
     if ($6 >>> 0 > $5 >>> 0) {
      break block4
     }
     $5 = $4;
     break block3;
    }
    block6 : {
     block5 : {
      $5 = ($6 - $5 | 0) & 1023 | 0;
      $6 = $5 ? ($6 - $5 | 0) + 1024 | 0 : $6;
      if (!$6) {
       break block5
      }
      if ($6 >>> 0 > 1073741823 >>> 0) {
       break block
      }
      $5 = emscripten_builtin_realloc($4 | 0, $6 << 2 | 0 | 0) | 0;
      if ($5) {
       break block6
      }
      emscripten_builtin_free($4 | 0);
      return 0 | 0;
     }
     $3 = 0;
     $5 = emscripten_builtin_realloc($4 | 0, 0 | 0) | 0;
     if (!$5) {
      break block
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $6;
    HEAP32[$0 >> 2] = $5;
   }
   block7 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = 32 - $3 | 0;
    if ($2 >>> 0 >= $4 >>> 0) {
     break block7
    }
    HEAP32[($0 + 16 | 0) >> 2] = $3 + $2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | $1 | 0;
    return 1 | 0;
   }
   block8 : {
    if (!$3) {
     break block8
    }
    $2 = $2 - $4 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $2;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $2 | 0) | 0;
    HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 & 65280 | 0) << 8 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    return 1 | 0;
   }
   $3 = 1;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
   HEAP32[($5 + ($2 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 & 65280 | 0) << 8 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($2 >>> 0 < 32 >>> 0 ? (-1 << $2 | 0) ^ -1 | 0 : -1) & $1 | 0 | 0, $2 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint64($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$4 = 0, $4 = 0, i64toi32_i32$3 = 0, $10 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0;
  block2 : {
   block : {
    if ($2 >>> 0 < 33 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     $10 = $1$hi >>> i64toi32_i32$4 | 0
    } else {
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0
    }
    $3 = $10;
    $4 = 0;
    block1 : {
     $2 = $2 + -32 | 0;
     if ($2 >>> 0 > 31 >>> 0) {
      break block1
     }
     if ($3 >>> $2 | 0) {
      break block2
     }
    }
    if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $3 | 0, $2 | 0) | 0)) {
     break block2
    }
    return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 32 | 0) | 0 | 0;
   }
   $3 = $1;
   block3 : {
    if (($2 | 0) == (32 | 0)) {
     break block3
    }
    $4 = 0;
    if ($3 >>> $2 | 0) {
     break block2
    }
   }
   $4 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $3 | 0, $2 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 255 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 8 | 0) & 255 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 16 | 0) & 255 | 0 | 0, 8 | 0) | 0)) {
    break block
   }
   $2 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 24 | 0 | 0, 8 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_byte_block($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $6 = 0, $5 = 0;
  block2 : {
   block : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if ($3 >>> 0 > ((($2 >>> 2 | 0) + $4 | 0) + 1 | 0) >>> 0) {
     break block
    }
    $4 = (((($2 << 3 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $4 | 0;
    if ($4 >>> 0 <= $3 >>> 0) {
     break block
    }
    $5 = HEAP32[$0 >> 2] | 0;
    block3 : {
     block1 : {
      $3 = ($4 - $3 | 0) & 1023 | 0;
      $3 = $3 ? ($4 - $3 | 0) + 1024 | 0 : $4;
      if (!$3) {
       break block1
      }
      $4 = 0;
      if ($3 >>> 0 > 1073741823 >>> 0) {
       break block2
      }
      $6 = emscripten_builtin_realloc($5 | 0, $3 << 2 | 0 | 0) | 0;
      if ($6) {
       break block3
      }
      emscripten_builtin_free($5 | 0);
      return 0 | 0;
     }
     $4 = 0;
     $6 = emscripten_builtin_realloc($5 | 0, 0 | 0) | 0;
     if (!$6) {
      break block2
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $6;
   }
   $4 = 1;
   if (!$2) {
    break block2
   }
   $3 = 0;
   block4 : {
    label : while (1) {
     if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, HEAPU8[($1 + $3 | 0) >> 0] | 0 | 0, 8 | 0) | 0)) {
      break block4
     }
     $4 = 1;
     $3 = $3 + 1 | 0;
     if (($3 | 0) == ($2 | 0)) {
      break block2
     }
     continue label;
    };
   }
   $4 = 0;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  block1 : {
   block : {
    if ($1 >>> 0 > 31 >>> 0) {
     break block
    }
    $2 = $1 + 1 | 0;
    break block1;
   }
   $2 = 1;
   if (FLAC__bitwriter_write_zeroes($0 | 0, $1 | 0) | 0) {
    break block1
   }
   return 0 | 0;
  }
  return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, 1 | 0, $2 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_write_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, $11 = 0, $8 = 0, $4 = 0, $12 = 0, $5 = 0, $9 = 0, $13 = 0, $6 = 0, $7 = 0;
  $4 = 1;
  block : {
   if (!$2) {
    break block
   }
   $5 = $3 + 1 | 0;
   $6 = -1 << $3 | 0;
   $7 = -1 >>> (31 - $3 | 0) | 0;
   label2 : while (1) {
    $8 = HEAP32[$1 >> 2] | 0;
    $9 = ($8 << 1 | 0) ^ ($8 >> 31 | 0) | 0;
    $8 = $9 >>> $3 | 0;
    $10 = $8 + $5 | 0;
    block2 : {
     block1 : {
      $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$11) {
       break block1
      }
      $4 = $10 + $11 | 0;
      if ($4 >>> 0 > 31 >>> 0) {
       break block1
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $10 | 0 | (($9 | $6 | 0) & $7 | 0) | 0;
      break block2;
     }
     block3 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($4 >>> 0 > ((($11 + $8 | 0) + $12 | 0) + 1 | 0) >>> 0) {
       break block3
      }
      $10 = $12 + ((($10 + $11 | 0) + 31 | 0) >>> 5 | 0) | 0;
      if ($10 >>> 0 <= $4 >>> 0) {
       break block3
      }
      $12 = HEAP32[$0 >> 2] | 0;
      block5 : {
       block4 : {
        $11 = ($10 - $4 | 0) & 1023 | 0;
        $11 = $11 ? ($10 - $11 | 0) + 1024 | 0 : $10;
        if (!$11) {
         break block4
        }
        $4 = 0;
        if ($11 >>> 0 > 1073741823 >>> 0) {
         break block
        }
        $10 = emscripten_builtin_realloc($12 | 0, $11 << 2 | 0 | 0) | 0;
        if ($10) {
         break block5
        }
        emscripten_builtin_free($12 | 0);
        return 0 | 0;
       }
       $4 = 0;
       $10 = emscripten_builtin_realloc($12 | 0, 0 | 0) | 0;
       if (!$10) {
        break block
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $11;
      HEAP32[$0 >> 2] = $10;
      $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     }
     block7 : {
      block6 : {
       if ($8) {
        break block6
       }
       $8 = $11;
       break block7;
      }
      block8 : {
       if (!$11) {
        break block8
       }
       $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       block9 : {
        $4 = 32 - $11 | 0;
        if ($8 >>> 0 >= $4 >>> 0) {
         break block9
        }
        HEAP32[($0 + 4 | 0) >> 2] = $10 << $8 | 0;
        $8 = $11 + $8 | 0;
        break block7;
       }
       $11 = $10 << $4 | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $11;
       $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
       HEAP32[((HEAP32[$0 >> 2] | 0) + ($10 << 2 | 0) | 0) >> 2] = $11 << 24 | 0 | (($11 & 65280 | 0) << 8 | 0) | 0 | (($11 >>> 8 | 0) & 65280 | 0 | ($11 >>> 24 | 0) | 0) | 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       $8 = $8 - $4 | 0;
      }
      block10 : {
       if ($8 >>> 0 < 32 >>> 0) {
        break block10
       }
       $11 = HEAP32[$0 >> 2] | 0;
       block11 : {
        $13 = $8 + -32 | 0;
        if (($13 & 96 | 0 | 0) == (96 | 0)) {
         break block11
        }
        $12 = (($13 >>> 5 | 0) + 1 | 0) & 3 | 0;
        $10 = 0;
        label : while (1) {
         $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] = 0;
         $8 = $8 + -32 | 0;
         $10 = $10 + 1 | 0;
         if (($10 | 0) != ($12 | 0)) {
          continue label
         }
         break label;
        };
       }
       if ($13 >>> 0 < 96 >>> 0) {
        break block10
       }
       label1 : while (1) {
        $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
        HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = 0;
        $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
        HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = 0;
        $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
        HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = 0;
        $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
        HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = 0;
        $8 = $8 + -128 | 0;
        if ($8 >>> 0 > 31 >>> 0) {
         continue label1
        }
        break label1;
       };
      }
      block12 : {
       if ($8) {
        break block12
       }
       $8 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       break block7;
      }
      HEAP32[($0 + 4 | 0) >> 2] = 0;
     }
     $11 = ($9 | $6 | 0) & $7 | 0;
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     block13 : {
      $4 = 32 - $8 | 0;
      if ($5 >>> 0 >= $4 >>> 0) {
       break block13
      }
      HEAP32[($0 + 16 | 0) >> 2] = $8 + $5 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $10 << $5 | 0 | $11 | 0;
      break block2;
     }
     $8 = $5 - $4 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $8;
     $12 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $12 + 1 | 0;
     $8 = $10 << $4 | 0 | ($11 >>> $8 | 0) | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($12 << 2 | 0) | 0) >> 2] = $8 << 24 | 0 | (($8 & 65280 | 0) << 8 | 0) | 0 | (($8 >>> 8 | 0) & 65280 | 0 | ($8 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $11;
    }
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label2
    }
    break label2;
   };
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if (($1 | 0) < (0 | 0)) {
    break block
   }
   block1 : {
    if ($1 >>> 0 > 127 >>> 0) {
     break block1
    }
    return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 8 | 0) | 0 | 0;
   }
   block2 : {
    if ($1 >>> 0 > 2047 >>> 0) {
     break block2
    }
    return (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 6 | 0 | 192 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block3 : {
    if ($1 >>> 0 > 65535 >>> 0) {
     break block3
    }
    return ((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 12 | 0 | 224 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block4 : {
    if ($1 >>> 0 > 2097151 >>> 0) {
     break block4
    }
    return (((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 18 | 0 | 240 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block5 : {
    if ($1 >>> 0 > 67108863 >>> 0) {
     break block5
    }
    return ((((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 24 | 0 | 248 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   $2 = (((((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 30 | 0 | 252 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint64($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $13 = 0, $28 = 0, $51 = 0, $81 = 0, $118 = 0, $161 = 0, $162 = 0;
  $2 = 0;
  block : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 15;
   i64toi32_i32$3 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & $1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 127;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & $1 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break block1
    }
    i64toi32_i32$3 = i64toi32_i32$2;
    return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 8 | 0) | 0 | 0;
   }
   block2 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2047;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & $1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break block2
    }
    $13 = $0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 6;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $16 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $16 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$3 = $1$hi;
    return (FLAC__bitwriter_write_raw_uint32_nocheck($13 | 0, $16 | 192 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block3 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 65535;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & $1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block3
    }
    $28 = $0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 12;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $17 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $17 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return ((FLAC__bitwriter_write_raw_uint32_nocheck($28 | 0, $17 | 224 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2097151;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & $1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break block4
    }
    $51 = $0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 18;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $18 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return (((FLAC__bitwriter_write_raw_uint32_nocheck($51 | 0, $18 | 240 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block5 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 67108863;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & $1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block5
    }
    $81 = $0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 24;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return ((((FLAC__bitwriter_write_raw_uint32_nocheck($81 | 0, $19 | 248 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   block6 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2147483647;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & $1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break block6
    }
    $118 = $0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 30;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return (((((FLAC__bitwriter_write_raw_uint32_nocheck($118 | 0, $20 | 252 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0 | 0;
   }
   $161 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, 254 | 0, 8 | 0) | 0;
   $162 = $0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 30;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$0 = $1$hi;
   $2 = ((((($161 & (FLAC__bitwriter_write_raw_uint32_nocheck($162 | 0, $21 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_zero_pad_to_byte_boundary($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = (HEAP32[($0 + 16 | 0) >> 2] | 0) & 7 | 0;
   if ($1) {
    break block
   }
   return 1 | 0;
  }
  return FLAC__bitwriter_write_zeroes($0 | 0, 8 - $1 | 0 | 0) | 0 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  block : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 392 | 0) >> 2] = 0;
   HEAP32[($0 + 396 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1;
   HEAP32[($0 + 384 | 0) >> 2] = 0;
   HEAP32[($0 + 388 | 0) >> 2] = i64toi32_i32$0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_encoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = $1;
 }
 
 function FLAC__ogg_encoder_aspect_set_num_metadata($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   if ($1 >>> (HEAP32[GOT_data_internal_FLAC__OGG_MAPPING_NUM_HEADERS_LEN >> 2] | 0) | 0) {
    break block
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_encoder_aspect_write_callback_wrapper($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $11$hi = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, i64toi32_i32$3 = 0, $10 = 0, $11 = 0, $36 = 0, $26 = 0, $28$hi = 0, $61 = 0, $66 = 0, $71 = 0, $76 = 0, $79 = 0, $160 = 0, $162$hi = 0;
  $9 = __stack_pointer - 96 | 0;
  __stack_pointer = $9;
  block7 : {
   block6 : {
    block : {
     if (!(HEAP32[($0 + 384 | 0) >> 2] | 0)) {
      break block
     }
     i64toi32_i32$1 = $9 + 72 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $10 = $9 + 80 | 0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9 + 88 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $26 = $10;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 392 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 396 | 0) >> 2] | 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $11 = $3;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$4 = i64toi32_i32$2 + $3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $26;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     block2 : {
      block3 : {
       block1 : {
        if (!(HEAP32[($0 + 388 | 0) >> 2] | 0)) {
         break block1
        }
        if (($2 | 0) != (38 | 0)) {
         break block2
        }
        HEAP8[$9 >> 0] = HEAPU8[GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE >> 0] | 0;
        $28 = HEAP32[GOT_data_internal_FLAC__OGG_MAPPING_MAGIC >> 2] | 0;
        $2 = HEAPU8[$28 >> 0] | 0 | ((HEAPU8[($28 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($28 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($28 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $36 = 1;
        HEAP8[($9 + 5 | 0) >> 0] = $36;
        HEAP8[($9 + 6 | 0) >> 0] = $36 >>> 8 | 0;
        HEAP8[($9 + 1 | 0) >> 0] = $2;
        HEAP8[($9 + 2 | 0) >> 0] = $2 >>> 8 | 0;
        HEAP8[($9 + 3 | 0) >> 0] = $2 >>> 16 | 0;
        HEAP8[($9 + 4 | 0) >> 0] = $2 >>> 24 | 0;
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $29 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
        $30 = HEAPU8[$29 >> 0] | 0 | ((HEAPU8[($29 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($29 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($29 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP8[($9 + 9 | 0) >> 0] = $30;
        HEAP8[($9 + 10 | 0) >> 0] = $30 >>> 8 | 0;
        HEAP8[($9 + 11 | 0) >> 0] = $30 >>> 16 | 0;
        HEAP8[($9 + 12 | 0) >> 0] = $30 >>> 24 | 0;
        HEAP8[($9 + 8 | 0) >> 0] = $2;
        HEAP8[($9 + 7 | 0) >> 0] = $2 >>> 8 | 0;
        i64toi32_i32$1 = $1 + 8 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $61 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 21 | 0;
        $31 = $61;
        HEAP8[i64toi32_i32$5 >> 0] = $31;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $31 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $31 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $31 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 16 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $66 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 29 | 0;
        $32 = $66;
        HEAP8[i64toi32_i32$2 >> 0] = $32;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $32 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $32 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $32 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 24 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $71 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 37 | 0;
        $33 = $71;
        HEAP8[i64toi32_i32$5 >> 0] = $33;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $33 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $33 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $33 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 30 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $76 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 43 | 0;
        $34 = $76;
        HEAP8[i64toi32_i32$2 >> 0] = $34;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $34 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $34 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $34 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $79 = i64toi32_i32$5;
        i64toi32_i32$5 = $9;
        $35 = $79;
        HEAP8[(i64toi32_i32$5 + 13 | 0) >> 0] = $35;
        HEAP8[(i64toi32_i32$5 + 14 | 0) >> 0] = $35 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 15 | 0) >> 0] = $35 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 16 | 0) >> 0] = $35 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 17 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 18 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 19 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 20 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$2 = 1;
        HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] = 51;
        HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] = i64toi32_i32$5;
        HEAP32[($0 + 388 | 0) >> 2] = 0;
        break block3;
       }
       HEAP32[($9 + 68 | 0) >> 2] = $2;
       HEAP32[($9 + 64 | 0) >> 2] = $1;
      }
      block4 : {
       if (!$5) {
        break block4
       }
       HEAP32[($9 + 76 | 0) >> 2] = 1;
      }
      $1 = $0 + 8 | 0;
      if (ogg_stream_packetin($1 | 0, $9 + 64 | 0 | 0) | 0) {
       break block2
      }
      $2 = $0 + 368 | 0;
      block5 : {
       if ($3) {
        break block5
       }
       label : while (1) {
        if (!(ogg_stream_flush($1 | 0, $2 | 0) | 0)) {
         break block6
        }
        if (FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
         break block2
        }
        if (!(FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
         continue label
        }
        break block2;
       };
      }
      label1 : while (1) {
       if (!(ogg_stream_pageout($1 | 0, $2 | 0) | 0)) {
        break block6
       }
       if (FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
        break block2
       }
       if (!(FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
        continue label1
       }
       break label1;
      };
     }
     $8 = 1;
     break block7;
    }
    $8 = 1;
    if (($2 | 0) != (4 | 0)) {
     break block7
    }
    if ($4 | $3 | 0) {
     break block7
    }
    $4 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
    if ((HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
     break block7
    }
    HEAP32[($0 + 384 | 0) >> 2] = 1;
    i64toi32_i32$2 = 0;
    $11 = $3;
    $11$hi = i64toi32_i32$2;
   }
   $160 = $0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] | 0;
   $162$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $162$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$3 = $11;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $160;
   HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] = i64toi32_i32$4;
   $8 = 0;
  }
  __stack_pointer = $9 + 96 | 0;
  return $8 | 0;
 }
 
 function simple_ogg_page__init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__clear($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  block : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break block
   }
   emscripten_builtin_free($1 | 0);
  }
  block1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break block1
   }
   emscripten_builtin_free($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__get_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, $7 = 0, $9 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $15 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = 0;
  block : {
   if (!$3) {
    break block
   }
   block1 : {
    block2 : {
     i64toi32_i32$0 = $1$hi;
     switch (FUNCTION_TABLE[$3 | 0]($0, $1, i64toi32_i32$0, $5) | 0 | 0) {
     case 0:
      break block1;
     case 1:
      break block2;
     default:
      break block;
     };
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    break block;
   }
   $3 = emscripten_builtin_malloc(282 | 0) | 0;
   HEAP32[$2 >> 2] = $3;
   block3 : {
    if (!$3) {
     break block3
    }
    $8 = 27;
    label : while (1) {
     HEAP32[($6 + 12 | 0) >> 2] = $8;
     $9 = 5;
     block7 : {
      block4 : {
       switch (FUNCTION_TABLE[$4 | 0]($0, $3, $6 + 12 | 0, $5) | 0 | 0) {
       case 1:
        $9 = HEAP32[($6 + 12 | 0) >> 2] | 0;
        if ($9) {
         break block7
        }
        $9 = 2;
       default:
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $9;
        break block;
       case 3:
        break block;
       case 0:
        break block4;
       };
      }
      $9 = HEAP32[($6 + 12 | 0) >> 2] | 0;
     }
     $3 = $3 + $9 | 0;
     $8 = $8 - $9 | 0;
     if ($8) {
      continue label
     }
     break label;
    };
    $3 = HEAP32[$2 >> 2] | 0;
    HEAP32[($2 + 4 | 0) >> 2] = (HEAPU8[($3 + 26 | 0) >> 0] | 0) + 27 | 0;
    block9 : {
     block8 : {
      if ((HEAPU8[$3 >> 0] | 0 | ((HEAPU8[($3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
       break block8
      }
      if ((HEAPU8[($3 + 5 | 0) >> 0] | 0) & 1 | 0) {
       break block8
      }
      i64toi32_i32$0 = HEAPU8[($3 + 6 | 0) >> 0] | 0 | ((HEAPU8[($3 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$1 = HEAPU8[($3 + 10 | 0) >> 0] | 0 | ((HEAPU8[($3 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break block8
      }
      $8 = HEAPU8[($3 + 26 | 0) >> 0] | 0;
      if ($8) {
       break block9
      }
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
     break block;
    }
    if (!(full_read_($0 | 0, $3 + 27 | 0 | 0, $8 | 0, $4 | 0, $5 | 0) | 0)) {
     break block
    }
    block10 : {
     $7 = HEAP32[$2 >> 2] | 0;
     $8 = (HEAPU8[($7 + 26 | 0) >> 0] | 0) + -1 | 0;
     if (!$8) {
      break block10
     }
     $9 = $7 + 27 | 0;
     $3 = 0;
     label1 : while (1) {
      block11 : {
       if ((HEAPU8[($9 + $3 | 0) >> 0] | 0 | 0) == (255 | 0)) {
        break block11
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
       $7 = 0;
       break block;
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($8 | 0)) {
       continue label1
      }
      break label1;
     };
    }
    $3 = Math_imul($8, 255) + (HEAPU8[(($7 + $8 | 0) + 27 | 0) >> 0] | 0) | 0;
    HEAP32[($2 + 12 | 0) >> 2] = $3;
    $8 = emscripten_builtin_malloc(($3 >>> 0 > 1 >>> 0 ? $3 : 1) | 0) | 0;
    HEAP32[($2 + 8 | 0) >> 2] = $8;
    block12 : {
     if ($8) {
      break block12
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     $7 = 0;
     break block;
    }
    $7 = 0;
    if (!(full_read_($0 | 0, $8 | 0, $3 | 0, $4 | 0, $5 | 0) | 0)) {
     break block
    }
    $14 = HEAP32[$2 >> 2] | 0;
    HEAP32[($6 + 8 | 0) >> 2] = HEAPU8[($14 + 22 | 0) >> 0] | 0 | ((HEAPU8[($14 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    ogg_page_checksum_set($2 | 0);
    block13 : {
     $15 = HEAP32[$2 >> 2] | 0;
     if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != (HEAPU8[($15 + 22 | 0) >> 0] | 0 | ((HEAPU8[($15 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($15 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($15 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
      break block13
     }
     $7 = 1;
     break block;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    break block;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
  }
  __stack_pointer = $6 + 16 | 0;
  return $7 | 0;
 }
 
 function full_read_($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = 1;
  block : {
   if (!$2) {
    break block
   }
   label : while (1) {
    HEAP32[($5 + 12 | 0) >> 2] = $2;
    $7 = 5;
    block5 : {
     block1 : {
      switch (FUNCTION_TABLE[$3 | 0]($0, $1, $5 + 12 | 0, $4) | 0 | 0) {
      case 1:
       $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if ($7) {
        break block5
       }
       $7 = 2;
      default:
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $7;
      case 3:
       $6 = 0;
       break block;
      case 0:
       break block1;
      };
     }
     $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    }
    $1 = $1 + $7 | 0;
    $2 = $2 - $7 | 0;
    if ($2) {
     continue label
    }
    break label;
   };
  }
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function simple_ogg_page__set_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0;
  block : {
   if (!$3) {
    break block
   }
   block2 : {
    block1 : {
     i64toi32_i32$0 = $1$hi;
     switch (FUNCTION_TABLE[$3 | 0]($0, $1, i64toi32_i32$0, $5) | 0 | 0) {
     case 0:
      break block1;
     case 1:
      break block2;
     default:
      break block;
     };
    }
    ogg_page_checksum_set($2 | 0);
    if (FUNCTION_TABLE[$4 | 0]($0, HEAP32[$2 >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0, 0, 0, $5) | 0) {
     break block2
    }
    if (FUNCTION_TABLE[$4 | 0]($0, HEAP32[($2 + 8 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0, 0, 0, $5) | 0) {
     break block2
    }
    return 1 | 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
  }
  return 0 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  block : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break block
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break block
   }
   label : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break block
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label
    }
    break label;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function FLAC__add_metadata_block($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $4 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $2 = GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN;
  $3 = strlen(HEAP32[GOT_data_internal_FLAC__VENDOR_STRING >> 2] | 0 | 0) | 0;
  $4 = 0;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   block1 : {
    if ((HEAP32[$0 >> 2] | 0 | 0) != (4 | 0)) {
     break block1
    }
    $2 = ($2 + $3 | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
   }
   $5 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN >> 2] | 0;
   if ($2 >>> $5 | 0) {
    break block
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, $5 | 0) | 0)) {
    break block
   }
   block10 : {
    block9 : {
     block8 : {
      block7 : {
       block6 : {
        block11 : {
         block4 : {
          switch (HEAP32[$0 >> 2] | 0 | 0) {
          case 3:
           if (!(HEAP32[($0 + 16 | 0) >> 2] | 0)) {
            break block10
           }
           $6 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN >> 2] | 0;
           $7 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN >> 2] | 0;
           $5 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN >> 2] | 0;
           $4 = 0;
           $2 = 0;
           break block11;
          case 0:
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 36 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 40 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           i64toi32_i32$2 = $0;
           i64toi32_i32$0 = HEAP32[($0 + 48 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
           if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0 | 0) | 0)) {
            break block
           }
           if (FLAC__bitwriter_write_byte_block($1 | 0, $0 + 56 | 0 | 0, 16 | 0) | 0) {
            break block10
           }
           break block;
          case 1:
           if (FLAC__bitwriter_write_zeroes($1 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) << 3 | 0 | 0) | 0) {
            break block10
           }
           break block;
          case 2:
           break block4;
          case 4:
           break block6;
          case 5:
           break block7;
          case 6:
           break block8;
          default:
           break block9;
          };
         }
         $2 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
         if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, $2 | 0) | 0)) {
          break block
         }
         if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0 | 0) | 0) {
          break block10
         }
         break block;
        }
        label : while (1) {
         $3 = Math_imul($2, 24);
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $5 | 0) | 0)) {
          break block
         }
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $7 | 0) | 0)) {
          break block
         }
         if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[(((HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0) + 16 | 0) >> 2] | 0 | 0, $6 | 0) | 0)) {
          break block
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 >= (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 0) {
          break block10
         }
         continue label;
        };
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, $3 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[GOT_data_internal_FLAC__VENDOR_STRING >> 2] | 0 | 0, $3 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break block
       }
       if (!(HEAP32[($0 + 24 | 0) >> 2] | 0)) {
        break block10
       }
       $4 = 0;
       $2 = 0;
       label1 : while (1) {
        $3 = $2 << 3 | 0;
        if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0 | 0) | 0)) {
         break block
        }
        $3 = (HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0;
        if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
         break block
        }
        $2 = $2 + 1 | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 24 | 0) >> 2] | 0) >>> 0) {
         break block10
        }
        continue label1;
       };
      }
      if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
       break block
      }
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = HEAP32[($0 + 152 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0 + 156 | 0) >> 2] | 0;
      if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN >> 2] | 0 | 0) | 0)) {
       break block
      }
      $4 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN >> 2] | 0 | 0) | 0)) {
       break block
      }
      if (!(FLAC__bitwriter_write_zeroes($1 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
       break block
      }
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 164 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN >> 2] | 0 | 0) | 0)) {
       break block
      }
      if (!(HEAP32[($0 + 164 | 0) >> 2] | 0)) {
       break block10
      }
      $8 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN >> 2] | 0) >>> 3 | 0;
      $9 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN >> 2] | 0;
      $6 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN >> 2] | 0;
      $7 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN >> 2] | 0;
      $10 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN >> 2] | 0;
      $11 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN >> 2] | 0;
      $12 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN >> 2] | 0;
      $13 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN >> 2] | 0;
      $14 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN >> 2] | 0;
      $15 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN >> 2] | 0;
      $4 = 0;
      $16 = 0;
      label3 : while (1) {
       $2 = (HEAP32[($0 + 168 | 0) >> 2] | 0) + ($16 << 5 | 0) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $15 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 8 | 0) >> 0] | 0 | 0, $14 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, $2 + 9 | 0 | 0, $8 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAPU8[($2 + 22 | 0) >> 0] | 0) & 1 | 0 | 0, $13 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAPU8[($2 + 22 | 0) >> 0] | 0) >>> 1 | 0) & 1 | 0 | 0, $12 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_zeroes($1 | 0, $11 | 0) | 0)) {
        break block
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 23 | 0) >> 0] | 0 | 0, $10 | 0) | 0)) {
        break block
       }
       block12 : {
        if (!(HEAPU8[($2 + 23 | 0) >> 0] | 0)) {
         break block12
        }
        $3 = 0;
        label2 : while (1) {
         block13 : {
          $5 = (HEAP32[($2 + 24 | 0) >> 2] | 0) + ($3 << 4 | 0) | 0;
          i64toi32_i32$2 = $5;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          if (FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $7 | 0) | 0) {
           break block13
          }
          return 0 | 0;
         }
         block14 : {
          if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($5 + 8 | 0) >> 0] | 0 | 0, $6 | 0) | 0) {
           break block14
          }
          return 0 | 0;
         }
         block15 : {
          if (!(FLAC__bitwriter_write_zeroes($1 | 0, $9 | 0) | 0)) {
           break block15
          }
          $3 = $3 + 1 | 0;
          if ($3 >>> 0 >= (HEAPU8[($2 + 23 | 0) >> 0] | 0) >>> 0) {
           break block12
          }
          continue label2;
         }
         break label2;
        };
        return 0 | 0;
       }
       $16 = $16 + 1 | 0;
       if ($16 >>> 0 < (HEAP32[($0 + 164 | 0) >> 2] | 0) >>> 0) {
        continue label3
       }
       break block10;
      };
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     $2 = GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN;
     $3 = strlen(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $3 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $3 | 0) | 0)) {
      break block
     }
     $2 = GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN;
     $3 = strlen(HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $3 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, $3 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 36 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
      break block
     }
     if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 48 | 0) >> 2] | 0 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0) | 0) {
      break block10
     }
     break block;
    }
    if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) | 0)) {
     break block
    }
   }
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__frame_add_header($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $3 = 0, $2 = 0, $7 = 0, $4 = 0, $5 = 0, $8 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = GOT_data_internal_FLAC__FRAME_HEADER_SYNC_LEN;
  block1 : {
   block : {
    if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_SYNC >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0) {
     break block
    }
    $3 = 0;
    break block1;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BLOCKING_STRATEGY_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $4 = 16;
   $5 = 1;
   block5 : {
    block7 : {
     block15 : {
      block11 : {
       block9 : {
        block6 : {
         block14 : {
          block12 : {
           block8 : {
            block2 : {
             $6 = HEAP32[$0 >> 2] | 0;
             if (($6 | 0) > (2047 | 0)) {
              break block2
             }
             block3 : {
              if (($6 | 0) > (575 | 0)) {
               break block3
              }
              block4 : {
               if (($6 | 0) != (192 | 0)) {
                break block4
               }
               $6 = 1;
               break block5;
              }
              if (($6 | 0) == (256 | 0)) {
               break block6
              }
              if (($6 | 0) != (512 | 0)) {
               break block7
              }
              $6 = 9;
              break block5;
             }
             if (($6 | 0) == (576 | 0)) {
              break block8
             }
             if (($6 | 0) == (1024 | 0)) {
              break block9
             }
             if (($6 | 0) != (1152 | 0)) {
              break block7
             }
             $6 = 3;
             break block5;
            }
            block10 : {
             if (($6 | 0) > (4607 | 0)) {
              break block10
             }
             if (($6 | 0) == (2048 | 0)) {
              break block11
             }
             if (($6 | 0) == (2304 | 0)) {
              break block12
             }
             if (($6 | 0) != (4096 | 0)) {
              break block7
             }
             $6 = 12;
             break block5;
            }
            block13 : {
             if (($6 | 0) > (16383 | 0)) {
              break block13
             }
             if (($6 | 0) == (4608 | 0)) {
              break block14
             }
             if (($6 | 0) != (8192 | 0)) {
              break block7
             }
             $6 = 13;
             break block5;
            }
            if (($6 | 0) == (16384 | 0)) {
             break block15
            }
            if (($6 | 0) != (32768 | 0)) {
             break block7
            }
            $6 = 15;
            break block5;
           }
           $6 = 2;
           break block5;
          }
          $6 = 4;
          break block5;
         }
         $6 = 5;
         break block5;
        }
        $6 = 8;
        break block5;
       }
       $6 = 10;
       break block5;
      }
      $6 = 11;
      break block5;
     }
     $6 = 14;
     break block5;
    }
    $6 = $6 >>> 0 < 257 >>> 0;
    $4 = $6 ? 8 : 16;
    $6 = $6 ? 6 : 7;
    $5 = 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $7 = 0;
   block20 : {
    block19 : {
     block26 : {
      block25 : {
       block24 : {
        block22 : {
         block21 : {
          block18 : {
           block16 : {
            $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            if (($3 | 0) > (44099 | 0)) {
             break block16
            }
            block17 : {
             if (($3 | 0) > (22049 | 0)) {
              break block17
             }
             if (($3 | 0) == (8e3 | 0)) {
              break block18
             }
             if (($3 | 0) != (16e3 | 0)) {
              break block19
             }
             $6 = 5;
             break block20;
            }
            if (($3 | 0) == (22050 | 0)) {
             break block21
            }
            if (($3 | 0) == (24e3 | 0)) {
             break block22
            }
            if (($3 | 0) != (32e3 | 0)) {
             break block19
            }
            $6 = 8;
            break block20;
           }
           block23 : {
            if (($3 | 0) > (95999 | 0)) {
             break block23
            }
            if (($3 | 0) == (44100 | 0)) {
             break block24
            }
            if (($3 | 0) == (48e3 | 0)) {
             break block25
            }
            if (($3 | 0) != (88200 | 0)) {
             break block19
            }
            $6 = 1;
            break block20;
           }
           if (($3 | 0) == (96e3 | 0)) {
            break block26
           }
           block27 : {
            if (($3 | 0) == (192e3 | 0)) {
             break block27
            }
            if (($3 | 0) != (176400 | 0)) {
             break block19
            }
            $6 = 2;
            break block20;
           }
           $6 = 3;
           break block20;
          }
          $6 = 4;
          break block20;
         }
         $6 = 6;
         break block20;
        }
        $6 = 7;
        break block20;
       }
       $6 = 9;
       break block20;
      }
      $6 = 10;
      break block20;
     }
     $6 = 11;
     break block20;
    }
    $6 = ($3 >>> 0) % (1e3 >>> 0) | 0;
    block28 : {
     if ($3 >>> 0 > 255e3 >>> 0) {
      break block28
     }
     if ($6) {
      break block28
     }
     $6 = 12;
     $7 = 12;
     break block20;
    }
    block29 : {
     if (($3 >>> 0) % (10 >>> 0) | 0) {
      break block29
     }
     $6 = 14;
     $7 = 14;
     break block20;
    }
    $6 = $3 >>> 0 < 65536 >>> 0 ? 13 : 0;
    $7 = $6;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_SAMPLE_RATE_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   block34 : {
    block33 : {
     switch (HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) {
     case 0:
      $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + -1 | 0;
      break block34;
     case 1:
      $6 = 8;
      break block34;
     case 2:
      $6 = 9;
      break block34;
     case 3:
      break block33;
     default:
      break block34;
     };
    }
    $6 = 10;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_CHANNEL_ASSIGNMENT_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $3 = 0;
   $6 = 0;
   block35 : {
    $8 = __wasm_rotl_i32((HEAP32[($0 + 16 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0;
    if ($8 >>> 0 > 4 >>> 0) {
     break block35
    }
    $6 = HEAP32[((GOT_data_internal___memory_base + 76616 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BITS_PER_SAMPLE_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_ZERO_PAD_LEN >> 2] | 0 | 0) | 0)) {
    break block1
   }
   block37 : {
    block36 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break block36
     }
     if (FLAC__bitwriter_write_utf8_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0) {
      break block37
     }
     break block1;
    }
    i64toi32_i32$1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!(FLAC__bitwriter_write_utf8_uint64($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0)) {
     break block1
    }
   }
   block38 : {
    if ($5) {
     break block38
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[$0 >> 2] | 0) + -1 | 0 | 0, $4 | 0) | 0)) {
     break block1
    }
   }
   block42 : {
    block41 : {
     switch ($7 + -12 | 0 | 0) {
     case 0:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0 | 0, 8 | 0) | 0) {
       break block42
      }
      break block1;
     case 1:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, 16 | 0) | 0) {
       break block42
      }
      break block1;
     case 2:
      break block41;
     default:
      break block42;
     };
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (10 >>> 0) | 0 | 0, 16 | 0) | 0)) {
     break block1
    }
   }
   if (!(FLAC__bitwriter_get_write_crc8($1 | 0, $2 + 15 | 0 | 0) | 0)) {
    break block1
   }
   $3 = GOT_data_internal_FLAC__FRAME_HEADER_CRC_LEN;
   $3 = (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 15 | 0) >> 0] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__subframe_add_constant($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 0;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32($3 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_CONSTANT_BYTE_ALIGNED_MASK >> 2] | 0 | ($2 | 0) != (0 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!$2) {
     break block1
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($3 | 0, $2 + -1 | 0 | 0) | 0)) {
     break block
    }
   }
   $4 = (FLAC__bitwriter_write_raw_int32($3 | 0, HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0) != (0 | 0);
  }
  return $4 | 0;
 }
 
 function FLAC__subframe_add_fixed($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $6 = 0;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_FIXED_BYTE_ALIGNED_MASK >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | ($5 << 1 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!$3) {
     break block1
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break block
    }
   }
   block2 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break block2
    }
    $5 = $0 + 16 | 0;
    $3 = 0;
    block3 : {
     label : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break block3
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break block2
      }
      continue label;
     };
    }
    return 0 | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   block4 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break block4
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0 | 0) | 0)) {
     break block
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break block4
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break block
    }
   }
   $6 = 1;
  }
  return $6 | 0;
 }
 
 function add_residual_partitioned_rice_($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $11 = 0, $14 = 0, $10 = 0, $9 = 0, $15 = 0, $16 = 0, $12 = 0, $13 = 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $9 = HEAP32[($7 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER : $8) >> 2] | 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN;
  $10 = HEAP32[($7 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN : $8) >> 2] | 0;
  block3 : {
   block2 : {
    block : {
     if ($6) {
      break block
     }
     block1 : {
      if (HEAP32[$5 >> 2] | 0) {
       break block1
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$4 >> 2] | 0 | 0, $10 | 0) | 0)) {
       break block2
      }
      if (!(FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 | 0, $2 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0)) {
       break block2
      }
      break block3;
     }
     $11 = 0;
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
      break block2
     }
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$5 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0 | 0) | 0)) {
      break block2
     }
     if (!$2) {
      break block3
     }
     $7 = 0;
     block4 : {
      label : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0)) {
        break block4
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) == ($2 | 0)) {
        break block3
       }
       continue label;
      };
     }
     return 0 | 0;
    }
    $12 = ($3 + $2 | 0) >>> $6 | 0;
    $13 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0;
    $2 = 0;
    $14 = 0;
    label2 : while (1) {
     $15 = $12 - ($14 ? 0 : $3) | 0;
     $7 = $2;
     $2 = $15 + $7 | 0;
     block6 : {
      block5 : {
       $16 = $14 << 2 | 0;
       $8 = $5 + $16 | 0;
       if (HEAP32[$8 >> 2] | 0) {
        break block5
       }
       $11 = 0;
       $8 = $4 + $16 | 0;
       if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $10 | 0) | 0)) {
        break block2
       }
       if (FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 + ($7 << 2 | 0) | 0 | 0, $15 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0) {
        break block6
       }
       break block2;
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
       break block2
      }
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $13 | 0) | 0)) {
       break block2
      }
      if ($7 >>> 0 >= $2 >>> 0) {
       break block6
      }
      label1 : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0)) {
        break block2
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($2 | 0)) {
        continue label1
       }
       break label1;
      };
     }
     $11 = 1;
     $14 = $14 + 1 | 0;
     if (!($14 >>> $6 | 0)) {
      continue label2
     }
     break label2;
    };
   }
   return $11 | 0;
  }
  return 1 | 0;
 }
 
 function FLAC__subframe_add_lpc($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $5 = 0;
  $5 = 0;
  $6 = GOT_data_internal_FLAC__SUBFRAME_TYPE_LPC_BYTE_ALIGNED_MASK;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$6 >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | (((HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0) + -2 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!$3) {
     break block1
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break block
    }
   }
   block2 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break block2
    }
    $6 = $0 + 152 | 0;
    $3 = 0;
    block3 : {
     label : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break block3
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break block2
      }
      continue label;
     };
    }
    return 0 | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, (HEAP32[($0 + 16 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   block4 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break block4
    }
    $2 = $0 + 24 | 0;
    $3 = 0;
    block5 : {
     label1 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) | 0)) {
       break block5
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break block4
      }
      continue label1;
     };
    }
    return 0 | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break block
   }
   block6 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break block6
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0 | 0) | 0)) {
     break block
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break block6
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 280 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break block
    }
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function FLAC__subframe_add_verbatim($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 0;
  $0 = HEAP32[$0 >> 2] | 0;
  block : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_VERBATIM_BYTE_ALIGNED_MASK >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!$3) {
     break block1
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break block
    }
   }
   block2 : {
    if ($1) {
     break block2
    }
    return 1 | 0;
   }
   $3 = 0;
   block3 : {
    label : while (1) {
     if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break block3
     }
     $5 = 1;
     $3 = $3 + 1 | 0;
     if (($3 | 0) == ($1 | 0)) {
      break block
     }
     continue label;
    };
   }
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  block : {
   if ($2) {
    break block
   }
   return 0 | 0;
  }
  block2 : {
   block1 : {
    $3 = HEAPU8[$0 >> 0] | 0;
    if ($3) {
     break block1
    }
    $0 = 0;
    break block2;
   }
   block3 : {
    label : while (1) {
     $4 = HEAPU8[$1 >> 0] | 0;
     if (($3 & 255 | 0 | 0) != ($4 | 0)) {
      break block3
     }
     if (!$4) {
      break block3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break block3
     }
     $1 = $1 + 1 | 0;
     $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($3) {
      continue label
     }
     break label;
    };
    $3 = 0;
   }
   $0 = $3 & 255 | 0;
  }
  return $0 - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  block : {
   if (__toread($0 | 0) | 0) {
    break block
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0 | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break block
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, i64toi32_i32$2 = 0, $12 = 0, $14 = 0, $15 = 0, $13 = 0, $22 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  block : {
   i64toi32_i32$0 = $1$hi;
   if (!($1 | i64toi32_i32$0 | 0)) {
    break block
   }
   i64toi32_i32$1 = $3 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $22 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $22;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $12 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $14 = 0
     } else {
      $14 = 1
     }
     $15 = $14;
    } else {
     $15 = 0
    }
    $12 = $15;
   }
   if ($12) {
    break block
   }
   i64toi32_i32$2 = $1$hi;
   $3 = $2 + $1 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $3;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1 = 0, $3$hi = 0, $2 = 0, $4$hi = 0, $5 = 0, $4 = 0, $3 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $7 = 0, $7$hi = 0, $15 = 0, $15$hi = 0, $35 = 0, $40 = 0, $40$hi = 0, $59 = 0, $59$hi = 0, $67 = 0, $74 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1 - $2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$5;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break block
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27 = 0
       } else {
        $27 = 1
       }
       $28 = $27;
      } else {
       $28 = 0
      }
      $26 = $28;
     }
     if ($26) {
      break block1
     }
    }
    $2 = __uflow($0 | 0) | 0;
    if (($2 | 0) > (-1 | 0)) {
     break block2
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1;
   $35 = i64toi32_i32$2;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $2 - $1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $3;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $3 = i64toi32_i32$2;
  $3$hi = i64toi32_i32$0;
  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  block3 : {
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break block3
   }
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $5 - $1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30 = 0
     } else {
      $30 = 1
     }
     $31 = $30;
    } else {
     $31 = 0
    }
    $29 = $31;
   }
   if ($29) {
    break block3
   }
   i64toi32_i32$4 = $4$hi;
   $5 = $1 + $4 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $5;
  $67 = $0;
  i64toi32_i32$4 = $3$hi;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 - $1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  block4 : {
   if ($1 >>> 0 > $5 >>> 0) {
    break block4
   }
   HEAP8[($1 + -1 | 0) >> 0] = $2;
  }
  return $2 | 0;
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4 = 0, $2 = 0, $7$hi = 0, $7 = 0, $8 = 0, $8$hi = 0, $3 = 0, $5 = 0, $6 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $36 = 0, $50 = 0, $53 = 0, $53$hi = 0, $57$hi = 0, $58$hi = 0, $60 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
  $4 = $3 & 8388607 | 0;
  block2 : {
   block : {
    $5 = $3 >>> 23 | 0;
    $6 = $5 & 255 | 0;
    if (!$6) {
     break block
    }
    block1 : {
     if (($6 | 0) == (255 | 0)) {
      break block1
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 25;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $23;
     $7$hi = i64toi32_i32$1;
     $4 = ($5 & 255 | 0) + 16256 | 0;
     i64toi32_i32$1 = 0;
     $8 = 0;
     $8$hi = i64toi32_i32$1;
     break block2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $24 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7 = $24;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$2;
    $4 = 32767;
    break block2;
   }
   block3 : {
    if ($4) {
     break block3
    }
    i64toi32_i32$2 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$2;
    $4 = 0;
    i64toi32_i32$2 = 0;
    $7 = 0;
    $7$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = 0;
   $36 = $4;
   $4 = Math_clz32($4);
   i64toi32_i32$0 = 0;
   __ashlti3($2 | 0, $36 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4 + 81 | 0 | 0);
   $4 = 16265 - $4 | 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $7 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $8;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $53 = $25;
  $53$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3 >>> 31 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $57$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $53$hi;
  i64toi32_i32$0 = $53;
  i64toi32_i32$1 = $57$hi;
  i64toi32_i32$3 = $26;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  $58$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $60 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $50;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $60;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $21 = 0, $22 = 0, $19 = 0, $26 = 0, $26$hi = 0, $30$hi = 0, $31 = 0, $31$hi = 0, $35$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block1 : {
   block : {
    if ($1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break block1;
   }
   $5 = $1 >> 31 | 0;
   $5 = ($1 ^ $5 | 0) - $5 | 0;
   i64toi32_i32$0 = 0;
   $19 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $31 = i64toi32_i32$4;
   $31$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $35$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $31$hi;
   i64toi32_i32$5 = $31;
   i64toi32_i32$2 = $35$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $13$hi = 0, $7$hi = 0, $7 = 0, $13 = 0, $5 = 0, $6$hi = 0, $8$hi = 0, $10 = 0, $18$hi = 0, $8 = 0, $6 = 0, $12 = 0, $15$hi = 0, $18 = 0, $11 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $9 = 0, $9$hi = 0, $16 = 0, $17 = 0, $20 = 0, $15 = 0, $21$hi = 0, $14 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $219 = 0, $221 = 0, $222 = 0, $224 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $19 = 0, $232 = 0, $233 = 0, $21 = 0, $235 = 0, $237 = 0, $22 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $53 = 0, $57 = 0, $64 = 0, $68 = 0, $77 = 0, $77$hi = 0, $89 = 0, $89$hi = 0, $111 = 0, $112 = 0, $112$hi = 0, $113 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $139 = 0, $140 = 0, $140$hi = 0, $141 = 0, $141$hi = 0, $148$hi = 0, $151$hi = 0, $168 = 0, $168$hi = 0, $173 = 0, $173$hi = 0, $180 = 0, $180$hi = 0, $187 = 0, $187$hi = 0, $192 = 0, $192$hi = 0, $201 = 0, $201$hi = 0, $203 = 0, $203$hi = 0, $205 = 0, $205$hi = 0, $213 = 0, $213$hi = 0, $215 = 0, $215$hi = 0, $217 = 0, $217$hi = 0, $220 = 0, $222$hi = 0, $223 = 0, $223$hi = 0, $225 = 0, $225$hi = 0, $234 = 0, $234$hi = 0, $236 = 0, $236$hi = 0, $242 = 0, $242$hi = 0, $247 = 0, $247$hi = 0, $250$hi = 0, $23 = 0, $266 = 0, $266$hi = 0, $270 = 0, $271 = 0, $271$hi = 0, $275 = 0, $275$hi = 0, $279 = 0, $280$hi = 0, $281$hi = 0, $284 = 0, $284$hi = 0, $285 = 0, $285$hi = 0, $286 = 0, $286$hi = 0, $289 = 0, $290$hi = 0, $293 = 0, $294$hi = 0, $295$hi = 0, $299 = 0, $300$hi = 0, $301 = 0, $301$hi = 0, $308 = 0, $308$hi = 0, $312 = 0, $314 = 0, $314$hi = 0, $316$hi = 0, $317 = 0, $317$hi = 0, $318 = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $321$hi = 0, $325 = 0, $326$hi = 0, $327 = 0, $327$hi = 0, $328 = 0, $328$hi = 0, $330 = 0, $330$hi = 0, $333 = 0, $334$hi = 0, $337 = 0, $338$hi = 0, $339$hi = 0, $342 = 0, $343$hi = 0, $345$hi = 0, $346 = 0, $346$hi = 0, $350 = 0, $351$hi = 0, $352 = 0, $352$hi = 0, $353 = 0, $353$hi = 0, $356 = 0, $357$hi = 0, $360 = 0, $361$hi = 0, $362$hi = 0, $366 = 0, $367$hi = 0, $377 = 0, $377$hi = 0, $379$hi = 0, $382 = 0, $382$hi = 0, $384$hi = 0, $388 = 0, $388$hi = 0, $390$hi = 0, $424 = 0, $424$hi = 0, $426 = 0, $426$hi = 0, $427 = 0, $427$hi = 0, $429 = 0, $429$hi = 0, $431 = 0, $431$hi = 0, $433 = 0, $434$hi = 0, $437 = 0, $437$hi = 0, $439 = 0, $439$hi = 0, $447$hi = 0, $449 = 0, $449$hi = 0, $455 = 0, $461 = 0, $461$hi = 0, $465 = 0, $466$hi = 0, $470 = 0, $470$hi = 0, $474 = 0, $474$hi = 0, $477 = 0, $477$hi = 0, $481 = 0, $482$hi = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $8;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $219 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $219 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $219;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10 = $221 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $222 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $222 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $11 = $222 & 32767 | 0;
     if (($11 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $12 = 0;
     if (($10 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$1 = $1$hi;
     $53 = !($1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $13 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $13;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $13;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53 : $57) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $64 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64 : $68) {
      break block4
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block7 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     block8 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2 | i64toi32_i32$2 | 0)) {
       break block8
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block10
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    $12 = 0;
    block11 : {
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break block11
     }
     $111 = $5 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112 = $1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $8$hi;
     $113 = $8;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $8$hi;
     $12 = !($8 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $8;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $12 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     __ashlti3($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $12 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
     $8 = i64toi32_i32$3;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $9 = $226;
     $9$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block1
    }
    $139 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $140 = $3;
    $140$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    $141 = $6;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    $14 = !($6 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $14;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3 : $6;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $227 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $227 = i64toi32_i32$5
    }
    $148$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $151$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $148$hi;
    i64toi32_i32$3 = $227;
    i64toi32_i32$2 = $151$hi;
    i64toi32_i32$5 = $14 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $14 = i64toi32_i32$4;
    i64toi32_i32$1 = $140$hi;
    i64toi32_i32$3 = $141$hi;
    __ashlti3($139 | 0, $140 | 0, i64toi32_i32$1 | 0, $141 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $12 = ($12 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $228 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $228 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $13 = $228;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $13;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $168 = $2;
   $168$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $229 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $229 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4 = $229;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $168$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($168 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $173 = i64toi32_i32$1;
   $173$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $230 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $230 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $13 = $230;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $180 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $173$hi;
   i64toi32_i32$1 = $173;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$5 = $180;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $231 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $231 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17 = $231;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $187 = i64toi32_i32$0;
   $187$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17;
   i64toi32_i32$0 = $187$hi;
   i64toi32_i32$5 = $187;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17;
   i64toi32_i32$1 = 0;
   $192 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $192$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $8 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $201 = i64toi32_i32$5;
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$5 = $201$hi;
   i64toi32_i32$4 = $201;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $203 = i64toi32_i32$0;
   $203$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $232 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $232 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $205 = $232;
   $205$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $233 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $233 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20 = $233;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$1 = $205;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $213 = i64toi32_i32$2;
   $213$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$3 = $203;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $213;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $21 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$0;
   $215 = i64toi32_i32$5;
   $215$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $217 = $235;
   $217$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15;
   $220 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $220;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $217$hi;
   i64toi32_i32$0 = $217;
   i64toi32_i32$4 = $222$hi;
   i64toi32_i32$1 = $237;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $223 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $223$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $215$hi;
   i64toi32_i32$3 = $215;
   i64toi32_i32$0 = $223$hi;
   i64toi32_i32$1 = $223;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
   $225 = i64toi32_i32$2;
   $225$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$4 = $9;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $6 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $6$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $234 = i64toi32_i32$4;
   $234$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$5 = $22;
   i64toi32_i32$4 = $234$hi;
   i64toi32_i32$1 = $234;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$2;
   $236 = i64toi32_i32$0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $238 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $238;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $242 = i64toi32_i32$2;
   $242$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$5 = $236;
   i64toi32_i32$2 = $242$hi;
   i64toi32_i32$1 = $242;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $15 = i64toi32_i32$4;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $247 = i64toi32_i32$5;
   $247$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $247$hi;
   i64toi32_i32$1 = $247;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $20 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    $239 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $239 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $250$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $225$hi;
   i64toi32_i32$4 = $225;
   i64toi32_i32$0 = $250$hi;
   i64toi32_i32$1 = $239;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $192$hi;
   i64toi32_i32$3 = $192;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $10 = (($11 + $10 | 0) + $12 | 0) + -16383 | 0;
   block13 : {
    block12 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$5 | 0, $6 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $266 = i64toi32_i32$3;
     $266$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$1 = $266;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24;
     $270 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $271 = $270;
     $271$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $275 = i64toi32_i32$0;
     $275$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $275$hi;
     i64toi32_i32$2 = $275;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     $279 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $280$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $271$hi;
     i64toi32_i32$2 = $271;
     i64toi32_i32$4 = $280$hi;
     i64toi32_i32$1 = $279;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $281$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $284 = i64toi32_i32$2;
     $284$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $281$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $284$hi;
     i64toi32_i32$1 = $284;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $285 = i64toi32_i32$4;
     $285$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     $286 = $13;
     $286$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19;
     $289 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $290$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21;
     i64toi32_i32$5 = $17;
     $293 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $294$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $290$hi;
     i64toi32_i32$5 = $289;
     i64toi32_i32$3 = $294$hi;
     i64toi32_i32$0 = $293;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $295$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $286$hi;
     i64toi32_i32$1 = $286;
     i64toi32_i32$5 = $295$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13;
     $299 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $300$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $285$hi;
     i64toi32_i32$0 = $285;
     i64toi32_i32$2 = $300$hi;
     i64toi32_i32$1 = $299;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $301 = i64toi32_i32$5;
     $301$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $308 = i64toi32_i32$0;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $308$hi;
     i64toi32_i32$1 = $308;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3;
     $312 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $312;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $240 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $240 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $314 = $240;
     $314$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $241 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $241 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $316$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $314;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$4 = $241;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $317 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $317$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $301$hi;
     i64toi32_i32$1 = $301;
     i64toi32_i32$5 = $317$hi;
     i64toi32_i32$4 = $317;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $318 = i64toi32_i32$0;
     $318$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $319 = $4;
     $319$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $319$hi;
     i64toi32_i32$2 = $319;
     i64toi32_i32$3 = $321$hi;
     i64toi32_i32$4 = $243;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4;
     $325 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $326$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $318$hi;
     i64toi32_i32$4 = $318;
     i64toi32_i32$0 = $326$hi;
     i64toi32_i32$2 = $325;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $327 = i64toi32_i32$3;
     $327$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $328 = $2;
     $328$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $244 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $244 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $330 = $244;
     $330$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$5 = $9;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22;
     $333 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $334$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$2 = $15;
     i64toi32_i32$1 = $9;
     $337 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $338$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $334$hi;
     i64toi32_i32$1 = $333;
     i64toi32_i32$5 = $338$hi;
     i64toi32_i32$4 = $337;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $339$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$2 = $20;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = $15;
     $342 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $339$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $343$hi;
     i64toi32_i32$1 = $342;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $245 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $245 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$0 = $330;
     i64toi32_i32$2 = $345$hi;
     i64toi32_i32$1 = $245;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $346 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $328$hi;
     i64toi32_i32$4 = $328;
     i64toi32_i32$0 = $346$hi;
     i64toi32_i32$1 = $346;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2;
     $350 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $351$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$1 = $327;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$4 = $350;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $352 = i64toi32_i32$0;
     $352$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $353 = $4;
     $353$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $21;
     $356 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23;
     i64toi32_i32$1 = $16;
     $360 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $357$hi;
     i64toi32_i32$1 = $356;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$3 = $360;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $362$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $353$hi;
     i64toi32_i32$4 = $353;
     i64toi32_i32$1 = $362$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4;
     $366 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $367$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $352$hi;
     i64toi32_i32$3 = $352;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $366;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break block12
     }
     $10 = $10 + 1 | 0;
     break block13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $246 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $246 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3 = $246;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $377 = $248;
    $377$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $249 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $249 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $379$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $377$hi;
    i64toi32_i32$2 = $377;
    i64toi32_i32$0 = $379$hi;
    i64toi32_i32$4 = $249;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $250 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $250 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $382 = $250;
    $382$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $251 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $251 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $384$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $382$hi;
    i64toi32_i32$2 = $382;
    i64toi32_i32$0 = $384$hi;
    i64toi32_i32$4 = $251;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $252 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $252 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18 = $252;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $388 = $3;
    $388$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $253 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $253 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $390$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $388$hi;
    i64toi32_i32$2 = $388;
    i64toi32_i32$0 = $390$hi;
    i64toi32_i32$4 = $253;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   block14 : {
    if (($10 | 0) < (32767 | 0)) {
     break block14
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $7 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$2;
    break block3;
   }
   block17 : {
    block15 : {
     if (($10 | 0) > (0 | 0)) {
      break block15
     }
     block16 : {
      $11 = 1 - $10 | 0;
      if ($11 >>> 0 > 127 >>> 0) {
       break block16
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      $10 = $10 + 127 | 0;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      __ashlti3($5 + 48 | 0 | 0, $18 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$3 | 0, $10 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0, $10 | 0);
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      __lshrti3($5 + 16 | 0 | 0, $18 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$3 | 0, $11 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      __lshrti3($5 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0, $11 | 0);
      i64toi32_i32$0 = $5;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $424 = i64toi32_i32$2;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $426 = i64toi32_i32$3;
      $426$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $424$hi;
      i64toi32_i32$0 = $424;
      i64toi32_i32$3 = $426$hi;
      i64toi32_i32$4 = $426;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $427 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $427$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $429 = i64toi32_i32$3;
      $429$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $431 = i64toi32_i32$0;
      $431$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $429$hi;
      i64toi32_i32$2 = $429;
      i64toi32_i32$0 = $431$hi;
      i64toi32_i32$4 = $431;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 0;
      $433 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = 0;
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $427$hi;
      i64toi32_i32$4 = $427;
      i64toi32_i32$0 = $434$hi;
      i64toi32_i32$2 = $433;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $18 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $5;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
      $437 = i64toi32_i32$0;
      $437$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
      $439 = i64toi32_i32$4;
      $439$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $437$hi;
      i64toi32_i32$3 = $437;
      i64toi32_i32$4 = $439$hi;
      i64toi32_i32$2 = $439;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $5;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $4 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$4;
      break block17;
     }
     i64toi32_i32$4 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$4;
     break block3;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $10;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $254 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $447$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $449 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $449$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $447$hi;
    i64toi32_i32$3 = $254;
    i64toi32_i32$4 = $449$hi;
    i64toi32_i32$2 = $449;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $7 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$3;
   block18 : {
    i64toi32_i32$3 = $18$hi;
    $455 = !($18 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $255 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $256 = 0
      } else {
       $256 = 1
      }
      $257 = $256;
     } else {
      $257 = 0
     }
     $255 = $257;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $455 : $255) {
     break block18
    }
    i64toi32_i32$2 = $7$hi;
    $461 = $7;
    $461$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    $465 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $466$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $461$hi;
    i64toi32_i32$2 = $461;
    i64toi32_i32$0 = $466$hi;
    i64toi32_i32$3 = $465;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    break block3;
   }
   block19 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
    $470 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $18;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$3 = $470;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break block19
    }
    i64toi32_i32$2 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$2;
    break block3;
   }
   i64toi32_i32$2 = $7$hi;
   $474 = $7;
   $474$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $477 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $477$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = $477$hi;
   i64toi32_i32$5 = $477;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2;
   $481 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $482$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $474$hi;
   i64toi32_i32$5 = $474;
   i64toi32_i32$4 = $482$hi;
   i64toi32_i32$2 = $481;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $7 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __fe_getround() {
  return 0 | 0;
 }
 
 function __fe_raise_inexact() {
  return 0 | 0;
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $8$hi = 0, $8 = 0, $7 = 0, $6$hi = 0, $10 = 0, $6 = 0, $5 = 0, $11$hi = 0, $11 = 0, i64toi32_i32$6 = 0, $12 = 0, $9 = 0, $9$hi = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $20 = 0, $25 = 0, $30 = 0, $34 = 0, $40 = 0, $48 = 0, $50 = 0, $58 = 0, $58$hi = 0, $64 = 0, $64$hi = 0, $68 = 0, $68$hi = 0, $78 = 0, $78$hi = 0, $106 = 0, $109 = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $167 = 0, $168 = 0, $168$hi = 0, $169 = 0, $169$hi = 0, $176$hi = 0, $179$hi = 0, $191 = 0, $191$hi = 0, $193$hi = 0, $197 = 0, $197$hi = 0, $199$hi = 0, $226 = 0, $226$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $232 = 0, $233$hi = 0, $245 = 0, $245$hi = 0, $248 = 0, $248$hi = 0, $256$hi = 0, $259 = 0, $260$hi = 0, $265 = 0, $266 = 0, $266$hi = 0, $267 = 0, $267$hi = 0, $274$hi = 0, $277$hi = 0, $291 = 0, $291$hi = 0, $297 = 0, $298$hi = 0, $304 = 0, $304$hi = 0, $306$hi = 0, $307 = 0, $307$hi = 0, $309 = 0, $309$hi = 0, $336 = 0, $336$hi = 0, $338 = 0, $338$hi = 0, $340 = 0, $340$hi = 0, $342 = 0, $343$hi = 0, $348 = 0, $348$hi = 0, $350$hi = 0, $354 = 0, $354$hi = 0, $357 = 0, $357$hi = 0, $358$hi = 0, $367 = 0, $367$hi = 0, $371$hi = 0, $375 = 0, $376$hi = 0, $379 = 0, $379$hi = 0, $382 = 0, $382$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $390$hi = 0, $396 = 0, $397$hi = 0, $401 = 0, $402$hi = 0, $405 = 0, $405$hi = 0, $411 = 0, $412$hi = 0, $416 = 0, $417$hi = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $1$hi;
     $7 = !($1 | i64toi32_i32$1 | 0);
     $20 = $7;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $8$hi;
     if (!($8 | i64toi32_i32$2 | 0) ? $20 : $25) {
      break block
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $9 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30 : $34) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $8;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $7 : $40) {
      break block2
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $48 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48 : $50) {
      break block4
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break block3;
    }
    block5 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block5
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $7 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break block3;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block3
    }
    block6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break block6
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block3
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break block3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block1
    }
    i64toi32_i32$1 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$1;
    break block3;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   $106 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$2 = $8;
   $109 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $6;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $8;
   $10 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106 : $109;
   i64toi32_i32$4 = $10;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $6 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4 : $2;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $9 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $8 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $10;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $139 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $139 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $12 = $139 & 32767 | 0;
   block7 : {
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$4 = $9;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $140 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $140 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $7 = $140 & 32767 | 0;
    if ($7) {
     break block7
    }
    $136 = $5 + 96 | 0;
    i64toi32_i32$5 = $6$hi;
    $137 = $6;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    $138 = $8;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $8$hi;
    $7 = !($8 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $6 : $8;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $141;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $7 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $7 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $10;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1 : $3;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   block8 : {
    if ($12) {
     break block8
    }
    $167 = $5 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $168 = $3;
    $168$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $169 = $1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $10 = !($1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $10;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3 : $1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $142 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $142 = i64toi32_i32$5
    }
    $176$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $176$hi;
    i64toi32_i32$2 = $142;
    i64toi32_i32$3 = $179$hi;
    i64toi32_i32$5 = $10 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$1;
    i64toi32_i32$4 = $168$hi;
    i64toi32_i32$2 = $169$hi;
    __ashlti3($167 | 0, $168 | 0, i64toi32_i32$4 | 0, $169 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $12 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 88 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 92 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $143 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $143 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $191 = $143;
   $191$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $144 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $144 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $193$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $191$hi;
   i64toi32_i32$4 = $191;
   i64toi32_i32$2 = $193$hi;
   i64toi32_i32$5 = $144;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$2 = $8;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $145 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $145 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $197 = $145;
   $197$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $146 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $199$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $197$hi;
   i64toi32_i32$0 = $197;
   i64toi32_i32$4 = $199$hi;
   i64toi32_i32$5 = $146;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $11 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $147 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $147 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $8 = $147;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   block9 : {
    if (($7 | 0) == ($12 | 0)) {
     break block9
    }
    block10 : {
     $10 = $7 - $12 | 0;
     if ($10 >>> 0 <= 127 >>> 0) {
      break block10
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $8 = 1;
     $8$hi = i64toi32_i32$2;
     break block9;
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$4 = $1$hi;
    __ashlti3($5 + 64 | 0 | 0, $8 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$4 | 0, 128 - $10 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    __lshrti3($5 + 48 | 0 | 0, $8 | 0, i64toi32_i32$4 | 0, $1 | 0, i64toi32_i32$2 | 0, $10 | 0);
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $226 = i64toi32_i32$2;
    $226$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $228 = i64toi32_i32$4;
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
    $230 = i64toi32_i32$2;
    $230$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$0 = $228;
    i64toi32_i32$2 = $230$hi;
    i64toi32_i32$5 = $230;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $232 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $233$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $226$hi;
    i64toi32_i32$5 = $226;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$0 = $232;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $8 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 56 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 60 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$4 = $11;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $11 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $148 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $148 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $6 = $148;
   $6$hi = i64toi32_i32$4;
   block12 : {
    block11 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $149 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $150 = 0
       } else {
        $150 = 1
       }
       $151 = $150;
      } else {
       $151 = 0
      }
      $149 = $151;
     }
     if ($149) {
      break block11
     }
     i64toi32_i32$2 = 0;
     $3 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$0 = $6;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $245 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $245$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $248 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $248$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $245$hi;
     i64toi32_i32$4 = $245;
     i64toi32_i32$2 = $248$hi;
     i64toi32_i32$5 = $248;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break block3
     }
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$0 = $6;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $256$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$5 = $8;
     $259 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $260$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $256$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $260$hi;
     i64toi32_i32$2 = $259;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break block12
     }
     $265 = $5 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $266 = $2;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     $267 = i64toi32_i32$0;
     $267$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     $10 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $10;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2 : i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $152 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $152 = i64toi32_i32$1
     }
     $274$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $277$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $274$hi;
     i64toi32_i32$5 = $152;
     i64toi32_i32$2 = $277$hi;
     i64toi32_i32$1 = $10 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $10 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $266$hi;
     i64toi32_i32$5 = $267$hi;
     __ashlti3($265 | 0, $266 | 0, i64toi32_i32$0 | 0, $267 | 0, i64toi32_i32$5 | 0, $10 | 0);
     $7 = $7 - $10 | 0;
     i64toi32_i32$3 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break block12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $291 = i64toi32_i32$2;
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$5 = $8;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$1 = $8;
    $297 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $291$hi;
    i64toi32_i32$1 = $291;
    i64toi32_i32$2 = $298$hi;
    i64toi32_i32$5 = $297;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break block12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $153 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $153 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $304 = $153;
    $304$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $154 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $154 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $306$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $304$hi;
    i64toi32_i32$4 = $304;
    i64toi32_i32$1 = $306$hi;
    i64toi32_i32$5 = $154;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $307 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $307$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$0 = $8;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $309 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $309$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $307$hi;
    i64toi32_i32$1 = $307;
    i64toi32_i32$0 = $309$hi;
    i64toi32_i32$5 = $309;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $7 = $7 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $155 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $155 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4 = $155;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $8 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $8$hi = i64toi32_i32$4;
   block13 : {
    if (($7 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$1 = $8;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    break block3;
   }
   $10 = 0;
   block15 : {
    block14 : {
     if (($7 | 0) <= (0 | 0)) {
      break block14
     }
     $10 = $7;
     break block15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    __ashlti3($5 + 16 | 0 | 0, $2 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, $7 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    __lshrti3($5 | 0, $2 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0, 1 - $7 | 0 | 0);
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $336 = i64toi32_i32$0;
    $336$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $338 = i64toi32_i32$1;
    $338$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
    $340 = i64toi32_i32$0;
    $340$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $338$hi;
    i64toi32_i32$4 = $338;
    i64toi32_i32$0 = $340$hi;
    i64toi32_i32$5 = $340;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $342 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $336$hi;
    i64toi32_i32$5 = $336;
    i64toi32_i32$0 = $343$hi;
    i64toi32_i32$4 = $342;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $156 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $156 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $348 = $156;
   $348$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $157 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $350$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $348$hi;
   i64toi32_i32$0 = $348;
   i64toi32_i32$5 = $350$hi;
   i64toi32_i32$4 = $157;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $10;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $158 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $158 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $354 = $158;
   $354$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $159 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $159 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $159;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $357 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $357$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $354$hi;
   i64toi32_i32$1 = $354;
   i64toi32_i32$0 = $357$hi;
   i64toi32_i32$4 = $357;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = $358$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $7 = $2 & 7 | 0;
   block21 : {
    block19 : {
     block18 : {
      switch (__fe_getround() | 0 | 0) {
      case 0:
       block20 : {
        if (($7 | 0) == (4 | 0)) {
         break block20
        }
        i64toi32_i32$1 = $4$hi;
        $367 = $4;
        $367$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = 0;
        $371$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3;
        i64toi32_i32$5 = $371$hi;
        i64toi32_i32$4 = $7 >>> 0 > 4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $8 = i64toi32_i32$2;
        $8$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$4 = $3;
        $375 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $376$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $367$hi;
        i64toi32_i32$4 = $367;
        i64toi32_i32$3 = $376$hi;
        i64toi32_i32$0 = $375;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $8$hi;
        $3 = $8;
        $3$hi = i64toi32_i32$2;
        break block19;
       }
       i64toi32_i32$2 = $4$hi;
       $379 = $4;
       $379$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $382 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $382$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $382$hi;
       i64toi32_i32$0 = $382;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $8 = i64toi32_i32$3;
       $8$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3;
       $386 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $387$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $379$hi;
       i64toi32_i32$0 = $379;
       i64toi32_i32$5 = $387$hi;
       i64toi32_i32$2 = $386;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $8$hi;
       $3 = $8;
       $3$hi = i64toi32_i32$3;
       break block21;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $390 = $4;
       $390$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$4 = $8;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $396 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($7 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $397$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3;
       i64toi32_i32$3 = $397$hi;
       i64toi32_i32$0 = $396;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $8 = i64toi32_i32$5;
       $8$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3;
       $401 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $402$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $390$hi;
       i64toi32_i32$0 = $390;
       i64toi32_i32$1 = $402$hi;
       i64toi32_i32$2 = $401;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       $3 = $8;
       $3$hi = i64toi32_i32$5;
       break block19;
      case 2:
       break block18;
      default:
       break block19;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $405 = $4;
     $405$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $8$hi;
     $411 = !($8 | i64toi32_i32$5 | 0) & ($7 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $412$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$2 = $411;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $8 = i64toi32_i32$1;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3;
     $416 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $405$hi;
     i64toi32_i32$2 = $405;
     i64toi32_i32$3 = $417$hi;
     i64toi32_i32$4 = $416;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     $3 = $8;
     $3$hi = i64toi32_i32$1;
    }
    if (!$7) {
     break block3
    }
   }
   __fe_raise_inexact() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 112 | 0;
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $4 = 0, $4$hi = 0, $5 = 0, $5$hi = 0, $2 = 0, $6$hi = 0, $6 = 0, $3 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $7 = 0, $33 = 0, $3$hi = 0, $35 = 0, $36 = 0, $36$hi = 0, $52 = 0, $54$hi = 0, $56 = 0, $56$hi = 0, $57$hi = 0, $59 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  wasm2js_scratch_store_f64(+$1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 1048575;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  block2 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $27 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $27;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 2047;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$0;
    if (!($5 | i64toi32_i32$0 | 0)) {
     break block
    }
    block1 : {
     i64toi32_i32$2 = $5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2047;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block1
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $28 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $28 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6 = $28;
     $6$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 60;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $29 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $29 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4 = $29;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$0 = $5;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 15360;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $5 = i64toi32_i32$4;
     $5$hi = i64toi32_i32$5;
     break block2;
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $30 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $30 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $6 = $30;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $31 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $31 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $4 = $31;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5 = 32767;
    $5$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $4$hi;
    if (!!($4 | i64toi32_i32$3 | 0)) {
     break block3
    }
    i64toi32_i32$3 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$3;
    break block2;
   }
   $35 = $2;
   i64toi32_i32$3 = $4$hi;
   $36 = $4;
   $36$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) == (32 | 0)) {
    $32 = Math_clz32(i64toi32_i32$5) + 32 | 0
   } else {
    $32 = i64toi32_i32$1
   }
   $7 = $32;
   i64toi32_i32$0 = $36$hi;
   i64toi32_i32$3 = 0;
   __ashlti3($35 | 0, $36 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, $7 + 49 | 0 | 0);
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $6 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $6$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $5 = 15372 - $7 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$0 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $4;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
  $52 = i64toi32_i32$3;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$0 = $5;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 48;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $33 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $33 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $54$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
  $56 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $54$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = $56$hi;
  i64toi32_i32$1 = $56;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  $57$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$5 = $57$hi;
  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
  i64toi32_i32$3 = $6$hi;
  i64toi32_i32$1 = $6;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $59 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$0 = $52;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $59;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $51 = 0, $51$hi = 0, $54 = 0, $54$hi = 0, $59 = 0, $70 = 0, $70$hi = 0, $73 = 0, $73$hi = 0;
  $4 = 1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break block2
    }
    block3 : {
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39 = 0
       } else {
        $39 = 1
       }
       $41 = $39;
      } else {
       $41 = 0
      }
      $38 = $41;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3;
     if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38)) {
      break block3
     }
     return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $51 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $54 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $54$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $51$hi;
    i64toi32_i32$0 = $51;
    i64toi32_i32$3 = $54$hi;
    i64toi32_i32$1 = $54;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   block4 : {
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $59 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $42 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43 = 0
      } else {
       $43 = 1
      }
      $44 = $43;
     } else {
      $44 = 0
     }
     $42 = $44;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59 : $42)) {
     break block4
    }
    return -1 | 0;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $70 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $70$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $73 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $73$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $70$hi;
   i64toi32_i32$0 = $70;
   i64toi32_i32$3 = $73$hi;
   i64toi32_i32$1 = $73;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break block2
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break block
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break block
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  block2 : {
   block : {
    if (($1 | 0) < (1024 | 0)) {
     break block
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    block1 : {
     if ($1 >>> 0 >= 2047 >>> 0) {
      break block1
     }
     $1 = $1 + -1023 | 0;
     break block2;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = ($1 >>> 0 < 3069 >>> 0 ? $1 : 3069) + -2046 | 0;
    break block2;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break block2
   }
   $0 = $0 * 2.004168360008973e-292;
   block3 : {
    if ($1 >>> 0 <= -1992 >>> 0) {
     break block3
    }
    $1 = $1 + 969 | 0;
    break block2;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = ($1 >>> 0 > -2960 >>> 0 ? $1 : -2960) + 1938 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 2147418112;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $23 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $11 | $23 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $20 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $24;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $7;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $17 = 0, $11 = 0, $19 = 0, $19$hi = 0, $23$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block1 : {
   block : {
    if ($1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break block1;
   }
   i64toi32_i32$0 = 0;
   $11 = $1;
   $1 = Math_clz32($1);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1 ^ 31 | 0) | 0 | 0);
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $14 = 0, $14$hi = 0, $19 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  __addtf3($5 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $19 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $20 = 0, $62 = 0, $63 = 0, $63$hi = 0, $64 = 0, $64$hi = 0, $68$hi = 0, $71 = 0, $74 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  block2 : {
   block : {
    if (($3 | 0) < (16384 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    block1 : {
     if ($3 >>> 0 >= 32767 >>> 0) {
      break block1
     }
     $3 = $3 + -16383 | 0;
     break block2;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = ($3 >>> 0 < 49149 >>> 0 ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break block2;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break block2
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = $4;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   block3 : {
    if ($3 >>> 0 <= -32652 >>> 0) {
     break block3
    }
    $3 = $3 + 16269 | 0;
    break block2;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = ($3 >>> 0 > -48920 >>> 0 ? $3 : -48920) + 32538 | 0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $62 = $4;
  i64toi32_i32$0 = $1$hi;
  $63 = $1;
  $63$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $64 = $2;
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $68$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$2 = $64$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $68$hi;
  __multf3($62 | 0, $63 | 0, i64toi32_i32$1 | 0, $64 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $71 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $71;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $74;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 80 | 0;
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $46;
  $2$hi = i64toi32_i32$2;
  $16 = $2;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $48;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, $7$hi = 0, i64toi32_i32$6 = 0, $7 = 0, $6$hi = 0, $12$hi = 0, $6 = 0, $16$hi = 0, $8$hi = 0, $12 = 0, $17$hi = 0, $21$hi = 0, $8 = 0, $9 = 0, $16 = 0, $21 = 0, $14$hi = 0, $15$hi = 0, $11 = 0, $17 = 0, $18$hi = 0, $14 = 0, $15 = 0, $18 = 0, $22 = 0, $22$hi = 0, $24$hi = 0, $13 = 0, $19 = 0, $19$hi = 0, $322 = 0, $324 = 0, $10 = 0, $325 = 0, $326 = 0, $327 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $348 = 0, $20 = 0, $20$hi = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $23 = 0, $23$hi = 0, $359 = 0, $360 = 0, $361 = 0, $364 = 0, $24 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $51 = 0, $55 = 0, $62 = 0, $66 = 0, $75 = 0, $75$hi = 0, $80 = 0, $80$hi = 0, $88 = 0, $88$hi = 0, $110 = 0, $111 = 0, $111$hi = 0, $112 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $162 = 0, $164 = 0, $164$hi = 0, $168$hi = 0, $177 = 0, $177$hi = 0, $178$hi = 0, $181 = 0, $184 = 0, $184$hi = 0, $187$hi = 0, $195 = 0, $195$hi = 0, $196$hi = 0, $198 = 0, $201 = 0, $201$hi = 0, $204$hi = 0, $212 = 0, $212$hi = 0, $213$hi = 0, $215 = 0, $218 = 0, $218$hi = 0, $221$hi = 0, $229 = 0, $229$hi = 0, $230$hi = 0, $232 = 0, $233 = 0, $233$hi = 0, $236 = 0, $236$hi = 0, $239$hi = 0, $244 = 0, $246$hi = 0, $249 = 0, $250 = 0, $250$hi = 0, $252 = 0, $252$hi = 0, $257 = 0, $257$hi = 0, $261 = 0, $262$hi = 0, $263$hi = 0, $265 = 0, $266$hi = 0, $267$hi = 0, $268$hi = 0, $272$hi = 0, $283 = 0, $283$hi = 0, $286 = 0, $286$hi = 0, $290$hi = 0, $291 = 0, $291$hi = 0, $297 = 0, $297$hi = 0, $306 = 0, $306$hi = 0, $311 = 0, $311$hi = 0, $314 = 0, $314$hi = 0, $316$hi = 0, $317 = 0, $317$hi = 0, $319$hi = 0, $320$hi = 0, $323 = 0, $324$hi = 0, $325$hi = 0, $328 = 0, $329$hi = 0, $335 = 0, $335$hi = 0, $340 = 0, $340$hi = 0, $341 = 0, $341$hi = 0, $344 = 0, $344$hi = 0, $347 = 0, $347$hi = 0, $349$hi = 0, $353 = 0, $353$hi = 0, $357 = 0, $358$hi = 0, $359$hi = 0, $362 = 0, $362$hi = 0, $363 = 0, $363$hi = 0, $370 = 0, $370$hi = 0, $376 = 0, $376$hi = 0, $378$hi = 0, $379 = 0, $379$hi = 0, $380 = 0, $380$hi = 0, $381 = 0, $381$hi = 0, $383$hi = 0, $387 = 0, $388$hi = 0, $389 = 0, $389$hi = 0, $390 = 0, $390$hi = 0, $399 = 0, $399$hi = 0, $403 = 0, $404 = 0, $404$hi = 0, $410 = 0, $410$hi = 0, $414 = 0, $415$hi = 0, $416$hi = 0, $420 = 0, $421$hi = 0, $422 = 0, $422$hi = 0, $423 = 0, $423$hi = 0, $430 = 0, $430$hi = 0, $435 = 0, $435$hi = 0, $440 = 0, $440$hi = 0, $443 = 0, $443$hi = 0, $446 = 0, $447$hi = 0, $450 = 0, $451$hi = 0, $452$hi = 0, $455 = 0, $456$hi = 0, $458$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $464$hi = 0, $465 = 0, $465$hi = 0, $466 = 0, $466$hi = 0, $467 = 0, $467$hi = 0, $474 = 0, $474$hi = 0, $477 = 0, $477$hi = 0, $480 = 0, $482$hi = 0, $483 = 0, $483$hi = 0, $488 = 0, $488$hi = 0, $489 = 0, $489$hi = 0, $491$hi = 0, $492$hi = 0, $494 = 0, $495$hi = 0, $496$hi = 0, $500 = 0, $501$hi = 0, $515$hi = 0, $517 = 0, $517$hi = 0, $518$hi = 0, $522 = 0, $523$hi = 0, $530 = 0, $532 = 0, $532$hi = 0, $534$hi = 0, $536 = 0, $536$hi = 0, $543$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $550 = 0, $551$hi = 0, $565 = 0, $565$hi = 0, $567$hi = 0, $571$hi = 0, $573 = 0, $573$hi = 0, $602 = 0, $602$hi = 0, $605 = 0, $605$hi = 0, $609$hi = 0, $610 = 0, $610$hi = 0, $611 = 0, $611$hi = 0, $614 = 0, $614$hi = 0, $618 = 0, $619$hi = 0, $631 = 0, $631$hi = 0, $632 = 0, $632$hi = 0, $640 = 0, $644 = 0, $645$hi = 0, $649 = 0, $653 = 0, $654$hi = 0, $658 = 0, $659$hi = 0, $661 = 0, $661$hi = 0, $664 = 0, $667 = 0, $667$hi = 0, $668 = 0, $673 = 0, $678 = 0, $679$hi = 0, $683 = 0, $684$hi = 0, $686 = 0, $686$hi = 0, $689 = 0, $692 = 0, $692$hi = 0, $693 = 0, $698 = 0, $703 = 0, $704$hi = 0, $708 = 0, $709$hi = 0, $710$hi = 0;
  $5 = __stack_pointer - 336 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $322 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $324 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $324 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $10 = $324 & 32767 | 0;
     if (($10 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $11 = 0;
     if (($9 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$0 = $1$hi;
     $51 = !($1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $12 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $12;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51 : $55) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$0;
     break block3;
    }
    block4 : {
     i64toi32_i32$0 = $3$hi;
     $62 = !($3 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62 : $66) {
      break block4
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $8 = 0;
      $8$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$3;
     break block3;
    }
    block7 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block7
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block8 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block8
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $8;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    $11 = 0;
    block10 : {
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break block10
     }
     $110 = $5 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111 = $1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     $112 = $7;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $7$hi;
     $11 = !($7 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $11;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1 : $7;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $325 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $325 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $325;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $11 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     __ashlti3($110 | 0, $111 | 0, i64toi32_i32$5 | 0, $112 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $11 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 328 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 332 | 0) >> 2] | 0;
     $7 = i64toi32_i32$2;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break block1
    }
    $136 = $5 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137 = $3;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    $138 = $6;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $6$hi;
    $13 = !($6 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $13;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $6;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $326 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $326 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $326;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $13 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $13 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = (i64toi32_i32$2 + $11 | 0) + -16 | 0;
    i64toi32_i32$4 = $5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 312 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 316 | 0) >> 2] | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $162 = $5 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $327 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $327 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $164 = $327;
   $164$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $329 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $329 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $168$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $164$hi;
   i64toi32_i32$4 = $164;
   i64toi32_i32$0 = $168$hi;
   i64toi32_i32$3 = $329;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($162 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = $5;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
   $177 = i64toi32_i32$3;
   $177$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $177$hi;
   i64toi32_i32$2 = $177;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $178$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $178$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $181 = $5 + 256 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $330 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $330 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $184 = $330;
   $184$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 280 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 284 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $331 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $331 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $184$hi;
   i64toi32_i32$5 = $184;
   i64toi32_i32$0 = $187$hi;
   i64toi32_i32$1 = $331;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   __multi3($181 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 264 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 268 | 0) >> 2] | 0;
   $195 = i64toi32_i32$1;
   $195$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $195$hi;
   i64toi32_i32$0 = $195;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $196$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $196$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 240 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $198 = $5 + 224 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $332 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $332 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $201 = $332;
   $201$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 252 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $333 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $333 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $204$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $201$hi;
   i64toi32_i32$5 = $201;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$4 = $333;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   __multi3($198 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = $5;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 232 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 236 | 0) >> 2] | 0;
   $212 = i64toi32_i32$4;
   $212$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $212$hi;
   i64toi32_i32$2 = $212;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $213$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $213$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 208 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $215 = $5 + 192 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $334 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $334 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $218 = $334;
   $218$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 216 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 220 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $336 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $336 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $221$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $218$hi;
   i64toi32_i32$5 = $218;
   i64toi32_i32$0 = $221$hi;
   i64toi32_i32$3 = $336;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   __multi3($215 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 204 | 0) >> 2] | 0;
   $229 = i64toi32_i32$3;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $229$hi;
   i64toi32_i32$0 = $229;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $230$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 176 | 0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $232 = $5 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $233 = $2;
   $233$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $337 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $337 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $236 = $337;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $338 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $338 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $239$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $236$hi;
   i64toi32_i32$5 = $236;
   i64toi32_i32$2 = $239$hi;
   i64toi32_i32$1 = $338;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $233$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   __multi3($232 | 0, $233 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $244 = $5 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $339 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $339 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $246$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   __multi3($244 | 0, $339 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $249 = $5 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $250 = $4;
   $250$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] | 0;
   $252 = i64toi32_i32$4;
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] | 0;
   $257 = i64toi32_i32$4;
   $257$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$4 = $257$hi;
   i64toi32_i32$2 = $257;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$2 = $6;
   $261 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $262$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $252$hi;
   i64toi32_i32$2 = $252;
   i64toi32_i32$3 = $262$hi;
   i64toi32_i32$0 = $261;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $263$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $265 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $266$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $263$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $266$hi;
   i64toi32_i32$2 = $265;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $267$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $268$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $250$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $268$hi;
   i64toi32_i32$2 = 0;
   __multi3($249 | 0, $250 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $272$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $272$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($5 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $9 = $11 + ($10 - $9 | 0) | 0;
   block12 : {
    block11 : {
     i64toi32_i32$1 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16 = $342;
     $16$hi = i64toi32_i32$3;
     $283 = $16;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $343 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $343 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $286 = $343;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] | 0;
     $17 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $345 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $345 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $290$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $286$hi;
     i64toi32_i32$2 = $286;
     i64toi32_i32$1 = $290$hi;
     i64toi32_i32$5 = $345;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $291 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $291$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $283$hi;
     i64toi32_i32$3 = $283;
     i64toi32_i32$2 = $291$hi;
     i64toi32_i32$5 = $291;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2 = $346;
     $2$hi = i64toi32_i32$1;
     $297 = $2;
     $297$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $348 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $348 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20 = $348;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $349 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $349 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4 = $349;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $297$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($297 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $306 = i64toi32_i32$0;
     $306$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $350 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22 = $350;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $351 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $351 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $6 = $351;
     $6$hi = i64toi32_i32$4;
     $311 = $6;
     $311$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $352 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $352 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $314 = $352;
     $314$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $354 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $354 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $316$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $314$hi;
     i64toi32_i32$4 = $314;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $354;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $317 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $355 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $355 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $319$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $317$hi;
     i64toi32_i32$1 = $317;
     i64toi32_i32$0 = $319$hi;
     i64toi32_i32$5 = $355;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16;
     $323 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $324$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $320$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $324$hi;
     i64toi32_i32$1 = $323;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $325$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$1 = $12;
     $328 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $329$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $325$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $329$hi;
     i64toi32_i32$5 = $328;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $356 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $356 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $12 = $356;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $311$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($311 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $335 = i64toi32_i32$0;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $306$hi;
     i64toi32_i32$2 = $306;
     i64toi32_i32$0 = $335$hi;
     i64toi32_i32$5 = $335;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21;
     i64toi32_i32$4 = 0;
     $340 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $341 = i64toi32_i32$1;
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $344 = $15;
     $344$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $358 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $358 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23 = $358;
     $23$hi = i64toi32_i32$5;
     $347 = $23;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $359 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $359 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $349$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$5 = $347;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$2 = $359;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $7 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $344$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = __wasm_i64_mul($344 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $353 = i64toi32_i32$4;
     $353$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $341$hi;
     i64toi32_i32$3 = $341;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$2 = $353;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     $357 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$2 = $340;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$3 = $357;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $359$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $362 = i64toi32_i32$2;
     $362$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $359$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $362$hi;
     i64toi32_i32$3 = $362;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $363 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $370 = i64toi32_i32$5;
     $370$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$3 = $370;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $360 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $360 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $376 = $360;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $361 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $361 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $378$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $376$hi;
     i64toi32_i32$1 = $376;
     i64toi32_i32$4 = $378$hi;
     i64toi32_i32$0 = $361;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $379 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $379$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $363$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$1 = $379$hi;
     i64toi32_i32$0 = $379;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $380 = i64toi32_i32$5;
     $380$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $381 = $17;
     $381$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $364 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $364 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $383$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $381$hi;
     i64toi32_i32$2 = $381;
     i64toi32_i32$4 = $383$hi;
     i64toi32_i32$0 = $364;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     $387 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $388$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $380$hi;
     i64toi32_i32$0 = $380;
     i64toi32_i32$5 = $388$hi;
     i64toi32_i32$2 = $387;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $389 = i64toi32_i32$4;
     $389$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $390 = $16;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $6 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $399 = i64toi32_i32$3;
     $399$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$2 = $399;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21;
     $403 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $404 = $403;
     $404$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $410 = i64toi32_i32$2;
     $410$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $410$hi;
     i64toi32_i32$1 = $410;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17;
     $414 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $415$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$1 = $404;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$0 = $414;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $416$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $390$hi;
     i64toi32_i32$4 = $390;
     i64toi32_i32$1 = $416$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16;
     $420 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $421$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $389$hi;
     i64toi32_i32$0 = $389;
     i64toi32_i32$2 = $421$hi;
     i64toi32_i32$4 = $420;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $422 = i64toi32_i32$1;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $423 = $17;
     $423$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $430 = i64toi32_i32$0;
     $430$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$0 = $430$hi;
     i64toi32_i32$4 = $430;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $435 = i64toi32_i32$3;
     $435$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $435$hi;
     i64toi32_i32$4 = $435;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $440 = i64toi32_i32$5;
     $440$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$4 = $440;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $12 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $365 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $365 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $443 = $365;
     $443$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     $446 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$2 = $4;
     $450 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $451$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $447$hi;
     i64toi32_i32$2 = $446;
     i64toi32_i32$0 = $451$hi;
     i64toi32_i32$1 = $450;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $452$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = $7;
     $455 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $456$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $452$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $456$hi;
     i64toi32_i32$2 = $455;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $366 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $366 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $458$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $443$hi;
     i64toi32_i32$5 = $443;
     i64toi32_i32$4 = $458$hi;
     i64toi32_i32$2 = $366;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $459 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $459$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $423$hi;
     i64toi32_i32$1 = $423;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$2 = $459;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17;
     $463 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $464$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $422$hi;
     i64toi32_i32$2 = $422;
     i64toi32_i32$0 = $464$hi;
     i64toi32_i32$1 = $463;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $465 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $466 = $4;
     $466$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $467 = $24;
     $467$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $474 = i64toi32_i32$2;
     $474$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = $474$hi;
     i64toi32_i32$1 = $474;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $367 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $367 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $477 = $367;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$5 = $7;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2;
     $480 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $480;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $368 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $368 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $477$hi;
     i64toi32_i32$5 = $477;
     i64toi32_i32$1 = $482$hi;
     i64toi32_i32$3 = $368;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $483 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $483$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $467$hi;
     i64toi32_i32$4 = $467;
     i64toi32_i32$5 = $483$hi;
     i64toi32_i32$3 = $483;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24;
     i64toi32_i32$1 = 0;
     $488 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $488$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $489 = i64toi32_i32$2;
     $489$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $369 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $369 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $491$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $489$hi;
     i64toi32_i32$1 = $489;
     i64toi32_i32$3 = $491$hi;
     i64toi32_i32$4 = $369;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $492$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $492$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2;
     $494 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $495$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $488$hi;
     i64toi32_i32$4 = $488;
     i64toi32_i32$2 = $495$hi;
     i64toi32_i32$1 = $494;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$0 = $466;
     i64toi32_i32$4 = $496$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     $500 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $501$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$3 = $501$hi;
     i64toi32_i32$0 = $500;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break block11
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     __multi3($5 + 80 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $371 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $371 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $515$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
     $517 = i64toi32_i32$5;
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $371;
     i64toi32_i32$5 = $517$hi;
     i64toi32_i32$2 = $517;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $518$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $522 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $523$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $518$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $523$hi;
     i64toi32_i32$4 = $522;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $6 = i64toi32_i32$5;
     $6$hi = i64toi32_i32$3;
     $9 = $9 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$5;
     break block12;
    }
    $530 = $5 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $532 = $372;
    $532$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $373 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $373 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $534$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $532$hi;
    i64toi32_i32$0 = $532;
    i64toi32_i32$5 = $534$hi;
    i64toi32_i32$4 = $373;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $536 = $2;
    $536$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $374 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $374 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4 = $374;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $536$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    __multi3($530 | 0, $536 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $375 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $375 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $543$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 104 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
    $545 = i64toi32_i32$5;
    $545$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $543$hi;
    i64toi32_i32$4 = $375;
    i64toi32_i32$5 = $545$hi;
    i64toi32_i32$0 = $545;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $546$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $550 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $551$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $546$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $551$hi;
    i64toi32_i32$1 = $550;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$2;
    $9 = $9 + 16383 | 0;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22 = $1;
    $22$hi = i64toi32_i32$5;
   }
   block13 : {
    if (($9 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $8$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$3;
    break block3;
   }
   block15 : {
    block14 : {
     if (($9 | 0) < (1 | 0)) {
      break block14
     }
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $565 = $377;
     $565$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $378 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $378 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $567$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $565$hi;
     i64toi32_i32$2 = $565;
     i64toi32_i32$3 = $567$hi;
     i64toi32_i32$1 = $378;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $9;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $382 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $382 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $571$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $573 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $573$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $571$hi;
     i64toi32_i32$2 = $382;
     i64toi32_i32$3 = $573$hi;
     i64toi32_i32$1 = $573;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $6 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $6$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$5 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $383 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $383 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4 = $383;
     $4$hi = i64toi32_i32$2;
     break block15;
    }
    block16 : {
     if (($9 | 0) > (-113 | 0)) {
      break block16
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break block3;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    __lshrti3($5 + 64 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    __ashlti3($5 + 48 | 0 | 0, $22 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0, $9 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $6$hi;
    __multi3($5 + 32 | 0 | 0, $3 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
    $602 = i64toi32_i32$1;
    $602$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $384 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $384 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $605 = $384;
    $605$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $385 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $385 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $609$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $605$hi;
    i64toi32_i32$5 = $605;
    i64toi32_i32$1 = $609$hi;
    i64toi32_i32$2 = $385;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $610 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $610$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $602$hi;
    i64toi32_i32$3 = $602;
    i64toi32_i32$5 = $610$hi;
    i64toi32_i32$2 = $610;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $611 = i64toi32_i32$0;
    $611$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $614 = i64toi32_i32$4;
    $614$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $386 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $386 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $7 = $386;
    $7$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $614$hi;
    i64toi32_i32$3 = $614;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7;
    $618 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $619$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $611$hi;
    i64toi32_i32$2 = $611;
    i64toi32_i32$4 = $619$hi;
    i64toi32_i32$1 = $618;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   __multi3($5 + 16 | 0 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   __multi3($5 | 0, $3 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $6$hi;
   $631 = $6;
   $631$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $632 = $2;
   $632$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $7 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$5 = $7;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3;
   $640 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$5 = $7;
   $644 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $645$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$3 = $645$hi;
   i64toi32_i32$4 = $644;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14;
   $649 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14;
   $653 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $640 : $649;
   i64toi32_i32$4 = 0;
   $654$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $632$hi;
   i64toi32_i32$5 = $632;
   i64toi32_i32$1 = $654$hi;
   i64toi32_i32$2 = $653;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2;
   $658 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $659$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $631$hi;
   i64toi32_i32$2 = $631;
   i64toi32_i32$0 = $659$hi;
   i64toi32_i32$5 = $658;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $661 = i64toi32_i32$1;
   $661$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $664 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $667 = i64toi32_i32$4;
   $667$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667;
   $668 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2;
   $673 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2;
   $678 = $664 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $668 : $673) | 0;
   i64toi32_i32$4 = 0;
   $679$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = $679$hi;
   i64toi32_i32$3 = $678;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3;
   $683 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $684$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $661$hi;
   i64toi32_i32$3 = $661;
   i64toi32_i32$1 = $684$hi;
   i64toi32_i32$5 = $683;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $686 = i64toi32_i32$2;
   $686$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $689 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $692 = i64toi32_i32$4;
   $692$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$4 = $692$hi;
   i64toi32_i32$3 = $692;
   $693 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $4 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4;
   $698 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4;
   $703 = $689 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $693 : $698) | 0;
   i64toi32_i32$4 = 0;
   $704$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = $704$hi;
   i64toi32_i32$0 = $703;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2;
   $708 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $709$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $686$hi;
   i64toi32_i32$0 = $686;
   i64toi32_i32$2 = $709$hi;
   i64toi32_i32$5 = $708;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $710$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = $710$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $8 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $8$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $8;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $5 + 336 | 0;
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2 = 0, $13 = 0, $3 = 0, $4 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  block1 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $13 & 32767 | 0;
    if (($3 | 0) == (32767 | 0)) {
     break block
    }
    $4 = 4;
    if ($3) {
     break block1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5 = 0, $9$hi = 0, $9 = 0, $8$hi = 0, $7 = 0, $8 = 0, i64toi32_i32$6 = 0, $10 = 0, $11$hi = 0, $52 = 0, $6 = 0, $53 = 0, $54 = 0, $55 = 0, $11 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $117$hi = 0, $120 = 0, $121$hi = 0, $141 = 0, $141$hi = 0, $143$hi = 0, $146 = 0, $146$hi = 0, $148$hi = 0, $160$hi = 0, $163 = 0, $164$hi = 0, $192 = 0, $192$hi = 0, $194$hi = 0, $203 = 0, $204 = 0, $204$hi = 0, $206 = 0, $206$hi = 0, $212$hi = 0, $213 = 0, $213$hi = 0, $219 = 0, $219$hi = 0, $224$hi = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break block
     }
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     if (!(__fpclassifyl($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0)) {
      break block
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6 = $52;
     $7 = $6 & 32767 | 0;
     if (($7 | 0) != (32767 | 0)) {
      break block1
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $8 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $9 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $9$hi;
    if ((__letf2($1 | 0, i64toi32_i32$2 | 0, $8 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, $9 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break block3
    }
    block4 : {
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$2 | 0) | 0)) {
      break block4
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     break block2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break block2;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $10 = $53 & 32767 | 0;
   block6 : {
    block5 : {
     if (!$7) {
      break block5
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break block6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $8 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7 = $54 + -120 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   block7 : {
    if ($10) {
     break block7
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
    $9 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $10 = $55 + -120 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $8;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $8 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $8$hi = i64toi32_i32$1;
   block8 : {
    if (($7 | 0) <= ($10 | 0)) {
     break block8
    }
    label : while (1) {
     block11 : {
      block9 : {
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $117$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3;
       $120 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $121$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $117$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $121$hi;
       i64toi32_i32$2 = $120;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $9 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57 = 0
         } else {
          $57 = 1
         }
         $58 = $57;
        } else {
         $58 = 0
        }
        $56 = $58;
       }
       if ($56) {
        break block9
       }
       block10 : {
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$1 = $9;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break block10
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $2 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break block2;
       }
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $141 = $59;
       $141$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $143$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $141$hi;
       i64toi32_i32$3 = $141;
       i64toi32_i32$1 = $143$hi;
       i64toi32_i32$0 = $60;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $8 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $8$hi = i64toi32_i32$1;
       break block11;
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$2 = $8;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $146 = $61;
      $146$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $148$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $146$hi;
      i64toi32_i32$3 = $146;
      i64toi32_i32$1 = $148$hi;
      i64toi32_i32$0 = $62;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $8 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $8$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4 = $63;
     $4$hi = i64toi32_i32$3;
     $7 = $7 + -1 | 0;
     if (($7 | 0) > ($10 | 0)) {
      continue label
     }
     break label;
    };
    $7 = $10;
   }
   block13 : {
    block12 : {
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $160$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3;
     $163 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $164$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $160$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $164$hi;
     i64toi32_i32$1 = $163;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $9 = i64toi32_i32$2;
     $9$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65 = 0
       } else {
        $65 = 1
       }
       $66 = $65;
      } else {
       $66 = 0
      }
      $64 = $66;
     }
     if ($64) {
      break block12
     }
     i64toi32_i32$3 = $8$hi;
     $9 = $8;
     $9$hi = i64toi32_i32$3;
     break block13;
    }
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$3 = $9;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block13
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block14 : {
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block14
    }
    label1 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $67;
     $3$hi = i64toi32_i32$3;
     $7 = $7 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $68;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $192 = $3;
     $192$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $194$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $192$hi;
     i64toi32_i32$2 = $192;
     i64toi32_i32$3 = $194$hi;
     i64toi32_i32$0 = $69;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $9 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $9$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $9;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label1
     }
     break label1;
    };
   }
   $10 = $6 & 32768 | 0;
   block15 : {
    if (($7 | 0) > (0 | 0)) {
     break block15
    }
    $203 = $5 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $204 = $4;
    $204$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$0 = $9;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $206 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $206$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $7 + 120 | 0 | $10 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $212$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $206$hi;
    i64toi32_i32$3 = $206;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$2 = $70;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $213 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $213$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $204$hi;
    i64toi32_i32$3 = $213$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    __multf3($203 | 0, $204 | 0, i64toi32_i32$1 | 0, $213 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$3 = $9;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $219 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $219$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7 | $10 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219;
   i64toi32_i32$2 = $224$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $5 + 128 | 0;
 }
 
 function fabsl($0, $1, $1$hi, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function __floatscan($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9 = 0, $5 = 0, $5$hi = 0, $4 = 0, $10 = 0, $11 = 0, $11$hi = 0, $8 = 0, $6 = 0, $7 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  i64toi32_i32$0 = 0;
  $5 = 0;
  $5$hi = i64toi32_i32$0;
  block14 : {
   block : {
    if ($2 >>> 0 > 2 >>> 0) {
     break block
    }
    $2 = $2 << 2 | 0;
    $6 = HEAP32[($2 + 76700 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 76688 | 0) >> 2] | 0;
    label : while (1) {
     block2 : {
      block1 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block1
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break block2;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (__isspace($2 | 0) | 0) {
      continue label
     }
     break label;
    };
    $8 = 1;
    block4 : {
     block3 : {
      switch ($2 + -43 | 0 | 0) {
      case 0:
      case 2:
       break block3;
      default:
       break block4;
      };
     }
     $8 = ($2 | 0) == (45 | 0) ? -1 : 1;
     block5 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break block5
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break block4;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $9 = 0;
    block11 : {
     block7 : {
      block6 : {
       if (($2 & -33 | 0 | 0) != (73 | 0)) {
        break block6
       }
       label1 : while (1) {
        if (($9 | 0) == (7 | 0)) {
         break block7
        }
        block9 : {
         block8 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break block8
          }
          HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break block9;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $9 + 69889 | 0;
        $9 = $9 + 1 | 0;
        if (($2 | 32 | 0 | 0) == (HEAP8[$10 >> 0] | 0 | 0)) {
         continue label1
        }
        break label1;
       };
      }
      block10 : {
       if (($9 | 0) == (3 | 0)) {
        break block10
       }
       if (($9 | 0) == (8 | 0)) {
        break block7
       }
       if (!$3) {
        break block11
       }
       if ($9 >>> 0 < 4 >>> 0) {
        break block11
       }
       if (($9 | 0) == (8 | 0)) {
        break block7
       }
      }
      block12 : {
       i64toi32_i32$2 = $1;
       i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
       $5 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19 = 0
         } else {
          $19 = 1
         }
         $20 = $19;
        } else {
         $20 = 0
        }
        $18 = $20;
       }
       if ($18) {
        break block12
       }
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$3) {
       break block7
      }
      if ($9 >>> 0 < 4 >>> 0) {
       break block7
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $21 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22 = 0
        } else {
         $22 = 1
        }
        $23 = $22;
       } else {
        $23 = 0
       }
       $21 = $23;
      }
      $2 = $21;
      label2 : while (1) {
       block13 : {
        if ($2) {
         break block13
        }
        HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       $9 = $9 + -1 | 0;
       if ($9 >>> 0 > 3 >>> 0) {
        continue label2
       }
       break label2;
      };
     }
     __extendsftf2($4 | 0, Math_fround(Math_fround(Math_fround($8 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     $11 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $5 = i64toi32_i32$2;
     $5$hi = i64toi32_i32$3;
     break block14;
    }
    block32 : {
     block19 : {
      block33 : {
       block20 : {
        block16 : {
         block15 : {
          if ($9) {
           break block15
          }
          $9 = 0;
          if (($2 & -33 | 0 | 0) != (78 | 0)) {
           break block15
          }
          label3 : while (1) {
           if (($9 | 0) == (2 | 0)) {
            break block16
           }
           block18 : {
            block17 : {
             $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
             if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
              break block17
             }
             HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
             $2 = HEAPU8[$2 >> 0] | 0;
             break block18;
            }
            $2 = __shgetc($1 | 0) | 0;
           }
           $10 = $9 + 70339 | 0;
           $9 = $9 + 1 | 0;
           if (($2 | 32 | 0 | 0) == (HEAP8[$10 >> 0] | 0 | 0)) {
            continue label3
           }
           break label3;
          };
         }
         switch ($9 | 0) {
         case 3:
          break block16;
         case 0:
          break block19;
         default:
          break block20;
         };
        }
        block22 : {
         block21 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break block22;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        block24 : {
         block23 : {
          if (($2 | 0) != (40 | 0)) {
           break block23
          }
          $9 = 1;
          break block24;
         }
         i64toi32_i32$3 = 0;
         $5 = 0;
         $5$hi = i64toi32_i32$3;
         i64toi32_i32$3 = 2147450880;
         $11 = 0;
         $11$hi = i64toi32_i32$3;
         i64toi32_i32$0 = $1;
         i64toi32_i32$3 = HEAP32[($1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $24 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $25 = 0
           } else {
            $25 = 1
           }
           $26 = $25;
          } else {
           $26 = 0
          }
          $24 = $26;
         }
         if ($24) {
          break block14
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         break block14;
        }
        label4 : while (1) {
         block26 : {
          block25 : {
           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break block25
           }
           HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
           $2 = HEAPU8[$2 >> 0] | 0;
           break block26;
          }
          $2 = __shgetc($1 | 0) | 0;
         }
         $10 = $2 + -65 | 0;
         block28 : {
          block27 : {
           if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
            break block27
           }
           if ($10 >>> 0 < 26 >>> 0) {
            break block27
           }
           $10 = $2 + -97 | 0;
           if (($2 | 0) == (95 | 0)) {
            break block27
           }
           if ($10 >>> 0 >= 26 >>> 0) {
            break block28
           }
          }
          $9 = $9 + 1 | 0;
          continue label4;
         }
         break label4;
        };
        i64toi32_i32$0 = 2147450880;
        $11 = 0;
        $11$hi = i64toi32_i32$0;
        if (($2 | 0) == (41 | 0)) {
         break block14
        }
        block29 : {
         i64toi32_i32$1 = $1;
         i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1 + 116 | 0) >> 2] | 0;
         $5 = i64toi32_i32$0;
         $5$hi = i64toi32_i32$2;
         i64toi32_i32$1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
          $27 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $28 = 0
           } else {
            $28 = 1
           }
           $29 = $28;
          } else {
           $29 = 0
          }
          $27 = $29;
         }
         if ($27) {
          break block29
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        block31 : {
         block30 : {
          if (!$3) {
           break block30
          }
          if ($9) {
           break block31
          }
          break block32;
         }
         (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         i64toi32_i32$1 = 0;
         $5 = 0;
         $5$hi = i64toi32_i32$1;
         break block33;
        }
        label5 : while (1) {
         block34 : {
          i64toi32_i32$1 = $5$hi;
          i64toi32_i32$3 = $5;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
           $30 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
             $31 = 0
            } else {
             $31 = 1
            }
            $32 = $31;
           } else {
            $32 = 0
           }
           $30 = $32;
          }
          if ($30) {
           break block34
          }
          HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $9 = $9 + -1 | 0;
         if (!$9) {
          break block32
         }
         continue label5;
        };
       }
       i64toi32_i32$3 = 0;
       $5 = 0;
       $5$hi = i64toi32_i32$3;
       block35 : {
        i64toi32_i32$0 = $1;
        i64toi32_i32$3 = HEAP32[($1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
         $33 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
           $34 = 0
          } else {
           $34 = 1
          }
          $35 = $34;
         } else {
          $35 = 0
         }
         $33 = $35;
        }
        if ($33) {
         break block35
        }
        HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      i64toi32_i32$0 = $5$hi;
      __shlim($1 | 0, $5 | 0, i64toi32_i32$0 | 0);
      break block;
     }
     block36 : {
      if (($2 | 0) != (48 | 0)) {
       break block36
      }
      block38 : {
       block37 : {
        $9 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        if (($9 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
         break block37
        }
        HEAP32[($1 + 4 | 0) >> 2] = $9 + 1 | 0;
        $9 = HEAPU8[$9 >> 0] | 0;
        break block38;
       }
       $9 = __shgetc($1 | 0) | 0;
      }
      block39 : {
       if (($9 & -33 | 0 | 0) != (88 | 0)) {
        break block39
       }
       hexfloat($4 + 16 | 0 | 0, $1 | 0, $7 | 0, $6 | 0, $8 | 0, $3 | 0);
       i64toi32_i32$2 = $4;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $11 = i64toi32_i32$0;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $5 = i64toi32_i32$1;
       $5$hi = i64toi32_i32$0;
       break block14;
      }
      i64toi32_i32$2 = $1;
      i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
       $36 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $37 = 0
        } else {
         $37 = 1
        }
        $38 = $37;
       } else {
        $38 = 0
       }
       $36 = $38;
      }
      if ($36) {
       break block36
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     decfloat($4 + 32 | 0 | 0, $1 | 0, $2 | 0, $7 | 0, $6 | 0, $8 | 0, $3 | 0);
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
     $11 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $5 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$2;
     break block14;
    }
    i64toi32_i32$2 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$2;
    break block14;
   }
   i64toi32_i32$2 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $4 + 48 | 0;
 }
 
 function __isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $7 = 0, $6 = 0, $13$hi = 0, $17$hi = 0, $11$hi = 0, $13 = 0, $17 = 0, $14$hi = 0, $11 = 0, $9$hi = 0, $14 = 0, $15$hi = 0, $9 = 0, $12 = 0, $15 = 0, $8 = 0, $10 = 0, $20$hi = 0, $18 = 0, $20 = 0, $16 = 0, $19 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $140 = 0, $126 = 0, $126$hi = 0, $128 = 0, $128$hi = 0, $137 = 0, $137$hi = 0, $139 = 0, $139$hi = 0, $156 = 0, $156$hi = 0, $158 = 0, $158$hi = 0, $204 = 0, $204$hi = 0, $208 = 0, $208$hi = 0, $249 = 0, $249$hi = 0, $253 = 0, $253$hi = 0, $264$hi = 0, $271$hi = 0, $280 = 0, $280$hi = 0, $282 = 0, $282$hi = 0, $286 = 0, $286$hi = 0, $288 = 0, $288$hi = 0, $296 = 0, $296$hi = 0, $312$hi = 0, $141 = 0, $317 = 0, $317$hi = 0, $319$hi = 0, $142 = 0, $322 = 0, $322$hi = 0, $339$hi = 0, $346 = 0, $347 = 0, $350$hi = 0, $373 = 0, $373$hi = 0, $375 = 0, $375$hi = 0, $407 = 0, $407$hi = 0, $409 = 0, $409$hi = 0, $413 = 0, $413$hi = 0, $415 = 0, $415$hi = 0, $424 = 0, $424$hi = 0, $427 = 0, $427$hi = 0, $431 = 0, $431$hi = 0, $433 = 0, $433$hi = 0, $435 = 0, $435$hi = 0, $437 = 0, $437$hi = 0, $441 = 0, $441$hi = 0, $443 = 0, $443$hi = 0, $471 = 0, $471$hi = 0, $473 = 0, $473$hi = 0, $477 = 0, $477$hi = 0, $479 = 0, $479$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 432 | 0;
  __stack_pointer = $6;
  block1 : {
   block : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
    $7 = HEAPU8[$7 >> 0] | 0;
    break block1;
   }
   $7 = __shgetc($1 | 0) | 0;
  }
  $8 = 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  $9$hi = i64toi32_i32$0;
  $10 = 0;
  block3 : {
   block5 : {
    block4 : {
     label : while (1) {
      block2 : {
       if (($7 | 0) == (48 | 0)) {
        break block2
       }
       if (($7 | 0) != (46 | 0)) {
        break block3
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       break block5;
      }
      block6 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       $10 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label;
      }
      $10 = 1;
      $7 = __shgetc($1 | 0) | 0;
      continue label;
     };
    }
    $7 = __shgetc($1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $9 = 0;
   $9$hi = i64toi32_i32$0;
   block7 : {
    if (($7 | 0) == (48 | 0)) {
     break block7
    }
    $8 = 1;
    break block3;
   }
   label1 : while (1) {
    block9 : {
     block8 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break block8
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      break block9;
     }
     $7 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($7 | 0) == (48 | 0)) {
     continue label1
    }
    break label1;
   };
   $8 = 1;
   $10 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $11 = 0;
  $11$hi = i64toi32_i32$5;
  $12 = 0;
  i64toi32_i32$5 = 0;
  $13 = 0;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $14 = 0;
  $14$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $15 = 0;
  $15$hi = i64toi32_i32$5;
  $16 = 0;
  i64toi32_i32$5 = 0;
  $17 = 0;
  $17$hi = i64toi32_i32$5;
  block12 : {
   label2 : while (1) {
    $18 = $7;
    block13 : {
     block10 : {
      $19 = $7 + -48 | 0;
      if ($19 >>> 0 < 10 >>> 0) {
       break block10
      }
      $18 = $7 | 32 | 0;
      block11 : {
       if (($7 | 0) == (46 | 0)) {
        break block11
       }
       if (($18 + -97 | 0) >>> 0 > 5 >>> 0) {
        break block12
       }
      }
      if (($7 | 0) != (46 | 0)) {
       break block10
      }
      if ($8) {
       break block12
      }
      $8 = 1;
      i64toi32_i32$5 = $17$hi;
      $9 = $17;
      $9$hi = i64toi32_i32$5;
      break block13;
     }
     $7 = ($7 | 0) > (57 | 0) ? $18 + -87 | 0 : $19;
     block15 : {
      block14 : {
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$0 = $17;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $112 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $113 = 0
         } else {
          $113 = 1
         }
         $114 = $113;
        } else {
         $114 = 0
        }
        $112 = $114;
       }
       if ($112) {
        break block14
       }
       $12 = $7 + ($12 << 4 | 0) | 0;
       break block15;
      }
      block16 : {
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$3 = $17;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block16
       }
       __floatsitf($6 + 48 | 0 | 0, $7 | 0);
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       __multf3($6 + 32 | 0 | 0, $15 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $126 = i64toi32_i32$5;
       $126$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
       $128 = i64toi32_i32$2;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $15 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
       $11 = i64toi32_i32$2;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $126$hi;
       i64toi32_i32$2 = $128$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$3 = $11$hi;
       __multf3($6 + 16 | 0 | 0, $126 | 0, i64toi32_i32$5 | 0, $128 | 0, i64toi32_i32$2 | 0, $15 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $137 = i64toi32_i32$3;
       $137$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $139 = i64toi32_i32$0;
       $139$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $14$hi;
       i64toi32_i32$3 = $137$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$5 = $14$hi;
       __addtf3($6 | 0, $137 | 0, i64toi32_i32$3 | 0, $139 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
       $14 = i64toi32_i32$5;
       $14$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $13 = i64toi32_i32$2;
       $13$hi = i64toi32_i32$5;
       break block15;
      }
      if (!$7) {
       break block15
      }
      if ($16) {
       break block15
      }
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      __multf3($6 + 80 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $156 = i64toi32_i32$3;
      $156$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
      $158 = i64toi32_i32$0;
      $158$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $156$hi;
      i64toi32_i32$0 = $158$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$5 = $14$hi;
      __addtf3($6 + 64 | 0 | 0, $156 | 0, i64toi32_i32$3 | 0, $158 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0);
      $16 = 1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
      $14 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     $10 = 1;
    }
    block17 : {
     $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
      break block17
     }
     HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
     $7 = HEAPU8[$7 >> 0] | 0;
     continue label2;
    }
    $7 = __shgetc($1 | 0) | 0;
    continue label2;
   };
  }
  block22 : {
   block18 : {
    if ($10) {
     break block18
    }
    block21 : {
     block20 : {
      block19 : {
       i64toi32_i32$5 = $1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $115 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $116 = 0
         } else {
          $116 = 1
         }
         $117 = $116;
        } else {
         $117 = 0
        }
        $115 = $117;
       }
       if ($115) {
        break block19
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -1 | 0;
       if (!$5) {
        break block20
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -2 | 0;
       if (!$8) {
        break block21
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -3 | 0;
       break block21;
      }
      if ($5) {
       break block21
      }
     }
     i64toi32_i32$5 = 0;
     __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $204 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $204$hi = i64toi32_i32$0;
    wasm2js_scratch_store_f64(+(+($4 | 0)));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $208 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $208$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $204$hi;
    i64toi32_i32$0 = $204;
    i64toi32_i32$5 = $208$hi;
    i64toi32_i32$4 = $208;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    __extenddftf2($6 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$3 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $13 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$5;
    break block22;
   }
   block23 : {
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$3 = $17;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $118 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $119 = 0
      } else {
       $119 = 1
      }
      $120 = $119;
     } else {
      $120 = 0
     }
     $118 = $120;
    }
    if ($118) {
     break block23
    }
    i64toi32_i32$3 = $17$hi;
    $11 = $17;
    $11$hi = i64toi32_i32$3;
    label3 : while (1) {
     $12 = $12 << 4 | 0;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$4 = $11;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $11 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label3
     }
     break label3;
    };
   }
   block25 : {
    block28 : {
     block27 : {
      block24 : {
       if (($7 & -33 | 0 | 0) != (80 | 0)) {
        break block24
       }
       i64toi32_i32$3 = scanexp($1 | 0, $5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break block25
       }
       block26 : {
        if (!$5) {
         break block26
        }
        i64toi32_i32$4 = $1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $121 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $122 = 0
          } else {
           $122 = 1
          }
          $123 = $122;
         } else {
          $123 = 0
         }
         $121 = $123;
        }
        if ($121) {
         break block27
        }
        break block28;
       }
       i64toi32_i32$4 = 0;
       $13 = 0;
       $13$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       __shlim($1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $17 = 0;
       $17$hi = i64toi32_i32$4;
       break block22;
      }
      i64toi32_i32$4 = 0;
      $11 = 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $124 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $125 = 0
        } else {
         $125 = 1
        }
        $127 = $125;
       } else {
        $127 = 0
       }
       $124 = $127;
      }
      if ($124) {
       break block25
      }
     }
     HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$3;
   }
   block29 : {
    if ($12) {
     break block29
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $249 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $249$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+(+($4 | 0)));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $253 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $253$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $249$hi;
    i64toi32_i32$1 = $249;
    i64toi32_i32$3 = $253$hi;
    i64toi32_i32$4 = $253;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    __extenddftf2($6 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$0 = $6;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
    $17 = i64toi32_i32$3;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $13 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$3;
    break block22;
   }
   block30 : {
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$5 = $8;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $9 : $17;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $129 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $129 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $264$hi;
    i64toi32_i32$0 = $129;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$3 = $11;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $271$hi;
    i64toi32_i32$3 = 0 - $3 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $130 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $131 = 0
      } else {
       $131 = 1
      }
      $132 = $131;
     } else {
      $132 = 0
     }
     $130 = $132;
    }
    if ($130) {
     break block30
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($6 + 160 | 0 | 0, $4 | 0);
    i64toi32_i32$3 = $6;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $280 = i64toi32_i32$2;
    $280$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] | 0;
    $282 = i64toi32_i32$1;
    $282$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $280$hi;
    i64toi32_i32$1 = $282$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    __multf3($6 + 144 | 0 | 0, $280 | 0, i64toi32_i32$2 | 0, $282 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $286 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
    $288 = i64toi32_i32$3;
    $288$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$3 = $288$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($6 + 128 | 0 | 0, $286 | 0, i64toi32_i32$4 | 0, $288 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $6;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] | 0;
    $17 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $13 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$2;
    break block22;
   }
   block31 : {
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$1 = $3 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $296 = i64toi32_i32$1;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$3 = $17;
    i64toi32_i32$1 = $296$hi;
    i64toi32_i32$4 = $296;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $133 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $134 = 0
      } else {
       $134 = 1
      }
      $135 = $134;
     } else {
      $135 = 0
     }
     $133 = $135;
    }
    if ($133) {
     break block31
    }
    block32 : {
     if (($12 | 0) <= (-1 | 0)) {
      break block32
     }
     label4 : while (1) {
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      __addtf3($6 + 416 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7 = __getf2($13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      $7 = ($7 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7;
      i64toi32_i32$2 = $312$hi;
      $141 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0 ? $141 : $13;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $317 = i64toi32_i32$1;
      $317$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 424 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 428 | 0) >> 2] | 0;
      $319$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$3 = $7;
      i64toi32_i32$1 = $319$hi;
      $142 = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $142 : $14;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $322 = i64toi32_i32$2;
      $322$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $317$hi;
      i64toi32_i32$1 = $322$hi;
      __addtf3($6 + 400 | 0 | 0, $13 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$4 | 0, $317 | 0, i64toi32_i32$3 | 0, $322 | 0, i64toi32_i32$1 | 0);
      $1 = $12 << 1 | 0;
      $12 = $1 | $7 | 0;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$2 = $17;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $17 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 412 | 0) >> 2] | 0;
      $14 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$5;
      if (($1 | 0) > (-1 | 0)) {
       continue label4
      }
      break label4;
     };
    }
    block34 : {
     block33 : {
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = 0;
      $339$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $17;
      i64toi32_i32$2 = $339$hi;
      i64toi32_i32$0 = 32 - $3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $9 = i64toi32_i32$3;
      $9$hi = i64toi32_i32$4;
      $7 = i64toi32_i32$3;
      $346 = (i64toi32_i32$3 | 0) > (0 | 0) ? i64toi32_i32$3 : 0;
      $347 = $2;
      i64toi32_i32$4 = 0;
      $350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = $350$hi;
      i64toi32_i32$0 = $2;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
       $136 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $138 = 0
        } else {
         $138 = 1
        }
        $140 = $138;
       } else {
        $140 = 0
       }
       $136 = $140;
      }
      $7 = $136 ? $346 : $347;
      if ($7 >>> 0 < 113 >>> 0) {
       break block33
      }
      __floatsitf($6 + 384 | 0 | 0, $4 | 0);
      i64toi32_i32$5 = 0;
      $9 = 0;
      $9$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 392 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 396 | 0) >> 2] | 0;
      $11 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $15 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $20 = 0;
      $20$hi = i64toi32_i32$5;
      break block34;
     }
     __extenddftf2($6 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
     __floatsitf($6 + 336 | 0 | 0, $4 | 0);
     i64toi32_i32$0 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $373 = i64toi32_i32$5;
     $373$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 360 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 364 | 0) >> 2] | 0;
     $375 = i64toi32_i32$4;
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $15 = i64toi32_i32$5;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 348 | 0) >> 2] | 0;
     $11 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$4 = $375$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = $11$hi;
     copysignl($6 + 368 | 0 | 0, $373 | 0, i64toi32_i32$5 | 0, $375 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 376 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 380 | 0) >> 2] | 0;
     $20 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
     $9 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $7 = !($12 & 1 | 0) & ($7 >>> 0 < 32 >>> 0 & (__letf2($13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    __floatunsitf($6 + 320 | 0 | 0, $12 | $7 | 0 | 0);
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $407 = i64toi32_i32$5;
    $407$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 328 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 332 | 0) >> 2] | 0;
    $409 = i64toi32_i32$4;
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$0 = $407$hi;
    i64toi32_i32$1 = $409$hi;
    __multf3($6 + 304 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$4 | 0, $407 | 0, i64toi32_i32$0 | 0, $409 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = $6;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $413 = i64toi32_i32$1;
    $413$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 312 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 316 | 0) >> 2] | 0;
    $415 = i64toi32_i32$0;
    $415$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $413$hi;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$5 = $20$hi;
    __addtf3($6 + 272 | 0 | 0, $413 | 0, i64toi32_i32$1 | 0, $415 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $13;
    i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $424 = i64toi32_i32$1;
    $424$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $14;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $427 = i64toi32_i32$5;
    $427$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $424$hi;
    i64toi32_i32$0 = $427$hi;
    __multf3($6 + 288 | 0 | 0, $15 | 0, i64toi32_i32$2 | 0, $11 | 0, i64toi32_i32$5 | 0, $424 | 0, i64toi32_i32$4 | 0, $427 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $6;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
    $431 = i64toi32_i32$0;
    $431$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
    $433 = i64toi32_i32$4;
    $433$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
    $435 = i64toi32_i32$0;
    $435$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 280 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 284 | 0) >> 2] | 0;
    $437 = i64toi32_i32$4;
    $437$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $431$hi;
    i64toi32_i32$4 = $433$hi;
    i64toi32_i32$5 = $435$hi;
    i64toi32_i32$2 = $437$hi;
    __addtf3($6 + 256 | 0 | 0, $431 | 0, i64toi32_i32$0 | 0, $433 | 0, i64toi32_i32$4 | 0, $435 | 0, i64toi32_i32$5 | 0, $437 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $6;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $441 = i64toi32_i32$2;
    $441$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
    $443 = i64toi32_i32$5;
    $443$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $441$hi;
    i64toi32_i32$5 = $443$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$0 = $20$hi;
    __subtf3($6 + 240 | 0 | 0, $441 | 0, i64toi32_i32$2 | 0, $443 | 0, i64toi32_i32$5 | 0, $9 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$0 | 0);
    block35 : {
     i64toi32_i32$5 = $6;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $13 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 248 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 252 | 0) >> 2] | 0;
     $14 = i64toi32_i32$4;
     $14$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if (__letf2($13 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
      break block35
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$5 = $14$hi;
    scalbnl($6 + 224 | 0 | 0, $13 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0, $17 | 0);
    i64toi32_i32$4 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 232 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 236 | 0) >> 2] | 0;
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $13 = i64toi32_i32$2;
    $13$hi = i64toi32_i32$5;
    break block22;
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($6 + 208 | 0 | 0, $4 | 0);
   i64toi32_i32$4 = $6;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $471 = i64toi32_i32$5;
   $471$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
   $473 = i64toi32_i32$2;
   $473$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $471$hi;
   i64toi32_i32$2 = $473$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 65536;
   __multf3($6 + 192 | 0 | 0, $471 | 0, i64toi32_i32$5 | 0, $473 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $477 = i64toi32_i32$0;
   $477$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] | 0;
   $479 = i64toi32_i32$4;
   $479$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $477$hi;
   i64toi32_i32$4 = $479$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 65536;
   __multf3($6 + 176 | 0 | 0, $477 | 0, i64toi32_i32$0 | 0, $479 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$4 = $6;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 184 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 188 | 0) >> 2] | 0;
   $17 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $13 = i64toi32_i32$2;
   $13$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $13;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $17$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $6 + 432 | 0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7 = 0, i64toi32_i32$2 = 0, $11$hi = 0, $11 = 0, $15 = 0, $16$hi = 0, $14 = 0, $16 = 0, i64toi32_i32$0 = 0, $12 = 0, $17 = 0, $18 = 0, $21$hi = 0, $19$hi = 0, $8 = 0, $13 = 0, $21 = 0, $19 = 0, $9 = 0, $22$hi = 0, $23$hi = 0, $22 = 0, $23 = 0, $10 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $24 = 0.0, $125 = 0, $205 = 0, $205$hi = 0, $209 = 0, $209$hi = 0, $235 = 0, $235$hi = 0, $237 = 0, $237$hi = 0, $239 = 0, $239$hi = 0, $241 = 0, $241$hi = 0, $249$hi = 0, $258 = 0, $258$hi = 0, $260 = 0, $260$hi = 0, $264 = 0, $264$hi = 0, $266 = 0, $266$hi = 0, $274 = 0, $274$hi = 0, $283 = 0, $283$hi = 0, $285 = 0, $285$hi = 0, $289 = 0, $289$hi = 0, $291 = 0, $291$hi = 0, $338 = 0, $338$hi = 0, $340 = 0, $340$hi = 0, $342 = 0, $342$hi = 0, $344 = 0, $344$hi = 0, $361 = 0, $361$hi = 0, $363 = 0, $363$hi = 0, $365 = 0, $365$hi = 0, $367 = 0, $367$hi = 0, $378 = 0, $378$hi = 0, $380 = 0, $380$hi = 0, $382 = 0, $382$hi = 0, $384 = 0, $384$hi = 0, $410 = 0, $410$hi = 0, $412 = 0, $412$hi = 0, $414 = 0, $414$hi = 0, $416 = 0, $416$hi = 0, $426 = 0, $426$hi = 0, $428 = 0, $428$hi = 0, $430 = 0, $430$hi = 0, $432 = 0, $432$hi = 0, $451 = 0, $452 = 0, $469 = 0, $547$hi = 0, $549$hi = 0, $557 = 0, $557$hi = 0, $698 = 0, $698$hi = 0, $700 = 0, $700$hi = 0, $702 = 0, $702$hi = 0, $704 = 0, $704$hi = 0, $721 = 0, $721$hi = 0, $723 = 0, $723$hi = 0, $763 = 0, $824 = 0, $824$hi = 0, $826 = 0, $826$hi = 0, $843 = 0, $843$hi = 0, $845 = 0, $845$hi = 0, $861 = 0, $861$hi = 0, $863 = 0, $863$hi = 0, $898 = 0, $898$hi = 0, $900 = 0, $900$hi = 0, $917 = 0, $917$hi = 0, $919 = 0, $919$hi = 0, $940 = 0, $940$hi = 0, $942 = 0, $942$hi = 0, $956 = 0, $956$hi = 0, $958 = 0, $958$hi = 0, $970 = 0, $970$hi = 0, $972 = 0, $972$hi = 0, $991 = 0, $991$hi = 0, $993 = 0, $993$hi = 0, $1014 = 0, $1014$hi = 0, $1016 = 0, $1016$hi = 0, $1019$hi = 0, $196 = 0, $1026$hi = 0, $197 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 8976 | 0;
  __stack_pointer = $7;
  $8 = 0;
  $9 = 0 - $4 | 0;
  $10 = $9 - $3 | 0;
  i64toi32_i32$0 = 0;
  $11 = 0;
  $11$hi = i64toi32_i32$0;
  $12 = 0;
  block1 : {
   block3 : {
    block2 : {
     label : while (1) {
      block : {
       if (($2 | 0) == (48 | 0)) {
        break block
       }
       if (($2 | 0) != (46 | 0)) {
        break block1
       }
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break block3;
      }
      block4 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       $12 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       continue label;
      }
      $12 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
   block5 : {
    if (($2 | 0) != (48 | 0)) {
     break block5
    }
    label1 : while (1) {
     block7 : {
      block6 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break block7;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $11$hi + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$5;
     if (($2 | 0) == (48 | 0)) {
      continue label1
     }
     break label1;
    };
    $12 = 1;
   }
   $8 = 1;
  }
  $13 = 0;
  HEAP32[($7 + 784 | 0) >> 2] = 0;
  $14 = $2 + -48 | 0;
  block23 : {
   block21 : {
    block20 : {
     block22 : {
      block13 : {
       block9 : {
        block8 : {
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          break block8
         }
         i64toi32_i32$5 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$5;
         if ($14 >>> 0 <= 9 >>> 0) {
          break block8
         }
         $17 = 0;
         $18 = 0;
         break block9;
        }
        i64toi32_i32$5 = 0;
        $16 = 0;
        $16$hi = i64toi32_i32$5;
        $18 = 0;
        $17 = 0;
        $13 = 0;
        label2 : while (1) {
         block12 : {
          block10 : {
           if (!($15 & 1 | 0)) {
            break block10
           }
           block11 : {
            if ($8) {
             break block11
            }
            i64toi32_i32$5 = $16$hi;
            $11 = $16;
            $11$hi = i64toi32_i32$5;
            $8 = 1;
            break block12;
           }
           $15 = !$12;
           break block13;
          }
          i64toi32_i32$5 = $16$hi;
          i64toi32_i32$0 = $16;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $16 = i64toi32_i32$1;
          $16$hi = i64toi32_i32$4;
          block14 : {
           if (($17 | 0) > (2044 | 0)) {
            break block14
           }
           $12 = i64toi32_i32$1;
           $15 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
           block15 : {
            if (!$18) {
             break block15
            }
            $14 = ($2 + Math_imul(HEAP32[$15 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13 = ($2 | 0) == (48 | 0) ? $13 : $12;
           HEAP32[$15 >> 2] = $14;
           $12 = 1;
           $2 = $18 + 1 | 0;
           $125 = $2;
           $2 = ($2 | 0) == (9 | 0);
           $18 = $2 ? 0 : $125;
           $17 = $17 + $2 | 0;
           break block12;
          }
          if (($2 | 0) == (48 | 0)) {
           break block12
          }
          HEAP32[($7 + 8960 | 0) >> 2] = HEAP32[($7 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $13 = 18396;
         }
         block17 : {
          block16 : {
           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break block16
           }
           HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
           $2 = HEAPU8[$2 >> 0] | 0;
           break block17;
          }
          $2 = __shgetc($1 | 0) | 0;
         }
         $14 = $2 + -48 | 0;
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          continue label2
         }
         if ($14 >>> 0 < 10 >>> 0) {
          continue label2
         }
         break label2;
        };
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $11 : $16;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$5;
       block18 : {
        if (!$12) {
         break block18
        }
        if (($2 & -33 | 0 | 0) != (69 | 0)) {
         break block18
        }
        block19 : {
         i64toi32_i32$5 = scanexp($1 | 0, $6 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $19 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break block19
         }
         if (!$6) {
          break block20
         }
         i64toi32_i32$2 = 0;
         $19 = 0;
         $19$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $171 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $172 = 0
           } else {
            $172 = 1
           }
           $173 = $172;
          } else {
           $173 = 0
          }
          $171 = $173;
         }
         if ($171) {
          break block19
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$5 = $19;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$2 = $11;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $11 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        break block21;
       }
       $15 = !$12;
       if (($2 | 0) < (0 | 0)) {
        break block22
       }
      }
      i64toi32_i32$4 = $1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $174 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $175 = 0
        } else {
         $175 = 1
        }
        $176 = $175;
       } else {
        $176 = 0
       }
       $174 = $176;
      }
      if ($174) {
       break block22
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$15) {
      break block21
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$4 = 0;
    $16 = 0;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$4;
    break block23;
   }
   block24 : {
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    if ($1) {
     break block24
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $205 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $205$hi = i64toi32_i32$5;
    wasm2js_scratch_store_f64(+(+($5 | 0)));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $209 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $209$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $205$hi;
    i64toi32_i32$5 = $205;
    i64toi32_i32$4 = $209$hi;
    i64toi32_i32$1 = $209;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    __extenddftf2($7 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 12 | 0) >> 2] | 0;
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$4;
    break block23;
   }
   block25 : {
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$2 = $16;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $177 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $178 = 0
      } else {
       $178 = 1
      }
      $179 = $178;
     } else {
      $179 = 0
     }
     $177 = $179;
    }
    if ($177) {
     break block25
    }
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$5 = $16;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break block25
    }
    block26 : {
     if ($3 >>> 0 > 30 >>> 0) {
      break block26
     }
     if ($1 >>> $3 | 0) {
      break block25
     }
    }
    __floatsitf($7 + 48 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 32 | 0 | 0, $1 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $235 = i64toi32_i32$1;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
    $237 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $239 = i64toi32_i32$1;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
    $241 = i64toi32_i32$2;
    $241$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$5 = $239$hi;
    i64toi32_i32$4 = $241$hi;
    __multf3($7 + 16 | 0 | 0, $235 | 0, i64toi32_i32$1 | 0, $237 | 0, i64toi32_i32$2 | 0, $239 | 0, i64toi32_i32$5 | 0, $241 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 24 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$4;
    break block23;
   }
   block27 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = 0;
    $249$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$5 = $249$hi;
    i64toi32_i32$1 = $9 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $180 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $181 = 0
      } else {
       $181 = 1
      }
      $182 = $181;
     } else {
      $182 = 0
     }
     $180 = $182;
    }
    if ($180) {
     break block27
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 96 | 0 | 0, $5 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $258 = i64toi32_i32$2;
    $258$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] | 0;
    $260 = i64toi32_i32$4;
    $260$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $258$hi;
    i64toi32_i32$4 = $260$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    __multf3($7 + 80 | 0 | 0, $258 | 0, i64toi32_i32$2 | 0, $260 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $264 = i64toi32_i32$5;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
    $266 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $264$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($7 + 64 | 0 | 0, $264 | 0, i64toi32_i32$5 | 0, $266 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $11 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$2;
    break block23;
   }
   block28 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $4 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $274 = i64toi32_i32$4;
    $274$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$4 = $274$hi;
    i64toi32_i32$5 = $274;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $183 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $184 = 0
      } else {
       $184 = 1
      }
      $185 = $184;
     } else {
      $185 = 0
     }
     $183 = $185;
    }
    if ($183) {
     break block28
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 144 | 0 | 0, $5 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $283 = i64toi32_i32$1;
    $283$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] | 0;
    $285 = i64toi32_i32$2;
    $285$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $283$hi;
    i64toi32_i32$2 = $285$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    __multf3($7 + 128 | 0 | 0, $283 | 0, i64toi32_i32$1 | 0, $285 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 132 | 0) >> 2] | 0;
    $289 = i64toi32_i32$4;
    $289$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 136 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 140 | 0) >> 2] | 0;
    $291 = i64toi32_i32$5;
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $289$hi;
    i64toi32_i32$5 = $291$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    __multf3($7 + 112 | 0 | 0, $289 | 0, i64toi32_i32$4 | 0, $291 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 120 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 124 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $16 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$1;
    break block23;
   }
   block29 : {
    if (!$18) {
     break block29
    }
    block30 : {
     if (($18 | 0) > (8 | 0)) {
      break block30
     }
     $2 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
     $1 = HEAP32[$2 >> 2] | 0;
     label3 : while (1) {
      $1 = Math_imul($1, 10);
      $18 = $18 + 1 | 0;
      if (($18 | 0) != (9 | 0)) {
       continue label3
      }
      break label3;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $17 = $17 + 1 | 0;
   }
   i64toi32_i32$1 = $11$hi;
   $18 = $11;
   block31 : {
    if (($13 | 0) >= (9 | 0)) {
     break block31
    }
    i64toi32_i32$5 = $11;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 17;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $186 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $187 = 0
      } else {
       $187 = 1
      }
      $188 = $187;
     } else {
      $188 = 0
     }
     $186 = $188;
    }
    if ($186) {
     break block31
    }
    if (($13 | 0) > ($18 | 0)) {
     break block31
    }
    block32 : {
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$4 = $11;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 9;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block32
     }
     __floatsitf($7 + 192 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 176 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 192 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 196 | 0) >> 2] | 0;
     $338 = i64toi32_i32$4;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 200 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 204 | 0) >> 2] | 0;
     $340 = i64toi32_i32$5;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 180 | 0) >> 2] | 0;
     $342 = i64toi32_i32$4;
     $342$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 184 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 188 | 0) >> 2] | 0;
     $344 = i64toi32_i32$5;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $338$hi;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$2 = $342$hi;
     i64toi32_i32$1 = $344$hi;
     __multf3($7 + 160 | 0 | 0, $338 | 0, i64toi32_i32$4 | 0, $340 | 0, i64toi32_i32$5 | 0, $342 | 0, i64toi32_i32$2 | 0, $344 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] | 0;
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     break block23;
    }
    block33 : {
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $11;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 8;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $189 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $190 = 0
       } else {
        $190 = 1
       }
       $191 = $190;
      } else {
       $191 = 0
      }
      $189 = $191;
     }
     if ($189) {
      break block33
     }
     __floatsitf($7 + 272 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 256 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
     $361 = i64toi32_i32$5;
     $361$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 280 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 284 | 0) >> 2] | 0;
     $363 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
     $365 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
     $367 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$2 = $367$hi;
     __multf3($7 + 240 | 0 | 0, $361 | 0, i64toi32_i32$5 | 0, $363 | 0, i64toi32_i32$1 | 0, $365 | 0, i64toi32_i32$4 | 0, $367 | 0, i64toi32_i32$2 | 0);
     __floatsitf($7 + 224 | 0 | 0, HEAP32[(((8 - $18 | 0) << 2 | 0) + 76656 | 0) >> 2] | 0 | 0);
     i64toi32_i32$1 = $7;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
     $378 = i64toi32_i32$2;
     $378$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] | 0;
     $380 = i64toi32_i32$4;
     $380$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
     $382 = i64toi32_i32$2;
     $382$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 232 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] | 0;
     $384 = i64toi32_i32$4;
     $384$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $378$hi;
     i64toi32_i32$4 = $380$hi;
     i64toi32_i32$1 = $382$hi;
     i64toi32_i32$5 = $384$hi;
     __divtf3($7 + 208 | 0 | 0, $378 | 0, i64toi32_i32$2 | 0, $380 | 0, i64toi32_i32$4 | 0, $382 | 0, i64toi32_i32$1 | 0, $384 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
     $11 = i64toi32_i32$5;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break block23;
    }
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    block34 : {
     $2 = ($3 + Math_imul($18, -3) | 0) + 27 | 0;
     if (($2 | 0) > (30 | 0)) {
      break block34
     }
     if ($1 >>> $2 | 0) {
      break block31
     }
    }
    __floatsitf($7 + 352 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 336 | 0 | 0, $1 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 356 | 0) >> 2] | 0;
    $410 = i64toi32_i32$5;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 360 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 364 | 0) >> 2] | 0;
    $412 = i64toi32_i32$1;
    $412$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 336 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 340 | 0) >> 2] | 0;
    $414 = i64toi32_i32$5;
    $414$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 344 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 348 | 0) >> 2] | 0;
    $416 = i64toi32_i32$1;
    $416$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $410$hi;
    i64toi32_i32$1 = $412$hi;
    i64toi32_i32$4 = $414$hi;
    i64toi32_i32$2 = $416$hi;
    __multf3($7 + 320 | 0 | 0, $410 | 0, i64toi32_i32$5 | 0, $412 | 0, i64toi32_i32$1 | 0, $414 | 0, i64toi32_i32$4 | 0, $416 | 0, i64toi32_i32$2 | 0);
    __floatsitf($7 + 304 | 0 | 0, HEAP32[(($18 << 2 | 0) + 76616 | 0) >> 2] | 0 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
    $426 = i64toi32_i32$2;
    $426$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] | 0;
    $428 = i64toi32_i32$4;
    $428$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
    $430 = i64toi32_i32$2;
    $430$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] | 0;
    $432 = i64toi32_i32$4;
    $432$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $426$hi;
    i64toi32_i32$4 = $428$hi;
    i64toi32_i32$1 = $430$hi;
    i64toi32_i32$5 = $432$hi;
    __multf3($7 + 288 | 0 | 0, $426 | 0, i64toi32_i32$2 | 0, $428 | 0, i64toi32_i32$4 | 0, $430 | 0, i64toi32_i32$1 | 0, $432 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $16 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$5;
    break block23;
   }
   label4 : while (1) {
    $15 = $17;
    $17 = $15 + -1 | 0;
    if (!(HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0)) {
     continue label4
    }
    break label4;
   };
   $13 = 0;
   block36 : {
    block35 : {
     $1 = ($18 | 0) % (9 | 0) | 0;
     if ($1) {
      break block35
     }
     $14 = 0;
     break block36;
    }
    $451 = $1 + 9 | 0;
    $452 = $1;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
     $192 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $193 = 0
      } else {
       $193 = 1
      }
      $194 = $193;
     } else {
      $194 = 0
     }
     $192 = $194;
    }
    $9 = $192 ? $451 : $452;
    block38 : {
     block37 : {
      if ($15) {
       break block37
      }
      $14 = 0;
      $15 = 0;
      break block38;
     }
     $12 = HEAP32[(((8 - $9 | 0) << 2 | 0) + 76656 | 0) >> 2] | 0;
     $6 = (1e9 | 0) / ($12 | 0) | 0;
     $2 = 0;
     $1 = 0;
     $14 = 0;
     label5 : while (1) {
      $17 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
      $469 = $17;
      $17 = HEAP32[$17 >> 2] | 0;
      $8 = ($17 >>> 0) / ($12 >>> 0) | 0;
      $2 = $8 + $2 | 0;
      HEAP32[$469 >> 2] = $2;
      $2 = ($1 | 0) == ($14 | 0) & !$2 | 0;
      $14 = $2 ? ($14 + 1 | 0) & 2047 | 0 : $14;
      $18 = $2 ? $18 + -9 | 0 : $18;
      $2 = Math_imul($6, $17 - Math_imul($8, $12) | 0);
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($15 | 0)) {
       continue label5
      }
      break label5;
     };
     if (!$2) {
      break block38
     }
     HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] = $2;
     $15 = $15 + 1 | 0;
    }
    $18 = ($18 - $9 | 0) + 9 | 0;
   }
   label8 : while (1) {
    $9 = ($7 + 784 | 0) + ($14 << 2 | 0) | 0;
    $6 = ($18 | 0) < (36 | 0);
    block40 : {
     label7 : while (1) {
      block39 : {
       if ($6) {
        break block39
       }
       if (($18 | 0) != (36 | 0)) {
        break block40
       }
       if ((HEAP32[$9 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break block40
       }
      }
      $17 = $15 + 2047 | 0;
      $12 = 0;
      label6 : while (1) {
       $2 = $15;
       block42 : {
        block41 : {
         $1 = $17 & 2047 | 0;
         $15 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
         i64toi32_i32$2 = $15;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $195 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $195 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $547$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $549$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $547$hi;
         i64toi32_i32$5 = $195;
         i64toi32_i32$2 = $549$hi;
         i64toi32_i32$1 = $12;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $11 = i64toi32_i32$3;
         $11$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if ($11$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($11$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break block41
         }
         $12 = 0;
         break block42;
        }
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($11 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $16 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $557 = i64toi32_i32$0;
        $557$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$1 = $11;
        i64toi32_i32$0 = $557$hi;
        i64toi32_i32$5 = $557;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        $12 = $16;
       }
       i64toi32_i32$3 = $11$hi;
       HEAP32[$15 >> 2] = $11;
       $8 = ($2 + -1 | 0) & 2047 | 0;
       $15 = ($1 | 0) != ($8 | 0) ? $2 : ($1 | 0) == ($14 | 0) ? $2 : !($11 | i64toi32_i32$3 | 0) ? $1 : $2;
       $17 = $1 + -1 | 0;
       if (($1 | 0) != ($14 | 0)) {
        continue label6
       }
       break label6;
      };
      $13 = $13 + -29 | 0;
      $15 = $2;
      if (!$12) {
       continue label7
      }
      break label7;
     };
     block44 : {
      block43 : {
       $14 = ($14 + -1 | 0) & 2047 | 0;
       if (($14 | 0) == ($2 | 0)) {
        break block43
       }
       $15 = $2;
       break block44;
      }
      $1 = ($7 + 784 | 0) + ((($2 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | (HEAP32[(($7 + 784 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
      $15 = $8;
     }
     $18 = $18 + 9 | 0;
     HEAP32[(($7 + 784 | 0) + ($14 << 2 | 0) | 0) >> 2] = $12;
     continue label8;
    }
    break label8;
   };
   block49 : {
    label14 : while (1) {
     $20 = ($15 + 1 | 0) & 2047 | 0;
     $9 = ($7 + 784 | 0) + ((($15 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label13 : while (1) {
      $17 = ($18 | 0) > (45 | 0) ? 9 : 1;
      block48 : {
       label11 : while (1) {
        $12 = $14;
        $1 = 0;
        block46 : {
         block45 : {
          label9 : while (1) {
           $2 = ($1 + $12 | 0) & 2047 | 0;
           if (($2 | 0) == ($15 | 0)) {
            break block45
           }
           $2 = HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
           $14 = HEAP32[(($1 << 2 | 0) + 76640 | 0) >> 2] | 0;
           if ($2 >>> 0 < $14 >>> 0) {
            break block45
           }
           if ($2 >>> 0 > $14 >>> 0) {
            break block46
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label9
           }
           break label9;
          };
         }
         if (($18 | 0) != (36 | 0)) {
          break block46
         }
         i64toi32_i32$3 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$3;
         $1 = 0;
         i64toi32_i32$3 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$3;
         label10 : while (1) {
          block47 : {
           $2 = ($1 + $12 | 0) & 2047 | 0;
           if (($2 | 0) != ($15 | 0)) {
            break block47
           }
           $15 = ($15 + 1 | 0) & 2047 | 0;
           HEAP32[((($15 << 2 | 0) + ($7 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          __floatunsitf($7 + 768 | 0 | 0, HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$3 = $16$hi;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          __multf3($7 + 752 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
          $698 = i64toi32_i32$5;
          $698$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 760 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 764 | 0) >> 2] | 0;
          $700 = i64toi32_i32$4;
          $700$hi = i64toi32_i32$5;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
          $702 = i64toi32_i32$5;
          $702$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 776 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 780 | 0) >> 2] | 0;
          $704 = i64toi32_i32$4;
          $704$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $698$hi;
          i64toi32_i32$4 = $700$hi;
          i64toi32_i32$1 = $702$hi;
          i64toi32_i32$3 = $704$hi;
          __addtf3($7 + 736 | 0 | 0, $698 | 0, i64toi32_i32$5 | 0, $700 | 0, i64toi32_i32$4 | 0, $702 | 0, i64toi32_i32$1 | 0, $704 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = $7;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 744 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 748 | 0) >> 2] | 0;
          $16 = i64toi32_i32$3;
          $16$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $11 = i64toi32_i32$1;
          $11$hi = i64toi32_i32$3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (4 | 0)) {
           continue label10
          }
          break label10;
         };
         __floatsitf(i64toi32_i32$4 + 720 | 0 | 0, $5 | 0);
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $721 = i64toi32_i32$3;
         $721$hi = i64toi32_i32$1;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 728 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 732 | 0) >> 2] | 0;
         $723 = i64toi32_i32$1;
         $723$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$4 = $721$hi;
         i64toi32_i32$5 = $723$hi;
         __multf3($7 + 704 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $721 | 0, i64toi32_i32$4 | 0, $723 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$5 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$5;
         i64toi32_i32$1 = $7;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 712 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 716 | 0) >> 2] | 0;
         $16 = i64toi32_i32$5;
         $16$hi = i64toi32_i32$4;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
         $19 = i64toi32_i32$4;
         $19$hi = i64toi32_i32$5;
         $14 = $13 + 113 | 0;
         $1 = $14 - $4 | 0;
         $8 = ($3 | 0) > ($1 | 0);
         $2 = $8 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
         if ($2 >>> 0 <= 112 >>> 0) {
          break block48
         }
         i64toi32_i32$5 = 0;
         $21 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23 = 0;
         $23$hi = i64toi32_i32$5;
         break block49;
        }
        $13 = $17 + $13 | 0;
        $14 = $15;
        if (($12 | 0) == ($15 | 0)) {
         continue label11
        }
        break label11;
       };
       $8 = 1e9 >>> $17 | 0;
       $6 = (-1 << $17 | 0) ^ -1 | 0;
       $1 = 0;
       $14 = $12;
       label12 : while (1) {
        $2 = ($7 + 784 | 0) + ($12 << 2 | 0) | 0;
        $763 = $2;
        $2 = HEAP32[$2 >> 2] | 0;
        $1 = ($2 >>> $17 | 0) + $1 | 0;
        HEAP32[$763 >> 2] = $1;
        $1 = ($12 | 0) == ($14 | 0) & !$1 | 0;
        $14 = $1 ? ($14 + 1 | 0) & 2047 | 0 : $14;
        $18 = $1 ? $18 + -9 | 0 : $18;
        $1 = Math_imul($2 & $6 | 0, $8);
        $12 = ($12 + 1 | 0) & 2047 | 0;
        if (($12 | 0) != ($15 | 0)) {
         continue label12
        }
        break label12;
       };
       if (!$1) {
        continue label13
       }
       block50 : {
        if (($20 | 0) == ($14 | 0)) {
         break block50
        }
        HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] = $1;
        $15 = $20;
        continue label14;
       }
       HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 0 | 1 | 0;
       continue label13;
      }
      break label13;
     };
     break label14;
    };
    __extenddftf2($7 + 656 | 0 | 0, +(+scalbn(+(1.0), 225 - $2 | 0 | 0)));
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
    $824 = i64toi32_i32$5;
    $824$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 668 | 0) >> 2] | 0;
    $826 = i64toi32_i32$4;
    $826$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $824$hi;
    i64toi32_i32$4 = $826$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$3 = $16$hi;
    copysignl($7 + 688 | 0 | 0, $824 | 0, i64toi32_i32$5 | 0, $826 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 696 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 700 | 0) >> 2] | 0;
    $23 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    __extenddftf2(i64toi32_i32$4 + 640 | 0 | 0, +(+scalbn(+(1.0), 113 - $2 | 0 | 0)));
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $843 = i64toi32_i32$3;
    $843$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 648 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 652 | 0) >> 2] | 0;
    $845 = i64toi32_i32$1;
    $845$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $843$hi;
    i64toi32_i32$5 = $845$hi;
    fmodl($7 + 672 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $843 | 0, i64toi32_i32$4 | 0, $845 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 684 | 0) >> 2] | 0;
    $21 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $21$hi;
    __subtf3($7 + 624 | 0 | 0, $19 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$4 | 0, $11 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $861 = i64toi32_i32$3;
    $861$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 632 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 636 | 0) >> 2] | 0;
    $863 = i64toi32_i32$1;
    $863$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $861$hi;
    i64toi32_i32$5 = $863$hi;
    __addtf3($7 + 608 | 0 | 0, $22 | 0, i64toi32_i32$3 | 0, $23 | 0, i64toi32_i32$1 | 0, $861 | 0, i64toi32_i32$4 | 0, $863 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
    $19 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
   }
   block51 : {
    $17 = ($12 + 4 | 0) & 2047 | 0;
    if (($17 | 0) == ($15 | 0)) {
     break block51
    }
    block54 : {
     block52 : {
      $17 = HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0;
      if ($17 >>> 0 > 499999999 >>> 0) {
       break block52
      }
      block53 : {
       if ($17) {
        break block53
       }
       if ((($12 + 5 | 0) & 2047 | 0 | 0) == ($15 | 0)) {
        break block54
       }
      }
      __extenddftf2($7 + 496 | 0 | 0, +(+($5 | 0) * .25));
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
      $898 = i64toi32_i32$5;
      $898$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 504 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 508 | 0) >> 2] | 0;
      $900 = i64toi32_i32$4;
      $900$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $898$hi;
      i64toi32_i32$3 = $900$hi;
      __addtf3($7 + 480 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0, $898 | 0, i64toi32_i32$1 | 0, $900 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 488 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 492 | 0) >> 2] | 0;
      $21 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      break block54;
     }
     block55 : {
      if (($17 | 0) == (5e8 | 0)) {
       break block55
      }
      __extenddftf2($7 + 592 | 0 | 0, +(+($5 | 0) * .75));
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $917 = i64toi32_i32$3;
      $917$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 600 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 604 | 0) >> 2] | 0;
      $919 = i64toi32_i32$1;
      $919$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $917$hi;
      i64toi32_i32$5 = $919$hi;
      __addtf3($7 + 576 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$1 | 0, $917 | 0, i64toi32_i32$4 | 0, $919 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 588 | 0) >> 2] | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
      $11 = i64toi32_i32$4;
      $11$hi = i64toi32_i32$5;
      break block54;
     }
     $24 = +($5 | 0);
     block56 : {
      if ((($12 + 5 | 0) & 2047 | 0 | 0) != ($15 | 0)) {
       break block56
      }
      __extenddftf2($7 + 528 | 0 | 0, +($24 * .5));
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
      $940 = i64toi32_i32$5;
      $940$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 536 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 540 | 0) >> 2] | 0;
      $942 = i64toi32_i32$4;
      $942$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $940$hi;
      i64toi32_i32$3 = $942$hi;
      __addtf3($7 + 512 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0, $940 | 0, i64toi32_i32$1 | 0, $942 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 520 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 524 | 0) >> 2] | 0;
      $21 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      break block54;
     }
     __extenddftf2($7 + 560 | 0 | 0, +($24 * .75));
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $956 = i64toi32_i32$3;
     $956$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 568 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 572 | 0) >> 2] | 0;
     $958 = i64toi32_i32$1;
     $958$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $956$hi;
     i64toi32_i32$5 = $958$hi;
     __addtf3($7 + 544 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$1 | 0, $956 | 0, i64toi32_i32$4 | 0, $958 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 552 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 556 | 0) >> 2] | 0;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
     $11 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$5;
    }
    if ($2 >>> 0 > 111 >>> 0) {
     break block51
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    fmodl($7 + 464 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $970 = i64toi32_i32$3;
    $970$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 476 | 0) >> 2] | 0;
    $972 = i64toi32_i32$1;
    $972$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $970$hi;
    i64toi32_i32$1 = $972$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if (__letf2($970 | 0, i64toi32_i32$3 | 0, $972 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break block51
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    __addtf3($7 + 448 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 456 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 460 | 0) >> 2] | 0;
    $21 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $21$hi;
   __addtf3($7 + 432 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $11 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
   $991 = i64toi32_i32$5;
   $991$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 440 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 444 | 0) >> 2] | 0;
   $993 = i64toi32_i32$4;
   $993$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $991$hi;
   i64toi32_i32$4 = $993$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   __subtf3($7 + 416 | 0 | 0, $991 | 0, i64toi32_i32$5 | 0, $993 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = $7;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 424 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 428 | 0) >> 2] | 0;
   $16 = i64toi32_i32$3;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $19 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$3;
   block57 : {
    if (($14 & 2147483647 | 0 | 0) <= ($10 + -2 | 0 | 0)) {
     break block57
    }
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$1 = $16$hi;
    fabsl(i64toi32_i32$4 + 400 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    __multf3($7 + 384 | 0 | 0, $19 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 404 | 0) >> 2] | 0;
    $1014 = i64toi32_i32$5;
    $1014$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 408 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 412 | 0) >> 2] | 0;
    $1016 = i64toi32_i32$4;
    $1016$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1014$hi;
    i64toi32_i32$4 = $1016$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $14 = __getf2($1014 | 0, i64toi32_i32$5 | 0, $1016 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 392 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 396 | 0) >> 2] | 0;
    $1019$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    $15 = ($14 | 0) > (-1 | 0);
    i64toi32_i32$0 = $15;
    i64toi32_i32$3 = $1019$hi;
    $196 = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $15 ? $196 : $16;
    i64toi32_i32$4 = $15 ? i64toi32_i32$3 : i64toi32_i32$1;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 388 | 0) >> 2] | 0;
    $1026$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $15;
    i64toi32_i32$5 = $1026$hi;
    $197 = i64toi32_i32$4;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $197 : $19;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $19 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $12 = __letf2($11 | 0, $11$hi | 0, $21 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    block58 : {
     $13 = $13 + $15 | 0;
     if (($13 + 110 | 0 | 0) > ($10 | 0)) {
      break block58
     }
     if (!(($8 & (($2 | 0) != ($1 | 0) | ($14 | 0) < (0 | 0) | 0) | 0) & ($12 | 0) != (0 | 0) | 0)) {
      break block57
     }
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$1 = $16$hi;
   scalbnl($7 + 368 | 0 | 0, $19 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$1 | 0, $13 | 0);
   i64toi32_i32$3 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 376 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7 + 380 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 372 | 0) >> 2] | 0;
   $16 = i64toi32_i32$5;
   $16$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$5 = $0;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $16$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $16;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $7 + 8976 | 0;
 }
 
 function scanexp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3 = 0, $6$hi = 0, $6 = 0, $5 = 0, i64toi32_i32$3 = 0, $4 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $88$hi = 0, $90 = 0, $90$hi = 0, $139$hi = 0;
  block1 : {
   block : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $3 = HEAPU8[$2 >> 0] | 0;
    break block1;
   }
   $3 = __shgetc($0 | 0) | 0;
  }
  block18 : {
   block7 : {
    block6 : {
     block3 : {
      switch ($3 + -43 | 0 | 0) {
      case 0:
      case 2:
       block5 : {
        block4 : {
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break block4
         }
         HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
         $2 = HEAPU8[$2 >> 0] | 0;
         break block5;
        }
        $2 = __shgetc($0 | 0) | 0;
       }
       $4 = ($3 | 0) == (45 | 0);
       $5 = $2 + -58 | 0;
       if (!$1) {
        break block6
       }
       if ($5 >>> 0 > -11 >>> 0) {
        break block6
       }
       i64toi32_i32$2 = $0;
       i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19 = 0
         } else {
          $19 = 1
         }
         $20 = $19;
        } else {
         $20 = 0
        }
        $18 = $20;
       }
       if ($18) {
        break block7
       }
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
       break block7;
      default:
       break block3;
      };
     }
     $5 = $3 + -58 | 0;
     $4 = 0;
     $2 = $3;
    }
    if ($5 >>> 0 < -10 >>> 0) {
     break block7
    }
    i64toi32_i32$2 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$2;
    block8 : {
     if (($2 + -48 | 0) >>> 0 >= 10 >>> 0) {
      break block8
     }
     $3 = 0;
     label : while (1) {
      $3 = $2 + Math_imul($3, 10) | 0;
      block10 : {
       block9 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break block9
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break block10;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      $3 = $3 + -48 | 0;
      block11 : {
       $5 = $2 + -48 | 0;
       if ($5 >>> 0 > 9 >>> 0) {
        break block11
       }
       if (($3 | 0) < (214748364 | 0)) {
        continue label
       }
      }
      break label;
     };
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
     if ($5 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label1 : while (1) {
      i64toi32_i32$2 = 0;
      $88$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $90 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$0 = $90;
      i64toi32_i32$4 = $2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      block13 : {
       block12 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break block12
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break block13;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      block14 : {
       $3 = $2 + -48 | 0;
       if ($3 >>> 0 > 9 >>> 0) {
        break block14
       }
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = 21474836;
       i64toi32_i32$0 = 2061584302;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
        $21 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $22 = 0
         } else {
          $22 = 1
         }
         $23 = $22;
        } else {
         $23 = 0
        }
        $21 = $23;
       }
       if ($21) {
        continue label1
       }
      }
      break label1;
     };
     if ($3 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label2 : while (1) {
      block16 : {
       block15 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break block16;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label2
      }
      break label2;
     };
    }
    block17 : {
     i64toi32_i32$0 = $0;
     i64toi32_i32$5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25 = 0
       } else {
        $25 = 1
       }
       $26 = $25;
      } else {
       $26 = 0
      }
      $24 = $26;
     }
     if ($24) {
      break block17
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break block18;
   }
   i64toi32_i32$0 = -2147483648;
   $6 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28 = 0
     } else {
      $28 = 1
     }
     $29 = $28;
    } else {
     $29 = 0
    }
    $27 = $29;
   }
   if ($27) {
    break block18
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function strtox($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $1;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  HEAP32[($4 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  __shlim($4 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  __floatscan($4 | 0, $4 + 16 | 0 | 0, $3 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  block : {
   if (!$2) {
    break block
   }
   HEAP32[$2 >> 2] = ($1 + ((HEAP32[($4 + 20 | 0) >> 2] | 0) - (HEAP32[($4 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4 + 136 | 0) >> 2] | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $4 + 160 | 0;
 }
 
 function strtod($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11 = 0, $11$hi = 0, $13 = 0, $13$hi = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  strtox($2 | 0, $0 | 0, $1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $11 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $13 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3 = +__trunctfdf2($11 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$1 | 0);
  __stack_pointer = $2 + 16 | 0;
  return +$3;
 }
 
 function __cos($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $16 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $16 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return +($4 + ($16 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1)));
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0.0, $11 = 0, $6 = 0, $5 = 0, $14 = 0, $19 = 0.0, $9 = 0, $10 = 0, $21 = 0, $13 = 0, $8 = 0, $22 = 0.0, $15 = 0, $7 = 0, $17 = 0, $23 = 0.0, $152 = 0, $24 = 0.0, $164 = 0, $196 = 0, $20 = 0, $26 = 0.0, $402 = 0, $27 = 0.0, $414 = 0, $425 = 0, $16 = 0, $18 = 0, $144 = 0, $189 = 0.0, $210 = 0, $213 = 0, $394 = 0, $525 = 0.0, $563 = 0.0;
  $5 = __stack_pointer - 560 | 0;
  __stack_pointer = $5;
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = Math_imul($7, -24) + $2 | 0;
  block : {
   $9 = HEAP32[(($4 << 2 | 0) + 76720 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break block
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label : while (1) {
    block2 : {
     block1 : {
      if (($2 | 0) >= (0 | 0)) {
       break block1
      }
      $12 = 0.0;
      break block2;
     }
     $12 = +(HEAP32[(($2 << 2 | 0) + 76736 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $12;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label
    }
    break label;
   };
  }
  $13 = $8 + -24 | 0;
  $11 = 0;
  $14 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $15 = ($3 | 0) < (1 | 0);
  label2 : while (1) {
   block4 : {
    block3 : {
     if (!$15) {
      break block3
     }
     $12 = 0.0;
     break block4;
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    $12 = 0.0;
    label1 : while (1) {
     $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label1
     }
     break label1;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
   $2 = ($11 | 0) == ($14 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label2
   }
   break label2;
  };
  $16 = 47 - $8 | 0;
  $17 = 48 - $8 | 0;
  $18 = $8 + -25 | 0;
  $11 = $9;
  block21 : {
   label10 : while (1) {
    $12 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    block5 : {
     if (($11 | 0) < (1 | 0)) {
      break block5
     }
     label3 : while (1) {
      $144 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
      $23 = $12 * 5.9604644775390625e-08;
      if (Math_abs($23) < 2147483647.0) {
       $152 = ~~$23
      } else {
       $152 = -2147483648
      }
      $19 = +($152 | 0);
      $24 = $19 * -16777216.0 + $12;
      if (Math_abs($24) < 2147483647.0) {
       $164 = ~~$24
      } else {
       $164 = -2147483648
      }
      HEAP32[$144 >> 2] = $164;
      $6 = $6 + -1 | 0;
      $12 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $19;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    $12 = +scalbn(+$12, $13 | 0);
    $12 = $12 + +floor(+($12 * .125)) * -8.0;
    $189 = $12;
    if (Math_abs($12) < 2147483647.0) {
     $196 = ~~$12
    } else {
     $196 = -2147483648
    }
    $10 = $196;
    $12 = $189 - +($10 | 0);
    block9 : {
     block10 : {
      block8 : {
       block7 : {
        block6 : {
         $20 = ($13 | 0) < (1 | 0);
         if ($20) {
          break block6
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $210 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $213 = $2;
         $2 = $2 >> $17 | 0;
         $6 = $213 - ($2 << $17 | 0) | 0;
         HEAP32[$210 >> 2] = $6;
         $21 = $6 >> $16 | 0;
         $10 = $2 + $10 | 0;
         break block7;
        }
        if ($13) {
         break block8
        }
        $21 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($21 | 0) < (1 | 0)) {
        break block9
       }
       break block10;
      }
      $21 = 2;
      if ($12 >= .5) {
       break block10
      }
      $21 = 0;
      break block9;
     }
     $2 = 0;
     $14 = 0;
     $6 = 1;
     block11 : {
      if (($11 | 0) < (1 | 0)) {
       break block11
      }
      label4 : while (1) {
       $15 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$15 >> 2] | 0;
       block15 : {
        block14 : {
         block13 : {
          block12 : {
           if (!$14) {
            break block12
           }
           $14 = 16777215;
           break block13;
          }
          if (!$6) {
           break block14
          }
          $14 = 16777216;
         }
         HEAP32[$15 >> 2] = $14 - $6 | 0;
         $14 = 1;
         $6 = 0;
         break block15;
        }
        $14 = 0;
        $6 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label4
       }
       break label4;
      };
     }
     block16 : {
      if ($20) {
       break block16
      }
      $2 = 8388607;
      block17 : {
       switch ($18 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break block17;
       default:
        break block16;
       };
      }
      $14 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) & $2 | 0;
     }
     $10 = $10 + 1 | 0;
     if (($21 | 0) != (2 | 0)) {
      break block9
     }
     $12 = 1.0 - $12;
     $21 = 2;
     if ($6) {
      break block9
     }
     $12 = $12 - +scalbn(+(1.0), $13 | 0);
    }
    block19 : {
     if ($12 != 0.0) {
      break block19
     }
     $6 = 0;
     $2 = $11;
     block20 : {
      if (($2 | 0) <= ($9 | 0)) {
       break block20
      }
      label5 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label5
       }
       break label5;
      };
      if (!$6) {
       break block20
      }
      label6 : while (1) {
       $13 = $13 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label6
       }
       break block21;
      };
     }
     $2 = 1;
     label7 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label7
      }
      break label7;
     };
     $14 = $6 + $11 | 0;
     label9 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 76736 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $12 = 0.0;
      block22 : {
       if (($3 | 0) < (1 | 0)) {
        break block22
       }
       label8 : while (1) {
        $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label8
        }
        break label8;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
      if (($11 | 0) < ($14 | 0)) {
       continue label9
      }
      break label9;
     };
     $11 = $14;
     continue label10;
    }
    break label10;
   };
   block24 : {
    block23 : {
     $12 = +scalbn(+$12, 24 - $8 | 0 | 0);
     if (!($12 >= 16777216.0)) {
      break block23
     }
     $394 = ($5 + 480 | 0) + ($11 << 2 | 0) | 0;
     $26 = $12 * 5.9604644775390625e-08;
     if (Math_abs($26) < 2147483647.0) {
      $402 = ~~$26
     } else {
      $402 = -2147483648
     }
     $2 = $402;
     $27 = +($2 | 0) * -16777216.0 + $12;
     if (Math_abs($27) < 2147483647.0) {
      $414 = ~~$27
     } else {
      $414 = -2147483648
     }
     HEAP32[$394 >> 2] = $414;
     $11 = $11 + 1 | 0;
     $13 = $8;
     break block24;
    }
    if (Math_abs($12) < 2147483647.0) {
     $425 = ~~$12
    } else {
     $425 = -2147483648
    }
    $2 = $425;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $12 = +scalbn(+(1.0), $13 | 0);
  block25 : {
   if (($11 | 0) < (0 | 0)) {
    break block25
   }
   $3 = $11;
   label11 : while (1) {
    $2 = $3;
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $12 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3 = $2 + -1 | 0;
    $12 = $12 * 5.9604644775390625e-08;
    if ($2) {
     continue label11
    }
    break label11;
   };
   $6 = $11;
   label13 : while (1) {
    $12 = 0.0;
    $2 = 0;
    block26 : {
     $14 = $11 - $6 | 0;
     $0 = ($9 | 0) < ($14 | 0) ? $9 : $14;
     if (($0 | 0) < (0 | 0)) {
      break block26
     }
     label12 : while (1) {
      $12 = +HEAPF64[(($2 << 3 | 0) + 79504 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3] + $12;
      $3 = ($2 | 0) != ($0 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label12
      }
      break label12;
     };
    }
    HEAPF64[(($5 + 160 | 0) + ($14 << 3 | 0) | 0) >> 3] = $12;
    $2 = ($6 | 0) > (0 | 0);
    $6 = $6 + -1 | 0;
    if ($2) {
     continue label13
    }
    break label13;
   };
  }
  block30 : {
   block32 : {
    block28 : {
     switch ($4 | 0) {
     case 3:
      $22 = 0.0;
      block31 : {
       if (($11 | 0) < (1 | 0)) {
        break block31
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label14 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $525 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($525 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 1 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label14
        }
        break label14;
       };
       if (($11 | 0) == (1 | 0)) {
        break block31
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label15 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $563 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($563 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 2 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label15
        }
        break label15;
       };
       $22 = 0.0;
       label16 : while (1) {
        $22 = $22 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label16
        }
        break label16;
       };
      }
      $12 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($21) {
       break block32
      }
      HEAPF64[$1 >> 3] = $12;
      $12 = +HEAPF64[($5 + 168 | 0) >> 3];
      HEAPF64[($1 + 16 | 0) >> 3] = $22;
      HEAPF64[($1 + 8 | 0) >> 3] = $12;
      break block30;
     case 0:
      $12 = 0.0;
      block33 : {
       if (($11 | 0) < (0 | 0)) {
        break block33
       }
       label17 : while (1) {
        $2 = $11;
        $11 = $2 + -1 | 0;
        $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
        if ($2) {
         continue label17
        }
        break label17;
       };
      }
      HEAPF64[$1 >> 3] = $21 ? -$12 : $12;
      break block30;
     case 1:
     case 2:
      break block28;
     default:
      break block30;
     };
    }
    $12 = 0.0;
    block34 : {
     if (($11 | 0) < (0 | 0)) {
      break block34
     }
     $3 = $11;
     label18 : while (1) {
      $2 = $3;
      $3 = $2 + -1 | 0;
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      if ($2) {
       continue label18
      }
      break label18;
     };
    }
    HEAPF64[$1 >> 3] = $21 ? -$12 : $12;
    $12 = +HEAPF64[($5 + 160 | 0) >> 3] - $12;
    $2 = 1;
    block35 : {
     if (($11 | 0) < (1 | 0)) {
      break block35
     }
     label19 : while (1) {
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label19
      }
      break label19;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $21 ? -$12 : $12;
    break block30;
   }
   HEAPF64[$1 >> 3] = -$12;
   $12 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$22;
   HEAPF64[($1 + 8 | 0) >> 3] = -$12;
  }
  __stack_pointer = $5 + 560 | 0;
  return $10 & 7 | 0 | 0;
 }
 
 function __rem_pio2($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $6 = 0.0, i64toi32_i32$2 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $7 = 0.0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0.0, $10 = 0, $3 = 0, $3$hi = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $148 = 0, $37 = 0, $38 = 0, $276 = 0, $39 = 0, $40 = 0, $41 = 0, $192 = 0, $218 = 0, $11 = 0, $269 = 0, $12 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  block4 : {
   block10 : {
    block1 : {
     block : {
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $24 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4 = $24;
      $5 = $4 & 2147483647 | 0;
      if ($5 >>> 0 > 1074752122 >>> 0) {
       break block
      }
      if (($4 & 1048575 | 0 | 0) == (598523 | 0)) {
       break block1
      }
      block2 : {
       if ($5 >>> 0 > 1073928572 >>> 0) {
        break block2
       }
       block3 : {
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $25 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $26 = 0
          } else {
           $26 = 1
          }
          $27 = $26;
         } else {
          $27 = 0
         }
         $25 = $27;
        }
        if ($25) {
         break block3
        }
        $0 = $0 + -1.5707963267341256;
        $6 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -6.077100506506192e-11;
        $4 = 1;
        break block4;
       }
       $0 = $0 + 1.5707963267341256;
       $6 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 6.077100506506192e-11;
       $4 = -1;
       break block4;
      }
      block5 : {
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $28 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $29 = 0
         } else {
          $29 = 1
         }
         $30 = $29;
        } else {
         $30 = 0
        }
        $28 = $30;
       }
       if ($28) {
        break block5
       }
       $0 = $0 + -3.1415926534682512;
       $6 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.2154201013012384e-10;
       $4 = 2;
       break block4;
      }
      $0 = $0 + 3.1415926534682512;
      $6 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.2154201013012384e-10;
      $4 = -2;
      break block4;
     }
     block6 : {
      if ($5 >>> 0 > 1075594811 >>> 0) {
       break block6
      }
      block7 : {
       if ($5 >>> 0 > 1075183036 >>> 0) {
        break block7
       }
       if (($5 | 0) == (1074977148 | 0)) {
        break block1
       }
       block8 : {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $31 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $32 = 0
          } else {
           $32 = 1
          }
          $33 = $32;
         } else {
          $33 = 0
         }
         $31 = $33;
        }
        if ($31) {
         break block8
        }
        $0 = $0 + -4.712388980202377;
        $6 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.8231301519518578e-10;
        $4 = 3;
        break block4;
       }
       $0 = $0 + 4.712388980202377;
       $6 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.8231301519518578e-10;
       $4 = -3;
       break block4;
      }
      if (($5 | 0) == (1075388923 | 0)) {
       break block1
      }
      block9 : {
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $34 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $35 = 0
         } else {
          $35 = 1
         }
         $36 = $35;
        } else {
         $36 = 0
        }
        $34 = $36;
       }
       if ($34) {
        break block9
       }
       $0 = $0 + -6.2831853069365025;
       $6 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -2.430840202602477e-10;
       $4 = 4;
       break block4;
      }
      $0 = $0 + 6.2831853069365025;
      $6 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 2.430840202602477e-10;
      $4 = -4;
      break block4;
     }
     if ($5 >>> 0 > 1094263290 >>> 0) {
      break block10
     }
    }
    $7 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    if (Math_abs($7) < 2147483647.0) {
     $148 = ~~$7
    } else {
     $148 = -2147483648
    }
    $4 = $148;
    block12 : {
     block11 : {
      $6 = $0 + $7 * -1.5707963267341256;
      $8 = $7 * 6.077100506506192e-11;
      $9 = $6 - $8;
      if (!($9 < -.7853981633974483)) {
       break block11
      }
      $4 = $4 + -1 | 0;
      $7 = $7 + -1.0;
      $8 = $7 * 6.077100506506192e-11;
      $6 = $0 + $7 * -1.5707963267341256;
      break block12;
     }
     if (!($9 > .7853981633974483)) {
      break block12
     }
     $4 = $4 + 1 | 0;
     $7 = $7 + 1.0;
     $8 = $7 * 6.077100506506192e-11;
     $6 = $0 + $7 * -1.5707963267341256;
    }
    $0 = $6 - $8;
    HEAPF64[$1 >> 3] = $0;
    block13 : {
     $10 = $5 >>> 20 | 0;
     $192 = $10;
     wasm2js_scratch_store_f64(+$0);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $37 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if (($192 - ($37 & 2047 | 0) | 0 | 0) < (17 | 0)) {
      break block13
     }
     $0 = $7 * 6.077100506303966e-11;
     $9 = $6 - $0;
     $8 = $7 * 2.0222662487959506e-21 - ($6 - $9 - $0);
     $0 = $9 - $8;
     HEAPF64[$1 >> 3] = $0;
     block14 : {
      $218 = $10;
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $38 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($218 - ($38 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break block14
      }
      $6 = $9;
      break block13;
     }
     $0 = $7 * 2.0222662487111665e-21;
     $6 = $9 - $0;
     $8 = $7 * 8.4784276603689e-32 - ($9 - $6 - $0);
     $0 = $6 - $8;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $6 - $0 - $8;
    break block4;
   }
   block15 : {
    if ($5 >>> 0 < 2146435072 >>> 0) {
     break block15
    }
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[($1 + 8 | 0) >> 3] = $0;
    $4 = 0;
    break block4;
   }
   $11 = $2 + 16 | 0 | 8 | 0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $4 = $2 + 16 | 0;
   $10 = 1;
   label : while (1) {
    $269 = $4;
    if (Math_abs($0) < 2147483647.0) {
     $276 = ~~$0
    } else {
     $276 = -2147483648
    }
    $6 = +($276 | 0);
    HEAPF64[$269 >> 3] = $6;
    $0 = ($0 - $6) * 16777216.0;
    $12 = $10 & 1 | 0;
    $10 = 0;
    $4 = $11;
    if ($12) {
     continue label
    }
    break label;
   };
   HEAPF64[($2 + 32 | 0) >> 3] = $0;
   $4 = 2;
   label1 : while (1) {
    $10 = $4;
    $4 = $4 + -1 | 0;
    if (+HEAPF64[(($2 + 16 | 0) + ($10 << 3 | 0) | 0) >> 3] == 0.0) {
     continue label1
    }
    break label1;
   };
   $4 = __rem_pio2_large($2 + 16 | 0 | 0, $2 | 0, ($5 >>> 20 | 0) + -1046 | 0 | 0, $10 + 1 | 0 | 0, 1 | 0) | 0;
   $0 = +HEAPF64[$2 >> 3];
   block16 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $39 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $40 = 0
      } else {
       $40 = 1
      }
      $41 = $40;
     } else {
      $41 = 0
     }
     $39 = $41;
    }
    if ($39) {
     break block16
    }
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[($1 + 8 | 0) >> 3] = -+HEAPF64[($2 + 8 | 0) >> 3];
    $4 = 0 - $4 | 0;
    break block4;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[($1 + 8 | 0) >> 3] = +HEAPF64[($2 + 8 | 0) >> 3];
  }
  __stack_pointer = $2 + 48 | 0;
  return $4 | 0;
 }
 
 function __sin($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $5 = 0.0, $4 = 0.0;
  $3 = $0 * $0;
  $4 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5 = $0 * $3;
  block : {
   if ($2) {
    break block
   }
   return +($5 * ($3 * $4 + -.16666666666666632) + $0);
  }
  return +($0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $5 * .16666666666666632));
 }
 
 function cos($0) {
  $0 = +$0;
  var $3 = 0.0, $1 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9 = 0, i64toi32_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block1 : {
   block : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $9 & 2147483647 | 0;
    if ($2 >>> 0 > 1072243195 >>> 0) {
     break block
    }
    $3 = 1.0;
    if ($2 >>> 0 < 1044816030 >>> 0) {
     break block1
    }
    $3 = +__cos(+$0, +(0.0));
    break block1;
   }
   block2 : {
    if ($2 >>> 0 < 2146435072 >>> 0) {
     break block2
    }
    $3 = $0 - $0;
    break block1;
   }
   $2 = __rem_pio2(+$0, $1 | 0) | 0;
   $0 = +HEAPF64[($1 + 8 | 0) >> 3];
   $3 = +HEAPF64[$1 >> 3];
   block6 : {
    switch ($2 & 3 | 0 | 0) {
    default:
     $3 = +__cos(+$3, +$0);
     break block1;
    case 1:
     $3 = -+__sin(+$3, +$0, 1 | 0);
     break block1;
    case 2:
     $3 = -+__cos(+$3, +$0);
     break block1;
    case 3:
     break block6;
    };
   }
   $3 = +__sin(+$3, +$0, 1 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return +$3;
 }
 
 function __math_xflow($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +($1 * +fp_barrier_273(+($0 ? -$1 : $1)));
 }
 
 function fp_barrier_273($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3]);
 }
 
 function __math_uflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(1.2882297539194267e-231)));
 }
 
 function __math_oflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function exp($0) {
  $0 = +$0;
  var $3 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $1 = 0, $2 = 0, $4 = 0, i64toi32_i32$5 = 0, $4$hi = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0.0, $23 = 0, $6$hi = 0, $69 = 0.0, $76 = 0.0, $92 = 0, $92$hi = 0, $94$hi = 0, $6 = 0;
  block3 : {
   block1 : {
    block : {
     $1 = (top12(+$0) | 0) & 2047 | 0;
     $2 = top12(+(5.551115123125783e-17)) | 0;
     if (($1 - $2 | 0) >>> 0 >= ((top12(+(512.0)) | 0) - $2 | 0) >>> 0) {
      break block
     }
     $2 = $1;
     break block1;
    }
    block2 : {
     if ($1 >>> 0 >= $2 >>> 0) {
      break block2
     }
     return +($0 + 1.0);
    }
    $2 = 0;
    if ($1 >>> 0 < (top12(+(1024.0)) | 0) >>> 0) {
     break block1
    }
    $3 = 0.0;
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = -1048576;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
     break block3
    }
    block4 : {
     if ($1 >>> 0 < (top12(+(Infinity)) | 0) >>> 0) {
      break block4
     }
     return +($0 + 1.0);
    }
    block5 : {
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
      $20 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $21 = 0
       } else {
        $21 = 1
       }
       $22 = $21;
      } else {
       $22 = 0
      }
      $20 = $22;
     }
     if ($20) {
      break block5
     }
     return +(+__math_uflow(0 | 0));
    }
    return +(+__math_oflow(0 | 0));
   }
   $3 = +HEAPF64[(0 + 79576 | 0) >> 3];
   $5 = $0 * +HEAPF64[(0 + 79568 | 0) >> 3] + $3;
   $3 = $5 - $3;
   $0 = $3 * +HEAPF64[(0 + 79592 | 0) >> 3] + ($3 * +HEAPF64[(0 + 79584 | 0) >> 3] + $0);
   $3 = $0 * $0;
   $69 = $3 * $3 * ($0 * +HEAPF64[(0 + 79624 | 0) >> 3] + +HEAPF64[(0 + 79616 | 0) >> 3]);
   $76 = $3 * ($0 * +HEAPF64[(0 + 79608 | 0) >> 3] + +HEAPF64[(0 + 79600 | 0) >> 3]);
   wasm2js_scratch_store_f64(+$5);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $4 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $4$hi = i64toi32_i32$3;
   $1 = ($4 << 4 | 0) & 2032 | 0;
   $0 = $69 + ($76 + (+HEAPF64[($1 + 79680 | 0) >> 3] + $0));
   i64toi32_i32$1 = $1 + 79688 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $92 = i64toi32_i32$3;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 45;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $23 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $23 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $94$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $92$hi;
   i64toi32_i32$2 = $92;
   i64toi32_i32$1 = $94$hi;
   i64toi32_i32$0 = $23;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   block6 : {
    if ($2) {
     break block6
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $4$hi;
    return +(+specialcase(+$0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0));
   }
   i64toi32_i32$2 = $6$hi;
   wasm2js_scratch_store_i32(0 | 0, $6 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $3 = +wasm2js_scratch_load_f64();
   $3 = $3 * $0 + $3;
  }
  return +$3;
 }
 
 function top12($0) {
  $0 = +$0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6 | 0;
 }
 
 function specialcase($0, $1, $1$hi, $2, $2$hi) {
  $0 = +$0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3 = 0.0, i64toi32_i32$5 = 0, $4 = 0.0, $5 = 0.0;
  block : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3 = +wasm2js_scratch_load_f64();
   return +(($3 * $0 + $3) * 5486124068793688683255936.0e279);
  }
  block1 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3 = +wasm2js_scratch_load_f64();
   $4 = $3 * $0;
   $0 = $4 + $3;
   if (!($0 < 1.0)) {
    break block1
   }
   fp_force_eval(+(+fp_barrier_279() * 2.2250738585072014e-308));
   $5 = $0 + 1.0;
   $0 = $5 + ($4 + ($3 - $0) + ($0 + (1.0 - $5))) + -1.0;
   $0 = $0 == 0.0 ? 0.0 : $0;
  }
  return +($0 * 2.2250738585072014e-308);
 }
 
 function fp_barrier_279() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 1048576;
  return +(+HEAPF64[($0 + 8 | 0) >> 3]);
 }
 
 function fp_force_eval($0) {
  $0 = +$0;
  HEAPF64[((__stack_pointer - 16 | 0) + 8 | 0) >> 3] = $0;
 }
 
 function FLAC__window_bartlett($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $8 = Math_fround(0), $3 = 0, $6 = 0, $5 = Math_fround(0), $2 = 0, $7 = 0, $4 = 0, $9 = 0;
  $2 = $1 + -1 | 0;
  block7 : {
   block1 : {
    block3 : {
     block2 : {
      block : {
       if (!($1 & 1 | 0)) {
        break block
       }
       $3 = 0;
       $4 = $2 >> 1 | 0;
       if (($4 | 0) < (0 | 0)) {
        break block1
       }
       $5 = Math_fround($2 >>> 0);
       if ($2) {
        break block2
       }
       $6 = 0;
       break block3;
      }
      block5 : {
       block4 : {
        $3 = $1 >> 1 | 0;
        if (($3 | 0) >= (1 | 0)) {
         break block4
        }
        $3 = 0;
        break block5;
       }
       $5 = Math_fround($2 | 0);
       $6 = 0;
       block6 : {
        if (($1 | 0) == (2 | 0)) {
         break block6
        }
        $4 = $3 & 2147483646 | 0;
        $6 = 0;
        $7 = 0;
        label : while (1) {
         $8 = Math_fround($6 >>> 0);
         HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
         $9 = $6 | 1 | 0;
         $8 = Math_fround($9 >>> 0);
         HEAPF32[($0 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
         $6 = $6 + 2 | 0;
         $7 = $7 + 2 | 0;
         if (($7 | 0) != ($4 | 0)) {
          continue label
         }
         break label;
        };
       }
       if (!($1 & 2 | 0)) {
        break block5
       }
       $8 = Math_fround($6 >>> 0);
       HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
      }
      if (($3 | 0) >= ($1 | 0)) {
       break block7
      }
      $6 = $3 + 1 | 0;
      $5 = Math_fround($2 | 0);
      block8 : {
       if (!($3 & 1 | 0)) {
        break block8
       }
       $8 = Math_fround($3 >>> 0);
       HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
       $3 = $6;
      }
      if (($1 | 0) == ($6 | 0)) {
       break block7
      }
      label1 : while (1) {
       $8 = Math_fround($3 >>> 0);
       HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
       $6 = $3 + 1 | 0;
       $8 = Math_fround($6 >>> 0);
       HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
       $3 = $3 + 2 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue label1
       }
       break block7;
      };
     }
     $9 = ($4 + 1 | 0) & 2147483646 | 0;
     $6 = 0;
     $3 = 0;
     label2 : while (1) {
      $8 = Math_fround($6 >>> 0);
      HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
      $7 = $6 | 1 | 0;
      $8 = Math_fround($7 >>> 0);
      HEAPF32[($0 + ($7 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
      $6 = $6 + 2 | 0;
      $3 = $3 + 2 | 0;
      if (($3 | 0) != ($9 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    $3 = $4 + 1 | 0;
    if ($2 & 2 | 0) {
     break block1
    }
    $8 = Math_fround($6 >>> 0);
    HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $5);
   }
   if (($1 | 0) <= ($3 | 0)) {
    break block7
   }
   $6 = $3 + 1 | 0;
   $5 = Math_fround($2 | 0);
   block9 : {
    if (!(($1 - $3 | 0) & 1 | 0)) {
     break block9
    }
    $8 = Math_fround($3 >>> 0);
    HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
    $3 = $6;
   }
   if (($1 | 0) == ($6 | 0)) {
    break block7
   }
   label3 : while (1) {
    $8 = Math_fround($3 >>> 0);
    HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
    $6 = $3 + 1 | 0;
    $8 = Math_fround($6 >>> 0);
    HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($8 + $8) / $5));
    $3 = $3 + 2 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label3
    }
    break label3;
   };
  }
 }
 
 function FLAC__window_bartlett_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = Math_fround(0), $2 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = Math_fround(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = Math_fround(Math_fround($3 >>> 0) / $2);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+$4 * 6.283185307179586)) * -.3799999952316284 + (+Math_fround(Math_abs(Math_fround($4 + Math_fround(-.5)))) * -.47999998927116394 + .6200000047683716))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_blackman($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = +($3 >>> 0);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $2)) * .07999999821186066 + (+cos(+($4 * 6.283185307179586 / $2)) * -.5 + .41999998688697815))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_blackman_harris_4term_92db_sidelobe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = +($3 >>> 0);
    $5 = +cos(+($4 * 12.566370614359172 / $2));
    $6 = +cos(+($4 * 6.283185307179586 / $2));
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 18.84955592153876 / $2)) * -.011680000461637974 + ($5 * .14127999544143677 + ($6 * -.488290011882782 + .35874998569488525)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_connes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $6 = 0.0, $4 = 0, $7 = 0, $3 = 0, $5 = 0;
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +($1 + -1 | 0 | 0) * .5;
   $3 = $1 & 1 | 0;
   $4 = 0;
   block1 : {
    if (($1 | 0) == (1 | 0)) {
     break block1
    }
    $5 = $1 & 2147483646 | 0;
    $4 = 0;
    $1 = 0;
    label : while (1) {
     $6 = (+($4 >>> 0) - $2) / $2;
     $6 = 1.0 - $6 * $6;
     HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround($6 * $6);
     $7 = $4 | 1 | 0;
     $6 = (+($7 >>> 0) - $2) / $2;
     $6 = 1.0 - $6 * $6;
     HEAPF32[($0 + ($7 << 2 | 0) | 0) >> 2] = Math_fround($6 * $6);
     $4 = $4 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$3) {
    break block
   }
   $2 = (+($4 >>> 0) - $2) / $2;
   $2 = 1.0 - $2 * $2;
   HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround($2 * $2);
  }
 }
 
 function FLAC__window_flattop($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = +($3 >>> 0);
    $5 = +cos(+($4 * 12.566370614359172 / $2));
    $6 = +cos(+($4 * 6.283185307179586 / $2));
    $7 = +cos(+($4 * 18.84955592153876 / $2));
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 25.132741228718345 / $2)) * 6.9473679177463055e-03 + ($7 * -.08357894420623779 + ($5 * .27726316452026367 + ($6 * -.4166315793991089 + .21557894349098206))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_gauss($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $6 = 0, $4 = 0.0, $8 = 0.0, $5 = 0.0, $9 = 0, $3 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $3 = $1 & 1 | 0;
   $4 = +($1 + -1 | 0 | 0) * .5;
   $5 = $4 * +$2;
   $6 = 0;
   block1 : {
    if (($1 | 0) == (1 | 0)) {
     break block1
    }
    $7 = $1 & 2147483646 | 0;
    $6 = 0;
    $1 = 0;
    label : while (1) {
     $8 = (+($6 >>> 0) - $4) / $5;
     (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($8 * ($8 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $9 = $6 | 1 | 0;
     $8 = (+($9 >>> 0) - $4) / $5;
     (wasm2js_i32$0 = $0 + ($9 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($8 * ($8 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $6 = $6 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($7 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$3) {
    break block
   }
   $4 = (+($6 >>> 0) - $4) / $5;
   (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($4 * ($4 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_hamming($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0.0, $6 = 0, $2 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = $1 & 1 | 0;
   $3 = +(($1 + -1 | 0) >>> 0);
   $4 = 0;
   block1 : {
    if (($1 | 0) == (1 | 0)) {
     break block1
    }
    $5 = $1 & 2147483646 | 0;
    $4 = 0;
    $1 = 0;
    label : while (1) {
     (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 >>> 0) * 6.283185307179586 / $3)) * -.46000000834465027 + .5400000214576721)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $6 = $4 | 1 | 0;
     (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($6 >>> 0) * 6.283185307179586 / $3)) * -.46000000834465027 + .5400000214576721)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $4 = $4 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$2) {
    break block
   }
   (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 >>> 0) * 6.283185307179586 / $3)) * -.46000000834465027 + .5400000214576721)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0.0, $6 = 0, $2 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = $1 & 1 | 0;
   $3 = +(($1 + -1 | 0) >>> 0);
   $4 = 0;
   block1 : {
    if (($1 | 0) == (1 | 0)) {
     break block1
    }
    $5 = $1 & 2147483646 | 0;
    $4 = 0;
    $1 = 0;
    label : while (1) {
     (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 >>> 0) * 6.283185307179586 / $3)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $6 = $4 | 1 | 0;
     (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($6 >>> 0) * 6.283185307179586 / $3)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $4 = $4 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$2) {
    break block
   }
   (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 >>> 0) * 6.283185307179586 / $3)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_kaiser_bessel($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = +($3 >>> 0);
    $5 = +cos(+($4 * 12.566370614359172 / $2));
    $6 = +cos(+($4 * 6.283185307179586 / $2));
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 18.84955592153876 / $2)) * -1.0000000474974513e-03 + ($5 * .09799999743700027 + ($6 * -.49799999594688416 + .4020000100135803)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_nuttall($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +(($1 + -1 | 0) >>> 0);
   $3 = 0;
   label : while (1) {
    $4 = +($3 >>> 0);
    $5 = +cos(+($4 * 12.566370614359172 / $2));
    $6 = +cos(+($4 * 6.283185307179586 / $2));
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 18.84955592153876 / $2)) * -.010641099885106087 + ($5 * .13659949600696564 + ($6 * -.48917749524116516 + .36358189582824707)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label
    }
    break label;
   };
  }
 }
 
 function FLAC__window_rectangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$0 = 0, $3 = 0, $6 = 0, $2 = 0, $5 = 0;
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = $1 & 7 | 0;
   $3 = 0;
   $4 = 0;
   block1 : {
    if ($1 >>> 0 < 8 >>> 0) {
     break block1
    }
    $5 = $1 & 2147483640 | 0;
    $4 = 0;
    $6 = 0;
    label : while (1) {
     $1 = $0 + ($4 << 2 | 0) | 0;
     i64toi32_i32$1 = $1;
     i64toi32_i32$0 = 1065353216;
     HEAP32[$1 >> 2] = 1065353216;
     HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $1 + 8 | 0;
     i64toi32_i32$0 = 1065353216;
     HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $1 + 16 | 0;
     i64toi32_i32$0 = 1065353216;
     HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $1 + 24 | 0;
     i64toi32_i32$0 = 1065353216;
     HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4 = $4 + 8 | 0;
     $6 = $6 + 8 | 0;
     if (($6 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$2) {
    break block
   }
   label1 : while (1) {
    HEAP32[($0 + ($4 << 2 | 0) | 0) >> 2] = 1065353216;
    $4 = $4 + 1 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue label1
    }
    break label1;
   };
  }
 }
 
 function FLAC__window_triangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $7 = 0, $10 = Math_fround(0), $6 = Math_fround(0), $3 = 0, $4 = 0, $9 = 0, $5 = 0, $8 = 0, $117 = 0, $233 = 0;
  $2 = 1;
  block3 : {
   block : {
    if (!($1 & 1 | 0)) {
     break block
    }
    $3 = $0 + -4 | 0;
    block1 : {
     $4 = $1 + 1 | 0;
     $5 = $4 >> 1 | 0;
     if (($5 | 0) < (1 | 0)) {
      break block1
     }
     $6 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
     $7 = 1;
     block2 : {
      if (($4 | 0) == (2 | 0)) {
       break block2
      }
      $8 = $5 & 2147483646 | 0;
      $2 = 0;
      $7 = 1;
      label : while (1) {
       $9 = $7 << 2 | 0;
       $10 = Math_fround($7 >>> 0);
       HEAPF32[($3 + $9 | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
       $10 = Math_fround(($7 + 1 | 0) >>> 0);
       HEAPF32[($0 + $9 | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
       $7 = $7 + 2 | 0;
       $2 = $2 + 2 | 0;
       if (($2 | 0) != ($8 | 0)) {
        continue label
       }
       break label;
      };
     }
     $2 = $5 + 1 | 0;
     if (!($4 & 2 | 0)) {
      break block1
     }
     $10 = Math_fround($7 >>> 0);
     HEAPF32[($3 + ($7 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
    }
    if (($1 | 0) < ($2 | 0)) {
     break block3
    }
    $6 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
    $7 = $2;
    block4 : {
     if (!($2 & 1 | 0)) {
      break block4
     }
     HEAPF32[($3 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(($1 - $2 | 0) << 1 | 0 | 2 | 0 | 0) / $6);
     $7 = $2 + 1 | 0;
    }
    if (($1 | 0) == ($2 | 0)) {
     break block3
    }
    label1 : while (1) {
     $2 = $7 << 2 | 0;
     HEAPF32[($3 + $2 | 0) >> 2] = Math_fround(Math_fround((($1 - $7 | 0) << 1 | 0) + 2 | 0 | 0) / $6);
     $117 = $0 + $2 | 0;
     $2 = $7 + 1 | 0;
     HEAPF32[$117 >> 2] = Math_fround(Math_fround((($1 - $2 | 0) << 1 | 0) + 2 | 0 | 0) / $6);
     $7 = $7 + 2 | 0;
     if (($1 | 0) != ($2 | 0)) {
      continue label1
     }
     break block3;
    };
   }
   $3 = $0 + -4 | 0;
   $2 = 1;
   block5 : {
    $4 = $1 >> 1 | 0;
    if (($4 | 0) < (1 | 0)) {
     break block5
    }
    $6 = Math_fround(Math_fround($1 >>> 0) + Math_fround(1.0));
    $7 = 1;
    block6 : {
     if (($1 | 0) == (2 | 0)) {
      break block6
     }
     $8 = $4 & 2147483646 | 0;
     $2 = 0;
     $7 = 1;
     label2 : while (1) {
      $9 = $7 << 2 | 0;
      $10 = Math_fround($7 >>> 0);
      HEAPF32[($3 + $9 | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
      $10 = Math_fround(($7 + 1 | 0) >>> 0);
      HEAPF32[($0 + $9 | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
      $7 = $7 + 2 | 0;
      $2 = $2 + 2 | 0;
      if (($2 | 0) != ($8 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    $2 = $4 + 1 | 0;
    if (!($1 & 2 | 0)) {
     break block5
    }
    $10 = Math_fround($7 >>> 0);
    HEAPF32[($3 + ($7 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($10 + $10) / $6);
   }
   if (($1 | 0) < ($2 | 0)) {
    break block3
   }
   $6 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
   $7 = $2;
   block7 : {
    if ($2 & 1 | 0) {
     break block7
    }
    HEAPF32[($3 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(($1 - $2 | 0) << 1 | 0 | 2 | 0 | 0) / $6);
    $7 = $2 | 1 | 0;
   }
   if (($1 | 0) == ($2 | 0)) {
    break block3
   }
   label3 : while (1) {
    $2 = $7 << 2 | 0;
    HEAPF32[($3 + $2 | 0) >> 2] = Math_fround(Math_fround((($1 - $7 | 0) << 1 | 0) + 2 | 0 | 0) / $6);
    $233 = $0 + $2 | 0;
    $2 = $7 + 1 | 0;
    HEAPF32[$233 >> 2] = Math_fround(Math_fround((($1 - $2 | 0) << 1 | 0) + 2 | 0 | 0) / $6);
    $7 = $7 + 2 | 0;
    if (($1 | 0) != ($2 | 0)) {
     continue label3
    }
    break label3;
   };
  }
 }
 
 function FLAC__window_tukey($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $4 = 0, $6 = 0, $3 = 0, $8 = 0.0, $11 = Math_fround(0), $128 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  block1 : {
   block : {
    if (!($2 <= Math_fround(0.0))) {
     break block
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = $1 & 7 | 0;
    $4 = 0;
    $5 = 0;
    block2 : {
     if ($1 >>> 0 < 8 >>> 0) {
      break block2
     }
     $1 = $1 & 2147483640 | 0;
     $5 = 0;
     $6 = 0;
     label : while (1) {
      $7 = $0 + ($5 << 2 | 0) | 0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 16 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 24 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5 = $5 + 8 | 0;
      $6 = $6 + 8 | 0;
      if (($6 | 0) != ($1 | 0)) {
       continue label
      }
      break label;
     };
    }
    if (!$3) {
     break block1
    }
    label1 : while (1) {
     HEAP32[($0 + ($5 << 2 | 0) | 0) >> 2] = 1065353216;
     $5 = $5 + 1 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($3 | 0)) {
      continue label1
     }
     break block1;
    };
   }
   block3 : {
    if (!($2 >= Math_fround(1.0))) {
     break block3
    }
    if (($1 | 0) < (1 | 0)) {
     break block1
    }
    $3 = $1 & 1 | 0;
    $8 = +(($1 + -1 | 0) >>> 0);
    $5 = 0;
    block4 : {
     if (($1 | 0) == (1 | 0)) {
      break block4
     }
     $6 = $1 & 2147483646 | 0;
     $5 = 0;
     $7 = 0;
     label2 : while (1) {
      (wasm2js_i32$0 = $0 + ($5 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($5 >>> 0) * 6.283185307179586 / $8)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      $4 = $5 | 1 | 0;
      (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 >>> 0) * 6.283185307179586 / $8)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      $5 = $5 + 2 | 0;
      $7 = $7 + 2 | 0;
      if (($7 | 0) != ($6 | 0)) {
       continue label2
      }
      break label2;
     };
    }
    if (!$3) {
     break block1
    }
    (wasm2js_i32$0 = $0 + ($5 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($5 >>> 0) * 6.283185307179586 / $8)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    return;
   }
   $11 = Math_fround(Math_fround($2 * Math_fround(.5)) * Math_fround($1 | 0));
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
    $128 = ~~$11
   } else {
    $128 = -2147483648
   }
   $3 = $128;
   block5 : {
    if (($1 | 0) < (1 | 0)) {
     break block5
    }
    $9 = $1 & 7 | 0;
    $4 = 0;
    $5 = 0;
    block6 : {
     if ($1 >>> 0 < 8 >>> 0) {
      break block6
     }
     $10 = $1 & 2147483640 | 0;
     $5 = 0;
     $6 = 0;
     label3 : while (1) {
      $7 = $0 + ($5 << 2 | 0) | 0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 16 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 24 | 0;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5 = $5 + 8 | 0;
      $6 = $6 + 8 | 0;
      if (($6 | 0) != ($10 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    if (!$9) {
     break block5
    }
    label4 : while (1) {
     HEAP32[($0 + ($5 << 2 | 0) | 0) >> 2] = 1065353216;
     $5 = $5 + 1 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($9 | 0)) {
      continue label4
     }
     break label4;
    };
   }
   if (($3 | 0) < (2 | 0)) {
    break block1
   }
   $4 = $0 + (($1 - $3 | 0) << 2 | 0) | 0;
   $6 = $3 + -1 | 0;
   $8 = +($6 >>> 0);
   $5 = 0;
   label5 : while (1) {
    $7 = $5 << 2 | 0;
    (wasm2js_i32$0 = $0 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($5 >>> 0) * 3.141592653589793 / $8)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $4 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($5 + $6 | 0 | 0) * 3.141592653589793 / $8)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue label5
    }
    break label5;
   };
  }
 }
 
 function FLAC__window_partial_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $8 = 0, $7 = 0, $10 = 0, $9 = 0, $16 = 0, $12 = 0.0, $14 = 0, $11 = 0, $15 = 0, $6 = 0, $13 = 0.0, $17 = 0, $18 = 0, $19 = 0, $5 = Math_fround(0), $20 = Math_fround(0), $35 = 0, $21 = Math_fround(0), $46 = 0, $22 = Math_fround(0), $61 = 0, $23 = Math_fround(0), $151 = 0, $24 = Math_fround(0), $240 = 0, $37 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5 = Math_fround($1 | 0);
  $20 = Math_fround($4 * $5);
  if (Math_fround(Math_abs($20)) < Math_fround(2147483648.0)) {
   $35 = ~~$20
  } else {
   $35 = -2147483648
  }
  $6 = $35;
  $37 = $6;
  $21 = Math_fround($3 * $5);
  if (Math_fround(Math_abs($21)) < Math_fround(2147483648.0)) {
   $46 = ~~$21
  } else {
   $46 = -2147483648
  }
  $7 = $46;
  $8 = $37 - $7 | 0;
  block26 : {
   block25 : {
    block3 : {
     block5 : {
      block6 : {
       block : {
        if (!($2 <= Math_fround(0.0))) {
         break block
        }
        $22 = Math_fround(Math_fround($8 | 0) * Math_fround(.02500000037252903));
        if (Math_fround(Math_abs($22)) < Math_fround(2147483648.0)) {
         $61 = ~~$22
        } else {
         $61 = -2147483648
        }
        $9 = $61;
        block2 : {
         block1 : {
          $8 = ($7 | 0) < ($1 | 0) ? $7 : $1;
          if (($8 | 0) >= (1 | 0)) {
           break block1
          }
          $8 = 0;
          break block2;
         }
         $10 = $8 << 2 | 0;
         if (!$10) {
          break block2
         }
         wasm2js_memory_fill($0, 0, $10);
        }
        $7 = $9 + $7 | 0;
        $7 = ($7 | 0) < ($1 | 0) ? $7 : $1;
        if (($7 | 0) <= ($8 | 0)) {
         break block3
        }
        $10 = $7 - $8 | 0;
        $11 = $10 & 1 | 0;
        $12 = +($9 | 0);
        block4 : {
         if (($7 | 0) != ($8 + 1 | 0 | 0)) {
          break block4
         }
         $13 = 3.141592653589793;
         break block5;
        }
        $14 = $0 + 4 | 0;
        $15 = $10 & -2 | 0;
        $10 = 0;
        $7 = 1;
        label : while (1) {
         $16 = $8 << 2 | 0;
         (wasm2js_i32$0 = $0 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($7 >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
         (wasm2js_i32$0 = $14 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+(($7 + 1 | 0) >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
         $7 = $7 + 2 | 0;
         $8 = $8 + 2 | 0;
         $10 = $10 + 2 | 0;
         if (($10 | 0) != ($15 | 0)) {
          continue label
         }
         break block6;
        };
       }
       block10 : {
        block12 : {
         block13 : {
          block7 : {
           if (!($2 >= Math_fround(1.0))) {
            break block7
           }
           $23 = Math_fround(Math_fround($8 | 0) * Math_fround(.4749999940395355));
           if (Math_fround(Math_abs($23)) < Math_fround(2147483648.0)) {
            $151 = ~~$23
           } else {
            $151 = -2147483648
           }
           $9 = $151;
           block9 : {
            block8 : {
             $8 = ($7 | 0) < ($1 | 0) ? $7 : $1;
             if (($8 | 0) >= (1 | 0)) {
              break block8
             }
             $8 = 0;
             break block9;
            }
            $10 = $8 << 2 | 0;
            if (!$10) {
             break block9
            }
            wasm2js_memory_fill($0, 0, $10);
           }
           $7 = $9 + $7 | 0;
           $7 = ($7 | 0) < ($1 | 0) ? $7 : $1;
           if (($7 | 0) <= ($8 | 0)) {
            break block10
           }
           $10 = $7 - $8 | 0;
           $11 = $10 & 1 | 0;
           $12 = +($9 | 0);
           block11 : {
            if (($7 | 0) != ($8 + 1 | 0 | 0)) {
             break block11
            }
            $13 = 3.141592653589793;
            break block12;
           }
           $14 = $0 + 4 | 0;
           $15 = $10 & -2 | 0;
           $10 = 0;
           $7 = 1;
           label1 : while (1) {
            $16 = $8 << 2 | 0;
            (wasm2js_i32$0 = $0 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($7 >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $14 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+(($7 + 1 | 0) >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
            $7 = $7 + 2 | 0;
            $8 = $8 + 2 | 0;
            $10 = $10 + 2 | 0;
            if (($10 | 0) != ($15 | 0)) {
             continue label1
            }
            break block13;
           };
          }
          $24 = Math_fround(Math_fround($2 * Math_fround(.5)) * Math_fround($8 | 0));
          if (Math_fround(Math_abs($24)) < Math_fround(2147483648.0)) {
           $240 = ~~$24
          } else {
           $240 = -2147483648
          }
          $9 = $240;
          block15 : {
           block14 : {
            $8 = ($7 | 0) < ($1 | 0) ? $7 : $1;
            if (($8 | 0) >= (1 | 0)) {
             break block14
            }
            $8 = 0;
            break block15;
           }
           $10 = $8 << 2 | 0;
           if (!$10) {
            break block15
           }
           wasm2js_memory_fill($0, 0, $10);
          }
          block16 : {
           $7 = $9 + $7 | 0;
           $7 = ($7 | 0) < ($1 | 0) ? $7 : $1;
           if (($7 | 0) <= ($8 | 0)) {
            break block16
           }
           $10 = $7 - $8 | 0;
           $11 = $10 & 1 | 0;
           $12 = +($9 | 0);
           block18 : {
            block17 : {
             if (($7 | 0) != ($8 + 1 | 0 | 0)) {
              break block17
             }
             $13 = 3.141592653589793;
             break block18;
            }
            $14 = $0 + 4 | 0;
            $15 = $10 & -2 | 0;
            $10 = 0;
            $7 = 1;
            label2 : while (1) {
             $16 = $8 << 2 | 0;
             (wasm2js_i32$0 = $0 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($7 >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $14 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+(($7 + 1 | 0) >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             $7 = $7 + 2 | 0;
             $8 = $8 + 2 | 0;
             $10 = $10 + 2 | 0;
             if (($10 | 0) != ($15 | 0)) {
              continue label2
             }
             break label2;
            };
            $13 = +($7 >>> 0) * 3.141592653589793;
           }
           if (!$11) {
            break block16
           }
           (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($13 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
           $8 = $8 + 1 | 0;
          }
          block19 : {
           $7 = $6 - $9 | 0;
           $16 = ($7 | 0) < ($1 | 0) ? $7 : $1;
           if (($8 | 0) >= ($16 | 0)) {
            break block19
           }
           $7 = $8;
           block20 : {
            $14 = ($16 - $8 | 0) & 7 | 0;
            if (!$14) {
             break block20
            }
            $10 = 0;
            $7 = $8;
            label3 : while (1) {
             HEAP32[($0 + ($7 << 2 | 0) | 0) >> 2] = 1065353216;
             $7 = $7 + 1 | 0;
             $10 = $10 + 1 | 0;
             if (($10 | 0) != ($14 | 0)) {
              continue label3
             }
             break label3;
            };
           }
           block21 : {
            if (($8 - $16 | 0) >>> 0 > -8 >>> 0) {
             break block21
            }
            $10 = $0 + 28 | 0;
            $14 = $0 + 24 | 0;
            $15 = $0 + 20 | 0;
            $11 = $0 + 16 | 0;
            $17 = $0 + 12 | 0;
            $18 = $0 + 8 | 0;
            $19 = $0 + 4 | 0;
            label4 : while (1) {
             $8 = $7 << 2 | 0;
             HEAP32[($0 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($19 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($18 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($17 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($11 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($15 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($14 + $8 | 0) >> 2] = 1065353216;
             HEAP32[($10 + $8 | 0) >> 2] = 1065353216;
             $7 = $7 + 8 | 0;
             if (($7 | 0) != ($16 | 0)) {
              continue label4
             }
             break label4;
            };
           }
           $8 = $16;
          }
          block22 : {
           $10 = ($6 | 0) < ($1 | 0) ? $6 : $1;
           if (($10 | 0) <= ($8 | 0)) {
            break block22
           }
           $7 = $8 + 1 | 0;
           $12 = +($9 | 0);
           block23 : {
            if (!(($10 - $8 | 0) & 1 | 0)) {
             break block23
            }
            (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($12 * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
            $9 = $9 + -1 | 0;
            $8 = $7;
           }
           block24 : {
            if (($10 | 0) == ($7 | 0)) {
             break block24
            }
            $16 = $0 + 4 | 0;
            label5 : while (1) {
             $7 = $8 << 2 | 0;
             (wasm2js_i32$0 = $0 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $16 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 + -1 | 0 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             $9 = $9 + -2 | 0;
             $8 = $8 + 2 | 0;
             if (($8 | 0) != ($10 | 0)) {
              continue label5
             }
             break label5;
            };
           }
           $8 = $10;
          }
          if (($8 | 0) < ($1 | 0)) {
           break block25
          }
          break block26;
         }
         $13 = +($7 >>> 0) * 3.141592653589793;
        }
        if (!$11) {
         break block10
        }
        (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($13 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
        $8 = $8 + 1 | 0;
       }
       block27 : {
        $7 = $6 - $9 | 0;
        $16 = ($7 | 0) < ($1 | 0) ? $7 : $1;
        if (($8 | 0) >= ($16 | 0)) {
         break block27
        }
        $7 = $8;
        block28 : {
         $14 = ($16 - $8 | 0) & 7 | 0;
         if (!$14) {
          break block28
         }
         $10 = 0;
         $7 = $8;
         label6 : while (1) {
          HEAP32[($0 + ($7 << 2 | 0) | 0) >> 2] = 1065353216;
          $7 = $7 + 1 | 0;
          $10 = $10 + 1 | 0;
          if (($10 | 0) != ($14 | 0)) {
           continue label6
          }
          break label6;
         };
        }
        block29 : {
         if (($8 - $16 | 0) >>> 0 > -8 >>> 0) {
          break block29
         }
         $10 = $0 + 28 | 0;
         $14 = $0 + 24 | 0;
         $15 = $0 + 20 | 0;
         $11 = $0 + 16 | 0;
         $17 = $0 + 12 | 0;
         $18 = $0 + 8 | 0;
         $19 = $0 + 4 | 0;
         label7 : while (1) {
          $8 = $7 << 2 | 0;
          HEAP32[($0 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($19 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($18 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($17 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($11 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($15 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($14 + $8 | 0) >> 2] = 1065353216;
          HEAP32[($10 + $8 | 0) >> 2] = 1065353216;
          $7 = $7 + 8 | 0;
          if (($7 | 0) != ($16 | 0)) {
           continue label7
          }
          break label7;
         };
        }
        $8 = $16;
       }
       block30 : {
        $10 = ($6 | 0) < ($1 | 0) ? $6 : $1;
        if (($10 | 0) <= ($8 | 0)) {
         break block30
        }
        $7 = $8 + 1 | 0;
        $12 = +($9 | 0);
        block31 : {
         if (!(($10 - $8 | 0) & 1 | 0)) {
          break block31
         }
         (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($12 * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
         $9 = $9 + -1 | 0;
         $8 = $7;
        }
        block32 : {
         if (($10 | 0) == ($7 | 0)) {
          break block32
         }
         $16 = $0 + 4 | 0;
         label8 : while (1) {
          $7 = $8 << 2 | 0;
          (wasm2js_i32$0 = $0 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
          (wasm2js_i32$0 = $16 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 + -1 | 0 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
          $9 = $9 + -2 | 0;
          $8 = $8 + 2 | 0;
          if (($8 | 0) != ($10 | 0)) {
           continue label8
          }
          break label8;
         };
        }
        $8 = $10;
       }
       if (($8 | 0) < ($1 | 0)) {
        break block25
       }
       break block26;
      }
      $13 = +($7 >>> 0) * 3.141592653589793;
     }
     if (!$11) {
      break block3
     }
     (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($13 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $8 = $8 + 1 | 0;
    }
    block33 : {
     $7 = $6 - $9 | 0;
     $16 = ($7 | 0) < ($1 | 0) ? $7 : $1;
     if (($8 | 0) >= ($16 | 0)) {
      break block33
     }
     $7 = $8;
     block34 : {
      $14 = ($16 - $8 | 0) & 7 | 0;
      if (!$14) {
       break block34
      }
      $10 = 0;
      $7 = $8;
      label9 : while (1) {
       HEAP32[($0 + ($7 << 2 | 0) | 0) >> 2] = 1065353216;
       $7 = $7 + 1 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($14 | 0)) {
        continue label9
       }
       break label9;
      };
     }
     block35 : {
      if (($8 - $16 | 0) >>> 0 > -8 >>> 0) {
       break block35
      }
      $10 = $0 + 28 | 0;
      $14 = $0 + 24 | 0;
      $15 = $0 + 20 | 0;
      $11 = $0 + 16 | 0;
      $17 = $0 + 12 | 0;
      $18 = $0 + 8 | 0;
      $19 = $0 + 4 | 0;
      label10 : while (1) {
       $8 = $7 << 2 | 0;
       HEAP32[($0 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($19 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($18 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($17 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($11 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($15 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($14 + $8 | 0) >> 2] = 1065353216;
       HEAP32[($10 + $8 | 0) >> 2] = 1065353216;
       $7 = $7 + 8 | 0;
       if (($7 | 0) != ($16 | 0)) {
        continue label10
       }
       break label10;
      };
     }
     $8 = $16;
    }
    block36 : {
     $10 = ($6 | 0) < ($1 | 0) ? $6 : $1;
     if (($10 | 0) <= ($8 | 0)) {
      break block36
     }
     $7 = $8 + 1 | 0;
     $12 = +($9 | 0);
     block37 : {
      if (!(($10 - $8 | 0) & 1 | 0)) {
       break block37
      }
      (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($12 * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      $9 = $9 + -1 | 0;
      $8 = $7;
     }
     block38 : {
      if (($10 | 0) == ($7 | 0)) {
       break block38
      }
      $16 = $0 + 4 | 0;
      label11 : while (1) {
       $7 = $8 << 2 | 0;
       (wasm2js_i32$0 = $0 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
       (wasm2js_i32$0 = $16 + $7 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 + -1 | 0 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
       $9 = $9 + -2 | 0;
       $8 = $8 + 2 | 0;
       if (($8 | 0) != ($10 | 0)) {
        continue label11
       }
       break label11;
      };
     }
     $8 = $10;
    }
    if (($8 | 0) >= ($1 | 0)) {
     break block26
    }
   }
   $7 = ($1 - $8 | 0) << 2 | 0;
   if (!$7) {
    break block26
   }
   wasm2js_memory_fill($0 + ($8 << 2 | 0) | 0, 0, $7);
   return;
  }
 }
 
 function FLAC__window_punchout_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $16 = 0, $13 = 0, $10 = 0, $9 = 0, $17 = 0, $12 = 0.0, $18 = 0, $7 = 0, $15 = 0, $5 = Math_fround(0), $11 = 0, $14 = 0.0, $6 = 0, $8 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $41 = 0, $22 = Math_fround(0), $56 = 0, $23 = Math_fround(0), $66 = 0, $300 = 0, $30 = 0, $47 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label : while (1) {
   $5 = $2;
   $2 = Math_fround(.05000000074505806);
   if ($5 <= Math_fround(0.0)) {
    continue label
   }
   $2 = Math_fround(.949999988079071);
   if ($5 >= Math_fround(1.0)) {
    continue label
   }
   break label;
  };
  $30 = $1;
  $2 = Math_fround($1 | 0);
  $21 = Math_fround($4 * $2);
  if (Math_fround(Math_abs($21)) < Math_fround(2147483648.0)) {
   $41 = ~~$21
  } else {
   $41 = -2147483648
  }
  $6 = $41;
  $7 = $30 - $6 | 0;
  block1 : {
   block : {
    $5 = Math_fround($5 * Math_fround(.5));
    $47 = $5;
    $22 = Math_fround($3 * $2);
    if (Math_fround(Math_abs($22)) < Math_fround(2147483648.0)) {
     $56 = ~~$22
    } else {
     $56 = -2147483648
    }
    $8 = $56;
    $23 = Math_fround($47 * Math_fround($8 | 0));
    if (Math_fround(Math_abs($23)) < Math_fround(2147483648.0)) {
     $66 = ~~$23
    } else {
     $66 = -2147483648
    }
    $9 = $66;
    $10 = ($9 | 0) < ($1 | 0) ? $9 : $1;
    if (($10 | 0) >= (1 | 0)) {
     break block
    }
    $10 = 0;
    break block1;
   }
   $11 = $10 & 1 | 0;
   $12 = +($9 | 0);
   block3 : {
    block2 : {
     if (($10 | 0) != (1 | 0)) {
      break block2
     }
     $13 = 0;
     $14 = 3.141592653589793;
     break block3;
    }
    $15 = $10 & 2147483646 | 0;
    $13 = 0;
    $16 = 1;
    $17 = 0;
    label1 : while (1) {
     $18 = $0 + ($13 << 2 | 0) | 0;
     (wasm2js_i32$0 = $18, wasm2js_f32$0 = Math_fround(+cos(+(+($16 >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $18 + 4 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+(($16 + 1 | 0) >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $16 = $16 + 2 | 0;
     $13 = $13 + 2 | 0;
     $17 = $17 + 2 | 0;
     if (($17 | 0) != ($15 | 0)) {
      continue label1
     }
     break label1;
    };
    $14 = +($16 >>> 0) * 3.141592653589793;
   }
   if (!$11) {
    break block1
   }
   (wasm2js_i32$0 = $0 + ($13 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($14 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
  $2 = Math_fround($7 | 0);
  block4 : {
   $16 = $8 - $9 | 0;
   $17 = ($16 | 0) < ($1 | 0) ? $16 : $1;
   if (($10 | 0) >= ($17 | 0)) {
    break block4
   }
   $13 = $10;
   block5 : {
    $18 = ($17 - $13 | 0) & 7 | 0;
    if (!$18) {
     break block5
    }
    $16 = 0;
    label2 : while (1) {
     HEAP32[($0 + ($13 << 2 | 0) | 0) >> 2] = 1065353216;
     $13 = $13 + 1 | 0;
     $16 = $16 + 1 | 0;
     if (($16 | 0) != ($18 | 0)) {
      continue label2
     }
     break label2;
    };
   }
   block6 : {
    if (($10 - $17 | 0) >>> 0 > -8 >>> 0) {
     break block6
    }
    $10 = $0 + 28 | 0;
    $18 = $0 + 24 | 0;
    $15 = $0 + 20 | 0;
    $7 = $0 + 16 | 0;
    $11 = $0 + 12 | 0;
    $19 = $0 + 8 | 0;
    $20 = $0 + 4 | 0;
    label3 : while (1) {
     $16 = $13 << 2 | 0;
     HEAP32[($0 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($20 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($19 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($11 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($7 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($15 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($18 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($10 + $16 | 0) >> 2] = 1065353216;
     $13 = $13 + 8 | 0;
     if (($13 | 0) != ($17 | 0)) {
      continue label3
     }
     break label3;
    };
   }
   $10 = $17;
  }
  $2 = Math_fround($5 * $2);
  block7 : {
   $13 = ($8 | 0) < ($1 | 0) ? $8 : $1;
   if (($13 | 0) <= ($10 | 0)) {
    break block7
   }
   $16 = $10 + 1 | 0;
   $12 = +($9 | 0);
   block8 : {
    if (!(($13 - $10 | 0) & 1 | 0)) {
     break block8
    }
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($12 * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $9 = $9 + -1 | 0;
    $10 = $16;
   }
   block9 : {
    if (($13 | 0) == ($16 | 0)) {
     break block9
    }
    $17 = $0 + 4 | 0;
    label4 : while (1) {
     $16 = $10 << 2 | 0;
     (wasm2js_i32$0 = $0 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $17 + $16 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 + -1 | 0 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $9 = $9 + -2 | 0;
     $10 = $10 + 2 | 0;
     if (($10 | 0) != ($13 | 0)) {
      continue label4
     }
     break label4;
    };
   }
   $10 = $13;
  }
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
   $300 = ~~$2
  } else {
   $300 = -2147483648
  }
  $9 = $300;
  block11 : {
   block10 : {
    $16 = ($6 | 0) < ($1 | 0) ? $6 : $1;
    if (($16 | 0) > ($10 | 0)) {
     break block10
    }
    $16 = $10;
    break block11;
   }
   $13 = ($16 - $10 | 0) << 2 | 0;
   if (!$13) {
    break block11
   }
   wasm2js_memory_fill($0 + ($10 << 2 | 0) | 0, 0, $13);
  }
  block12 : {
   $13 = $9 + $6 | 0;
   $13 = ($13 | 0) < ($1 | 0) ? $13 : $1;
   if (($13 | 0) <= ($16 | 0)) {
    break block12
   }
   $10 = $13 - $16 | 0;
   $7 = $10 & 1 | 0;
   $12 = +($9 | 0);
   block14 : {
    block13 : {
     if (($13 | 0) != ($16 + 1 | 0 | 0)) {
      break block13
     }
     $14 = 3.141592653589793;
     break block14;
    }
    $18 = $0 + 4 | 0;
    $15 = $10 & -2 | 0;
    $10 = 0;
    $13 = 1;
    label5 : while (1) {
     $17 = $16 << 2 | 0;
     (wasm2js_i32$0 = $0 + $17 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($13 >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     (wasm2js_i32$0 = $18 + $17 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+(($13 + 1 | 0) >>> 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $13 = $13 + 2 | 0;
     $16 = $16 + 2 | 0;
     $10 = $10 + 2 | 0;
     if (($10 | 0) != ($15 | 0)) {
      continue label5
     }
     break label5;
    };
    $14 = +($13 >>> 0) * 3.141592653589793;
   }
   if (!$7) {
    break block12
   }
   (wasm2js_i32$0 = $0 + ($16 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($14 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   $16 = $16 + 1 | 0;
  }
  block15 : {
   $13 = $1 - $9 | 0;
   $17 = ($13 | 0) < ($1 | 0) ? $13 : $1;
   if (($16 | 0) >= ($17 | 0)) {
    break block15
   }
   $13 = $16;
   block16 : {
    $18 = ($17 - $16 | 0) & 7 | 0;
    if (!$18) {
     break block16
    }
    $10 = 0;
    $13 = $16;
    label6 : while (1) {
     HEAP32[($0 + ($13 << 2 | 0) | 0) >> 2] = 1065353216;
     $13 = $13 + 1 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($18 | 0)) {
      continue label6
     }
     break label6;
    };
   }
   block17 : {
    if (($16 - $17 | 0) >>> 0 > -8 >>> 0) {
     break block17
    }
    $10 = $0 + 28 | 0;
    $18 = $0 + 24 | 0;
    $15 = $0 + 20 | 0;
    $7 = $0 + 16 | 0;
    $11 = $0 + 12 | 0;
    $19 = $0 + 8 | 0;
    $20 = $0 + 4 | 0;
    label7 : while (1) {
     $16 = $13 << 2 | 0;
     HEAP32[($0 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($20 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($19 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($11 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($7 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($15 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($18 + $16 | 0) >> 2] = 1065353216;
     HEAP32[($10 + $16 | 0) >> 2] = 1065353216;
     $13 = $13 + 8 | 0;
     if (($13 | 0) != ($17 | 0)) {
      continue label7
     }
     break label7;
    };
   }
   $16 = $17;
  }
  block18 : {
   if (($1 | 0) <= ($16 | 0)) {
    break block18
   }
   $13 = $16 + 1 | 0;
   $12 = +($9 | 0);
   block19 : {
    if (!(($1 - $16 | 0) & 1 | 0)) {
     break block19
    }
    (wasm2js_i32$0 = $0 + ($16 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($12 * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $9 = $9 + -1 | 0;
    $16 = $13;
   }
   if (($1 | 0) == ($13 | 0)) {
    break block18
   }
   $10 = $0 + 4 | 0;
   label8 : while (1) {
    $13 = $16 << 2 | 0;
    (wasm2js_i32$0 = $0 + $13 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $10 + $13 | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($9 + -1 | 0 | 0) * 3.141592653589793 / $12)) * -.5 + .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $9 = $9 + -2 | 0;
    $16 = $16 + 2 | 0;
    if (($16 | 0) != ($1 | 0)) {
     continue label8
    }
    break label8;
   };
  }
 }
 
 function FLAC__window_welch($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $4 = 0, $6 = 0.0, $7 = 0, $3 = 0, $5 = 0;
  block : {
   if (($1 | 0) < (1 | 0)) {
    break block
   }
   $2 = +($1 + -1 | 0 | 0) * .5;
   $3 = $1 & 1 | 0;
   $4 = 0;
   block1 : {
    if (($1 | 0) == (1 | 0)) {
     break block1
    }
    $5 = $1 & 2147483646 | 0;
    $4 = 0;
    $1 = 0;
    label : while (1) {
     $6 = (+($4 >>> 0) - $2) / $2;
     HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $6 * $6);
     $7 = $4 | 1 | 0;
     $6 = (+($7 >>> 0) - $2) / $2;
     HEAPF32[($0 + ($7 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $6 * $6);
     $4 = $4 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($5 | 0)) {
      continue label
     }
     break label;
    };
   }
   if (!$3) {
    break block
   }
   $2 = (+($4 >>> 0) - $2) / $2;
   HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $2 * $2);
  }
 }
 
 function FLAC__stream_encoder_new() {
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  block : {
   $0 = emscripten_builtin_calloc(1 | 0, 8 | 0) | 0;
   if ($0) {
    break block
   }
   return 0 | 0;
  }
  $1 = emscripten_builtin_calloc(1 | 0, 1032 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  block1 : {
   if (!$1) {
    break block1
   }
   $2 = emscripten_builtin_calloc(1 | 0, 11856 | 0) | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   block2 : {
    if ($2) {
     break block2
    }
    emscripten_builtin_free($1 | 0);
    break block1;
   }
   $3 = FLAC__bitwriter_new() | 0;
   HEAP32[($2 + 6856 | 0) >> 2] = $3;
   block3 : {
    if ($3) {
     break block3
    }
    emscripten_builtin_free($2 | 0);
    emscripten_builtin_free($1 | 0);
    break block1;
   }
   HEAP32[($2 + 7296 | 0) >> 2] = 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 556 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 560 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1056964608;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 13;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 44100;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 16;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 2;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 564 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 572 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 580 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 592 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 596 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 600 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 7248 | 0) >> 2] = 0;
   HEAP32[($2 + 7252 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2 + 7256 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7264 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7272 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7280 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($1 + 632 | 0 | 0);
   block4 : {
    if ((HEAP32[$1 >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
    FLAC__stream_encoder_set_apodization($0 | 0, GOT_data_internal___memory_base + 70979 | 0 | 0) | 0;
    if ((HEAP32[i64toi32_i32$1 >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    i64toi32_i32$0 = 5;
    HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 564 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 568 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 556 | 0) >> 2] = 8;
    HEAP32[(i64toi32_i32$1 + 560 | 0) >> 2] = i64toi32_i32$0;
   }
   HEAP32[($2 + 11848 | 0) >> 2] = 0;
   $3 = $2 + 6484 | 0;
   HEAP32[($2 + 6716 | 0) >> 2] = $3;
   $4 = $2 + 6472 | 0;
   HEAP32[($2 + 6712 | 0) >> 2] = $4;
   $5 = $2 + 6460 | 0;
   HEAP32[($2 + 6708 | 0) >> 2] = $5;
   $6 = $2 + 6448 | 0;
   HEAP32[($2 + 6704 | 0) >> 2] = $6;
   $7 = $2 + 6436 | 0;
   HEAP32[($2 + 6700 | 0) >> 2] = $7;
   $8 = $2 + 6424 | 0;
   HEAP32[($2 + 6696 | 0) >> 2] = $8;
   $9 = $2 + 6412 | 0;
   HEAP32[($2 + 6692 | 0) >> 2] = $9;
   $10 = $2 + 6400 | 0;
   HEAP32[($2 + 6688 | 0) >> 2] = $10;
   $11 = $2 + 6388 | 0;
   HEAP32[($2 + 6684 | 0) >> 2] = $11;
   $12 = $2 + 6376 | 0;
   HEAP32[($2 + 6680 | 0) >> 2] = $12;
   $13 = $2 + 6364 | 0;
   HEAP32[($2 + 6676 | 0) >> 2] = $13;
   $14 = $2 + 6352 | 0;
   HEAP32[($2 + 6672 | 0) >> 2] = $14;
   $15 = $2 + 6340 | 0;
   HEAP32[($2 + 6668 | 0) >> 2] = $15;
   $16 = $2 + 6328 | 0;
   HEAP32[($2 + 6664 | 0) >> 2] = $16;
   $17 = $2 + 6316 | 0;
   HEAP32[($2 + 6660 | 0) >> 2] = $17;
   $18 = $2 + 6304 | 0;
   HEAP32[($2 + 6656 | 0) >> 2] = $18;
   $19 = $2 + 6292 | 0;
   HEAP32[($2 + 6652 | 0) >> 2] = $19;
   $20 = $2 + 6280 | 0;
   HEAP32[($2 + 6648 | 0) >> 2] = $20;
   $21 = $2 + 6268 | 0;
   HEAP32[($2 + 6644 | 0) >> 2] = $21;
   $22 = $2 + 6256 | 0;
   HEAP32[($2 + 6640 | 0) >> 2] = $22;
   HEAP32[($2 + 6252 | 0) >> 2] = $2 + 5884 | 0;
   HEAP32[($2 + 6248 | 0) >> 2] = $2 + 5592 | 0;
   HEAP32[($2 + 6244 | 0) >> 2] = $2 + 5300 | 0;
   HEAP32[($2 + 6240 | 0) >> 2] = $2 + 5008 | 0;
   HEAP32[($2 + 6236 | 0) >> 2] = $2 + 4716 | 0;
   HEAP32[($2 + 6232 | 0) >> 2] = $2 + 4424 | 0;
   HEAP32[($2 + 6228 | 0) >> 2] = $2 + 4132 | 0;
   HEAP32[($2 + 6224 | 0) >> 2] = $2 + 3840 | 0;
   HEAP32[($2 + 6220 | 0) >> 2] = $2 + 3548 | 0;
   HEAP32[($2 + 6216 | 0) >> 2] = $2 + 3256 | 0;
   HEAP32[($2 + 6212 | 0) >> 2] = $2 + 2964 | 0;
   HEAP32[($2 + 6208 | 0) >> 2] = $2 + 2672 | 0;
   HEAP32[($2 + 6204 | 0) >> 2] = $2 + 2380 | 0;
   HEAP32[($2 + 6200 | 0) >> 2] = $2 + 2088 | 0;
   HEAP32[($2 + 6196 | 0) >> 2] = $2 + 1796 | 0;
   HEAP32[($2 + 6192 | 0) >> 2] = $2 + 1504 | 0;
   HEAP32[($2 + 6188 | 0) >> 2] = $2 + 1212 | 0;
   HEAP32[($2 + 6184 | 0) >> 2] = $2 + 920 | 0;
   HEAP32[($2 + 6180 | 0) >> 2] = $2 + 628 | 0;
   HEAP32[($2 + 6176 | 0) >> 2] = $2 + 336 | 0;
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($22 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($21 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($20 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($19 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($18 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($17 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($16 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($15 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($14 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($13 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($12 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($11 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($10 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($9 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($8 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($7 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($6 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($5 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($4 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($3 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 11736 | 0 | 0);
   HEAP32[$1 >> 2] = 1;
   return $0 | 0;
  }
  emscripten_builtin_free($0 | 0);
  return 0 | 0;
 }
 
 function FLAC__stream_encoder_set_apodization($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $9 = Math_fround(0), $5 = 0, $6 = 0, $8 = 0.0, $2 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $7 = 0, $274 = 0, $400 = 0;
  $2 = 0;
  block : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($3 + 40 | 0) >> 2] = 0;
   $4 = 0;
   label2 : while (1) {
    block2 : {
     block1 : {
      $2 = strchr($1 | 0, 59 | 0) | 0;
      if (!$2) {
       break block1
      }
      $5 = $2 - $1 | 0;
      break block2;
     }
     $5 = strlen($1 | 0) | 0;
    }
    block5 : {
     block19 : {
      block20 : {
       block17 : {
        block16 : {
         block15 : {
          block14 : {
           block12 : {
            block13 : {
             block8 : {
              block7 : {
               block6 : {
                block10 : {
                 block4 : {
                  block3 : {
                   $6 = ($5 | 0) != (8 | 0);
                   if ($6) {
                    break block3
                   }
                   if (strncmp(GOT_data_internal___memory_base + 69897 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                    break block4
                   }
                   HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                   HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 0;
                   break block5;
                  }
                  block9 : {
                   switch ($5 + -6 | 0 | 0) {
                   case 20:
                    break block10;
                   case 0:
                    break block6;
                   case 1:
                    break block7;
                   case 7:
                    break block9;
                   default:
                    break block8;
                   };
                  }
                  block11 : {
                   if (!(strncmp(GOT_data_internal___memory_base + 70324 | 0 | 0, $1 | 0, 13 | 0) | 0)) {
                    break block11
                   }
                   $7 = 1;
                   break block12;
                  }
                  HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                  HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 1;
                  break block5;
                 }
                 if (strncmp(GOT_data_internal___memory_base + 70342 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                  break block13
                 }
                 HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                 HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 2;
                 break block5;
                }
                if (strncmp(GOT_data_internal___memory_base + 70416 | 0 | 0, $1 | 0, 26 | 0) | 0) {
                 break block13
                }
                HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 3;
                break block5;
               }
               if (strncmp(GOT_data_internal___memory_base + 69957 | 0 | 0, $1 | 0, 6 | 0) | 0) {
                break block5
               }
               HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
               HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 4;
               break block5;
              }
              if (strncmp(GOT_data_internal___memory_base + 70316 | 0 | 0, $1 | 0, 7 | 0) | 0) {
               break block14
              }
              HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
              HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 5;
              break block5;
             }
             if ($5 >>> 0 < 8 >>> 0) {
              break block15
             }
            }
            $7 = 0;
           }
           if (strncmp(GOT_data_internal___memory_base + 71022 | 0 | 0, $1 | 0, 6 | 0) | 0) {
            break block16
           }
           $8 = +strtod($1 + 6 | 0 | 0, 0 | 0);
           $3 = HEAP32[$0 >> 2] | 0;
           $9 = Math_fround($8);
           if (!($9 > Math_fround(0.0))) {
            break block5
           }
           if (!($9 <= Math_fround(.5))) {
            break block5
           }
           HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
           $3 = HEAP32[$0 >> 2] | 0;
           $1 = HEAP32[($3 + 40 | 0) >> 2] | 0;
           HEAP32[($3 + 40 | 0) >> 2] = $1 + 1 | 0;
           HEAP32[(($3 + ($1 << 4 | 0) | 0) + 44 | 0) >> 2] = 6;
           break block5;
          }
          if (strncmp(GOT_data_internal___memory_base + 70389 | 0 | 0, $1 | 0, 7 | 0) | 0) {
           break block17
          }
          HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
          HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 7;
          break block5;
         }
         block18 : {
          switch ($5 + -4 | 0 | 0) {
          case 0:
           break block18;
          case 1:
           break block19;
          default:
           break block5;
          };
         }
         if (strncmp(GOT_data_internal___memory_base + 70333 | 0 | 0, $1 | 0, 4 | 0) | 0) {
          break block5
         }
         HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 8;
         break block5;
        }
        if (!$7) {
         break block20
        }
        if (strncmp(GOT_data_internal___memory_base + 70359 | 0 | 0, $1 | 0, 13 | 0) | 0) {
         break block20
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 9;
        break block5;
       }
       if (strncmp(GOT_data_internal___memory_base + 70351 | 0 | 0, $1 | 0, 7 | 0) | 0) {
        break block5
       }
       HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
       HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 10;
       break block5;
      }
      block22 : {
       block21 : {
        if (($5 | 0) != (9 | 0)) {
         break block21
        }
        if (strncmp(GOT_data_internal___memory_base + 70397 | 0 | 0, $1 | 0, 9 | 0) | 0) {
         break block22
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 11;
        break block5;
       }
       if ($6) {
        break block22
       }
       if (strncmp(GOT_data_internal___memory_base + 70407 | 0 | 0, $1 | 0, 8 | 0) | 0) {
        break block22
       }
       HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
       HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 12;
       break block5;
      }
      block23 : {
       if (strncmp(GOT_data_internal___memory_base + 71015 | 0 | 0, $1 | 0, 6 | 0) | 0) {
        break block23
       }
       $8 = +strtod($1 + 6 | 0 | 0, 0 | 0);
       $3 = HEAP32[$0 >> 2] | 0;
       $9 = Math_fround($8);
       if (!($9 >= Math_fround(0.0))) {
        break block5
       }
       if (!($9 <= Math_fround(1.0))) {
        break block5
       }
       HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $9;
       $3 = HEAP32[$0 >> 2] | 0;
       $1 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       HEAP32[($3 + 40 | 0) >> 2] = $1 + 1 | 0;
       HEAP32[(($3 + ($1 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
       break block5;
      }
      if ($5 >>> 0 < 16 >>> 0) {
       break block5
      }
      block24 : {
       if (strncmp(GOT_data_internal___memory_base + 71007 | 0 | 0, $1 | 0, 14 | 0) | 0) {
        break block24
       }
       $8 = +strtod($1 + 14 | 0 | 0, 0 | 0);
       block26 : {
        block25 : {
         $3 = strchr($1 | 0, 47 | 0) | 0;
         if ($3) {
          break block25
         }
         $9 = Math_fround(.10000000149011612);
         break block26;
        }
        $9 = Math_fround(.9900000095367432);
        $4 = $3 + 1 | 0;
        if (!(Math_fround(+strtod($4 | 0, 0 | 0)) < Math_fround(.9900000095367432))) {
         break block26
        }
        $9 = Math_fround(+strtod($4 | 0, 0 | 0));
       }
       if (Math_abs($8) < 2147483647.0) {
        $274 = ~~$8
       } else {
        $274 = -2147483648
       }
       $6 = $274;
       block28 : {
        block27 : {
         $1 = strchr(($3 ? $3 + 1 | 0 : $1) | 0, 47 | 0) | 0;
         if ($1) {
          break block27
         }
         $10 = Math_fround(.20000000298023224);
         break block28;
        }
        $10 = Math_fround(+strtod($1 + 1 | 0 | 0, 0 | 0));
       }
       $3 = HEAP32[$0 >> 2] | 0;
       $4 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       block29 : {
        if (($6 | 0) > (1 | 0)) {
         break block29
        }
        HEAPF32[(($3 + ($4 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
        $3 = HEAP32[$0 >> 2] | 0;
        $1 = HEAP32[($3 + 40 | 0) >> 2] | 0;
        HEAP32[($3 + 40 | 0) >> 2] = $1 + 1 | 0;
        HEAP32[(($3 + ($1 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
        break block5;
       }
       if (($4 + $6 | 0) >>> 0 > 31 >>> 0) {
        break block5
       }
       $11 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $9)) + Math_fround(-1.0));
       $9 = Math_fround($11 + Math_fround($6 >>> 0));
       $1 = 0;
       label : while (1) {
        HEAPF32[(($3 + ($4 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
        $3 = HEAP32[$0 >> 2] | 0;
        HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($1 >>> 0) / $9);
        $3 = HEAP32[$0 >> 2] | 0;
        $1 = $1 + 1 | 0;
        HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($11 + Math_fround($1 >>> 0)) / $9);
        $3 = HEAP32[$0 >> 2] | 0;
        $5 = HEAP32[($3 + 40 | 0) >> 2] | 0;
        $4 = $5 + 1 | 0;
        HEAP32[($3 + 40 | 0) >> 2] = $4;
        HEAP32[(($3 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 14;
        if (($1 | 0) != ($6 | 0)) {
         continue label
        }
        break block5;
       };
      }
      if (($5 | 0) == (16 | 0)) {
       break block5
      }
      if (strncmp(GOT_data_internal___memory_base + 70991 | 0 | 0, $1 | 0, 15 | 0) | 0) {
       break block5
      }
      $8 = +strtod($1 + 15 | 0 | 0, 0 | 0);
      $10 = Math_fround(.20000000298023224);
      $9 = Math_fround(.20000000298023224);
      block30 : {
       $3 = strchr($1 | 0, 47 | 0) | 0;
       if (!$3) {
        break block30
       }
       $9 = Math_fround(.9900000095367432);
       $4 = $3 + 1 | 0;
       if (!(Math_fround(+strtod($4 | 0, 0 | 0)) < Math_fround(.9900000095367432))) {
        break block30
       }
       $9 = Math_fround(+strtod($4 | 0, 0 | 0));
      }
      if (Math_abs($8) < 2147483647.0) {
       $400 = ~~$8
      } else {
       $400 = -2147483648
      }
      $6 = $400;
      block31 : {
       $1 = strchr(($3 ? $3 + 1 | 0 : $1) | 0, 47 | 0) | 0;
       if (!$1) {
        break block31
       }
       $10 = Math_fround(+strtod($1 + 1 | 0 | 0, 0 | 0));
      }
      $3 = HEAP32[$0 >> 2] | 0;
      $4 = HEAP32[($3 + 40 | 0) >> 2] | 0;
      block32 : {
       if (($6 | 0) > (1 | 0)) {
        break block32
       }
       HEAPF32[(($3 + ($4 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
       $3 = HEAP32[$0 >> 2] | 0;
       $1 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       HEAP32[($3 + 40 | 0) >> 2] = $1 + 1 | 0;
       HEAP32[(($3 + ($1 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
       break block5;
      }
      if (($4 + $6 | 0) >>> 0 > 31 >>> 0) {
       break block5
      }
      $11 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $9)) + Math_fround(-1.0));
      $9 = Math_fround($11 + Math_fround($6 >>> 0));
      $1 = 0;
      label1 : while (1) {
       HEAPF32[(($3 + ($4 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
       $3 = HEAP32[$0 >> 2] | 0;
       HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($1 >>> 0) / $9);
       $3 = HEAP32[$0 >> 2] | 0;
       $1 = $1 + 1 | 0;
       HEAPF32[(($3 + ((HEAP32[($3 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($11 + Math_fround($1 >>> 0)) / $9);
       $3 = HEAP32[$0 >> 2] | 0;
       $5 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       $4 = $5 + 1 | 0;
       HEAP32[($3 + 40 | 0) >> 2] = $4;
       HEAP32[(($3 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 15;
       if (($1 | 0) != ($6 | 0)) {
        continue label1
       }
       break block5;
      };
     }
     if (strncmp(GOT_data_internal___memory_base + 70373 | 0 | 0, $1 | 0, 5 | 0) | 0) {
      break block5
     }
     HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
     HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 16;
    }
    $4 = HEAP32[($3 + 40 | 0) >> 2] | 0;
    block33 : {
     if (!$2) {
      break block33
     }
     $1 = $2 + 1 | 0;
     if (($4 | 0) != (32 | 0)) {
      continue label2
     }
    }
    break label2;
   };
   $2 = 1;
   if ($4) {
    break block
   }
   HEAP32[($3 + 48 | 0) >> 2] = 1056964608;
   HEAP32[($3 + 40 | 0) >> 2] = 1;
   HEAP32[($3 + 44 | 0) >> 2] = 13;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  block : {
   if (!$0) {
    break block
   }
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11848 | 0) >> 2] = 1;
   FLAC__stream_encoder_finish($0 | 0) | 0;
   block1 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 11752 | 0) >> 2] | 0;
    if (!$2) {
     break block1
    }
    FLAC__stream_decoder_delete($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($1 + 6256 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6268 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6280 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6292 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6304 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6316 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6328 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6340 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6352 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6364 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6376 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6388 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6400 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6412 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6424 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6436 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6448 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6460 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6472 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6484 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11736 | 0 | 0);
   FLAC__bitwriter_delete(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
   emscripten_builtin_free(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   emscripten_builtin_free(HEAP32[$0 >> 2] | 0 | 0);
   emscripten_builtin_free($0 | 0);
  }
 }
 
 function FLAC__stream_encoder_finish($0) {
  $0 = $0 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, $3 = 0, $1 = 0, $7 = 0, $8 = 0, $8$hi = 0, $5 = 0, $10$hi = 0, $10 = 0, $39 = 0, $40 = 0, $9 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $135 = 0, $140 = 0, $158 = 0, $161 = 0, $164 = 0, $167 = 0, $170 = 0, $293 = 0, $296 = 0, $299 = 0, $302 = 0, $305 = 0, $308 = 0, $311 = 0, $314 = 0, $317 = 0, $320 = 0, $323 = 0, $326 = 0, $329 = 0, $332 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block1 : {
   block : {
    if ($0) {
     break block
    }
    $2 = 0;
    break block1;
   }
   $3 = 0;
   block3 : {
    block2 : {
     $4 = HEAP32[$0 >> 2] | 0;
     $2 = HEAP32[$4 >> 2] | 0;
     switch ($2 | 0) {
     case 1:
      break block1;
     case 0:
      break block2;
     default:
      break block3;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($2 + 11848 | 0) >> 2] | 0) {
     break block3
    }
    $2 = HEAP32[($2 + 7052 | 0) >> 2] | 0;
    if (!$2) {
     break block3
    }
    $3 = HEAP32[($4 + 36 | 0) >> 2] | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $2;
    $3 = (process_frame_($0 | 0, ($3 | 0) != ($2 | 0) | 0, 1 | 0) | 0) ^ 1 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
   }
   block4 : {
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break block4
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FLAC__MD5Final($2 + 6928 | 0 | 0, $2 + 7060 | 0 | 0);
   }
   block6 : {
    block5 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($2 + 11848 | 0) >> 2] | 0)) {
      break block5
     }
     $5 = $3;
     break block6;
    }
    block7 : {
     $4 = HEAP32[$0 >> 2] | 0;
     if (HEAP32[$4 >> 2] | 0) {
      break block7
     }
     block8 : {
      $6 = HEAP32[($2 + 7268 | 0) >> 2] | 0;
      if (!$6) {
       break block8
      }
      block10 : {
       block9 : {
        if (!(HEAP32[($2 + 7260 | 0) >> 2] | 0)) {
         break block9
        }
        $7 = HEAP32[($2 + 6900 | 0) >> 2] | 0;
        $5 = HEAP32[($2 + 6896 | 0) >> 2] | 0;
        i64toi32_i32$2 = $2;
        i64toi32_i32$0 = HEAP32[($2 + 6920 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($2 + 6924 | 0) >> 2] | 0;
        $8 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        if ((FUNCTION_TABLE[$6 | 0]($0, 0, i64toi32_i32$1, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) == (2 | 0)) {
         break block10
        }
        simple_ogg_page__init($1 | 0);
        block11 : {
         i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $1 | 0, HEAP32[($4 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break block11
         }
         $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
         block12 : {
          $9 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0;
          $4 = (((($9 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0) | 0;
          $6 = ($4 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0) | 0) >>> 3 | 0;
          if (($6 + 33 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break block12
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break block10;
         }
         $6 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + $6 | 0;
         i64toi32_i32$2 = $2;
         i64toi32_i32$0 = HEAPU8[($2 + 6928 | 0) >> 0] | 0 | ((HEAPU8[($2 + 6929 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 6930 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 6931 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$1 = HEAPU8[($2 + 6932 | 0) >> 0] | 0 | ((HEAPU8[($2 + 6933 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 6934 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 6935 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $135 = i64toi32_i32$0;
         i64toi32_i32$0 = $6;
         $39 = $135;
         HEAP8[(i64toi32_i32$0 + 17 | 0) >> 0] = $39;
         HEAP8[(i64toi32_i32$0 + 18 | 0) >> 0] = $39 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 19 | 0) >> 0] = $39 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 20 | 0) >> 0] = $39 >>> 24 | 0;
         HEAP8[(i64toi32_i32$0 + 21 | 0) >> 0] = i64toi32_i32$1;
         HEAP8[(i64toi32_i32$0 + 22 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 23 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 24 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
         i64toi32_i32$2 = $2 + 6936 | 0;
         i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $140 = i64toi32_i32$1;
         i64toi32_i32$1 = $6 + 25 | 0;
         $40 = $140;
         HEAP8[i64toi32_i32$1 >> 0] = $40;
         HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $40 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $40 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $40 >>> 24 | 0;
         HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
         HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
         block13 : {
          $2 = ($4 + -4 | 0) >>> 3 | 0;
          if (($2 + 22 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break block13
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break block10;
         }
         $2 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0;
         i64toi32_i32$0 = $8$hi;
         HEAP8[($2 + 21 | 0) >> 0] = $8;
         $158 = $2;
         i64toi32_i32$2 = $8;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $41 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $41 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[($158 + 20 | 0) >> 0] = $41;
         $161 = $2;
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$0 = $8;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 16;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $42 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[($161 + 19 | 0) >> 0] = $42;
         $164 = $2;
         i64toi32_i32$2 = $8$hi;
         i64toi32_i32$1 = $8;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $43 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[($164 + 18 | 0) >> 0] = $43;
         $167 = $2;
         $170 = (HEAPU8[($2 + 17 | 0) >> 0] | 0) & 240 | 0;
         i64toi32_i32$0 = $8$hi;
         i64toi32_i32$2 = $8;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $44 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[($167 + 17 | 0) >> 0] = $170 | ($44 & 15 | 0) | 0;
         block14 : {
          $2 = $9 >>> 3 | 0;
          if (($2 + 23 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break block14
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break block10;
         }
         $2 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0;
         HEAP8[($2 + 22 | 0) >> 0] = $7;
         HEAP8[($2 + 21 | 0) >> 0] = $7 >>> 8 | 0;
         HEAP8[($2 + 20 | 0) >> 0] = $7 >>> 16 | 0;
         HEAP8[($2 + 19 | 0) >> 0] = $5;
         HEAP8[($2 + 18 | 0) >> 0] = $5 >>> 8 | 0;
         HEAP8[($2 + 17 | 0) >> 0] = $5 >>> 16 | 0;
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $2 = simple_ogg_page__set_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0 | 0) | 0;
         simple_ogg_page__clear($1 | 0);
         if (!$2) {
          break block10
         }
         $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] | 0;
         if (!$2) {
          break block10
         }
         if (!(HEAP32[$2 >> 2] | 0)) {
          break block10
         }
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
          break block10
         }
         FLAC__format_seektable_sort($2 | 0) | 0;
         simple_ogg_page__init($1 | 0);
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break block11
         }
         block15 : {
          $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $6 = HEAP32[($7 + 7048 | 0) >> 2] | 0;
          $2 = HEAP32[$6 >> 2] | 0;
          if ((Math_imul($2, 18) + 4 | 0 | 0) == (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
           break block15
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break block10;
         }
         block16 : {
          if (!$2) {
           break block16
          }
          $2 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 4 | 0;
          $4 = 0;
          label : while (1) {
           $6 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + Math_imul($4, 24) | 0;
           i64toi32_i32$0 = $6;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $8 = i64toi32_i32$2;
           $8$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
           $10 = i64toi32_i32$1;
           $10$hi = i64toi32_i32$2;
           $6 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
           HEAP8[($2 + 17 | 0) >> 0] = $6;
           HEAP8[($2 + 15 | 0) >> 0] = i64toi32_i32$1;
           i64toi32_i32$2 = $8$hi;
           HEAP8[($2 + 7 | 0) >> 0] = $8;
           HEAP8[($2 + 16 | 0) >> 0] = $6 >>> 8 | 0;
           $293 = $2;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$0 = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $45 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($293 + 14 | 0) >> 0] = $45;
           $296 = $2;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$2 = $10;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $46 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $46 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($296 + 13 | 0) >> 0] = $46;
           $299 = $2;
           i64toi32_i32$0 = $10$hi;
           i64toi32_i32$1 = $10;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $47 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $47 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($299 + 12 | 0) >> 0] = $47;
           $302 = $2;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$0 = $10;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $48 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $48 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($302 + 11 | 0) >> 0] = $48;
           $305 = $2;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$2 = $10;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $49 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $49 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($305 + 10 | 0) >> 0] = $49;
           $308 = $2;
           i64toi32_i32$0 = $10$hi;
           i64toi32_i32$1 = $10;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $50 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $50 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($308 + 9 | 0) >> 0] = $50;
           $311 = $2;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$0 = $10;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $51 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $51 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($311 + 8 | 0) >> 0] = $51;
           $314 = $2;
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$2 = $8;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $52 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $52 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($314 + 6 | 0) >> 0] = $52;
           $317 = $2;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$1 = $8;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $53 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $53 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($317 + 5 | 0) >> 0] = $53;
           $320 = $2;
           i64toi32_i32$2 = $8$hi;
           i64toi32_i32$0 = $8;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $54 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $54 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($320 + 4 | 0) >> 0] = $54;
           $323 = $2;
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$2 = $8;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $55 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $55 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($323 + 3 | 0) >> 0] = $55;
           $326 = $2;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$1 = $8;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $56 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $56 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($326 + 2 | 0) >> 0] = $56;
           $329 = $2;
           i64toi32_i32$2 = $8$hi;
           i64toi32_i32$0 = $8;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $57 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $57 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($329 + 1 | 0) >> 0] = $57;
           $332 = $2;
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$2 = $8;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $58 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $58 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[$332 >> 0] = $58;
           $2 = $2 + 18 | 0;
           $4 = $4 + 1 | 0;
           $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $6 = HEAP32[($7 + 7048 | 0) >> 2] | 0;
           if ($4 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) {
            continue label
           }
           break label;
          };
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
         simple_ogg_page__set_at($0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($7 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($7 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($7 + 7288 | 0) >> 2] | 0 | 0) | 0;
        }
        simple_ogg_page__clear($1 | 0);
        break block10;
       }
       update_metadata_($0 | 0);
      }
      $4 = HEAP32[$0 >> 2] | 0;
      $3 = HEAP32[$4 >> 2] | 0 ? 1 : $3;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     $6 = HEAP32[($2 + 7280 | 0) >> 2] | 0;
     if (!$6) {
      break block7
     }
     FUNCTION_TABLE[$6 | 0]($0, $2 + 6872 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0);
     $4 = HEAP32[$0 >> 2] | 0;
    }
    block17 : {
     if (HEAP32[($4 + 4 | 0) >> 2] | 0) {
      break block17
     }
     $5 = $3;
     break block6;
    }
    block18 : {
     $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11752 | 0) >> 2] | 0;
     if ($2) {
      break block18
     }
     $5 = $3;
     break block6;
    }
    block19 : {
     if (!(FLAC__stream_decoder_finish($2 | 0) | 0)) {
      break block19
     }
     $5 = $3;
     break block6;
    }
    $5 = 1;
    if ($3) {
     break block6
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 4;
   }
   block20 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 7296 | 0) >> 2] | 0;
    if (!$4) {
     break block20
    }
    block21 : {
     if (($4 | 0) == (HEAP32[GOT_data_internal_stdout >> 2] | 0 | 0)) {
      break block21
     }
     fclose($4 | 0) | 0;
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 7296 | 0) >> 2] = 0;
   }
   $4 = HEAP32[$0 >> 2] | 0;
   block22 : {
    if (!(HEAP32[($2 + 7260 | 0) >> 2] | 0)) {
     break block22
    }
    FLAC__ogg_encoder_aspect_finish($4 + 632 | 0 | 0);
    $4 = HEAP32[$0 >> 2] | 0;
   }
   block23 : {
    $2 = HEAP32[($4 + 600 | 0) >> 2] | 0;
    if (!$2) {
     break block23
    }
    emscripten_builtin_free($2 | 0);
    $4 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$0 + 600 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 604 | 0) >> 2] = i64toi32_i32$2;
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   block24 : {
    if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
     break block24
    }
    $3 = 0;
    label1 : while (1) {
     block25 : {
      $4 = $3 << 2 | 0;
      $6 = HEAP32[(($2 + $4 | 0) + 7328 | 0) >> 2] | 0;
      if (!$6) {
       break block25
      }
      emscripten_builtin_free($6 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $4 | 0) + 7328 | 0) >> 2] = 0;
     }
     block26 : {
      $6 = HEAP32[(($2 + $4 | 0) + 7368 | 0) >> 2] | 0;
      if (!$6) {
       break block26
      }
      emscripten_builtin_free($6 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $4 | 0) + 7368 | 0) >> 2] = 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label1
     }
     break label1;
    };
   }
   block27 : {
    $4 = HEAP32[($2 + 7360 | 0) >> 2] | 0;
    if (!$4) {
     break block27
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7360 | 0) >> 2] = 0;
   }
   block28 : {
    $4 = HEAP32[($2 + 7400 | 0) >> 2] | 0;
    if (!$4) {
     break block28
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7400 | 0) >> 2] = 0;
   }
   block29 : {
    $4 = HEAP32[($2 + 7364 | 0) >> 2] | 0;
    if (!$4) {
     break block29
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7364 | 0) >> 2] = 0;
   }
   block30 : {
    $4 = HEAP32[($2 + 7404 | 0) >> 2] | 0;
    if (!$4) {
     break block30
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7404 | 0) >> 2] = 0;
   }
   block31 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($3 + 40 | 0) >> 2] | 0)) {
     break block31
    }
    $4 = 0;
    label2 : while (1) {
     block32 : {
      $6 = $4 << 2 | 0;
      $7 = HEAP32[(($2 + $6 | 0) + 7408 | 0) >> 2] | 0;
      if (!$7) {
       break block32
      }
      emscripten_builtin_free($7 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $6 | 0) + 7408 | 0) >> 2] = 0;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $4 = $4 + 1 | 0;
     if ($4 >>> 0 < (HEAP32[($3 + 40 | 0) >> 2] | 0) >>> 0) {
      continue label2
     }
     break label2;
    };
   }
   block33 : {
    $4 = HEAP32[($2 + 7536 | 0) >> 2] | 0;
    if (!$4) {
     break block33
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7536 | 0) >> 2] = 0;
    $3 = HEAP32[$0 >> 2] | 0;
   }
   block34 : {
    if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
     break block34
    }
    $3 = 0;
    label3 : while (1) {
     block35 : {
      $4 = $3 << 3 | 0;
      $6 = HEAP32[(($2 + $4 | 0) + 7540 | 0) >> 2] | 0;
      if (!$6) {
       break block35
      }
      emscripten_builtin_free($6 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $4 | 0) + 7540 | 0) >> 2] = 0;
     }
     block36 : {
      $6 = HEAP32[(($2 + $4 | 0) + 7544 | 0) >> 2] | 0;
      if (!$6) {
       break block36
      }
      emscripten_builtin_free($6 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $4 | 0) + 7544 | 0) >> 2] = 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label3
     }
     break label3;
    };
   }
   block37 : {
    $4 = HEAP32[($2 + 7604 | 0) >> 2] | 0;
    if (!$4) {
     break block37
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7604 | 0) >> 2] = 0;
   }
   block38 : {
    $4 = HEAP32[($2 + 7608 | 0) >> 2] | 0;
    if (!$4) {
     break block38
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7608 | 0) >> 2] = 0;
   }
   block39 : {
    $4 = HEAP32[($2 + 7612 | 0) >> 2] | 0;
    if (!$4) {
     break block39
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7612 | 0) >> 2] = 0;
   }
   block40 : {
    $4 = HEAP32[($2 + 7616 | 0) >> 2] | 0;
    if (!$4) {
     break block40
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7616 | 0) >> 2] = 0;
   }
   block41 : {
    $4 = HEAP32[($2 + 7620 | 0) >> 2] | 0;
    if (!$4) {
     break block41
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7620 | 0) >> 2] = 0;
   }
   block42 : {
    $4 = HEAP32[($2 + 7624 | 0) >> 2] | 0;
    if (!$4) {
     break block42
    }
    emscripten_builtin_free($4 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 7624 | 0) >> 2] = 0;
   }
   block43 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
     break block43
    }
    if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
     break block43
    }
    $4 = 0;
    label4 : while (1) {
     block44 : {
      $6 = $4 << 2 | 0;
      $7 = HEAP32[(($2 + $6 | 0) + 11764 | 0) >> 2] | 0;
      if (!$7) {
       break block44
      }
      emscripten_builtin_free($7 | 0);
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[(($2 + $6 | 0) + 11764 | 0) >> 2] = 0;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $4 = $4 + 1 | 0;
     if ($4 >>> 0 < (HEAP32[($3 + 24 | 0) >> 2] | 0) >>> 0) {
      continue label4
     }
     break label4;
    };
   }
   FLAC__bitwriter_free(HEAP32[($2 + 6856 | 0) >> 2] | 0 | 0);
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 1056964608;
   HEAP32[($2 + 44 | 0) >> 2] = 13;
   HEAP32[($2 + 48 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 1;
   HEAP32[($2 + 36 | 0) >> 2] = 0;
   HEAP32[($2 + 40 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 44100;
   HEAP32[($2 + 28 | 0) >> 2] = 16;
   HEAP32[($2 + 32 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 2;
   HEAP32[($2 + 20 | 0) >> 2] = 0;
   HEAP32[($2 + 24 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   HEAP32[($2 + 12 | 0) >> 2] = 1;
   HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 1;
   HEAP32[($2 + 4 | 0) >> 2] = 0;
   HEAP32[($2 + 8 | 0) >> 2] = i64toi32_i32$2;
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   HEAP32[($2 + 556 | 0) >> 2] = 0;
   HEAP32[($2 + 560 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   HEAP32[($2 + 592 | 0) >> 2] = 0;
   HEAP32[($2 + 596 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 580 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 572 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 564 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 600 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = $4;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$0 + 7248 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 7252 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$0 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$0 = i64toi32_i32$0 + 7256 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7264 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7272 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7280 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[($4 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($2 + 632 | 0 | 0);
   block45 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break block45
    }
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    HEAP32[($2 + 16 | 0) >> 2] = 1;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$2;
    FLAC__stream_encoder_set_apodization($0 | 0, GOT_data_internal___memory_base + 70979 | 0 | 0) | 0;
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break block45
    }
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 5;
    HEAP32[($2 + 576 | 0) >> 2] = 0;
    HEAP32[($2 + 580 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    HEAP32[($2 + 564 | 0) >> 2] = 0;
    HEAP32[($2 + 568 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    HEAP32[($2 + 556 | 0) >> 2] = 8;
    HEAP32[($2 + 560 | 0) >> 2] = i64toi32_i32$2;
   }
   block46 : {
    if ($5) {
     break block46
    }
    HEAP32[$2 >> 2] = 1;
   }
   $2 = !$5;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function process_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $7 = 0, $19 = 0, $8 = 0, $18 = 0, $4 = 0, $9 = 0, $22 = 0, $3 = 0, $20 = 0, $16 = 0, i64toi32_i32$2 = 0, $6 = 0, $11 = 0, $21 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10 = 0, i64toi32_i32$5 = 0, $17 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $786 = 0, $788 = 0, $788$hi = 0, $791 = 0, $791$hi = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  block1 : {
   block : {
    $4 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break block
    }
    $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $5 = FLAC__MD5Accumulate($5 + 7060 | 0 | 0, $5 + 4 | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0, ((HEAP32[($4 + 28 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    if ($5) {
     break block
    }
    HEAP32[$4 >> 2] = 8;
    $5 = 0;
    break block1;
   }
   $5 = HEAP32[($4 + 576 | 0) >> 2] | 0;
   block3 : {
    block2 : {
     if (!$1) {
      break block2
     }
     $6 = 0;
     break block3;
    }
    $1 = FLAC__format_get_max_rice_partition_order_from_blocksize(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    $7 = HEAP32[($4 + 580 | 0) >> 2] | 0;
    $6 = $1 >>> 0 < $7 >>> 0 ? $1 : $7;
   }
   $8 = HEAP32[($4 + 36 | 0) >> 2] | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $8;
   HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
   $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 0;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   $7 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   HEAP32[($3 + 28 | 0) >> 2] = 0;
   HEAP32[($3 + 24 | 0) >> 2] = $7;
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($3 + 32 | 0) >> 2] = HEAP32[($9 + 7056 | 0) >> 2] | 0;
   $10 = $5 >>> 0 < $6 >>> 0 ? $5 : $6;
   block29 : {
    block40 : {
     block38 : {
      block37 : {
       block36 : {
        block34 : {
         block25 : {
          block23 : {
           block13 : {
            block6 : {
             block5 : {
              block4 : {
               if (HEAP32[($4 + 16 | 0) >> 2] | 0) {
                break block4
               }
               $11 = 1;
               break block5;
              }
              $11 = 0;
              if (!(HEAP32[($4 + 20 | 0) >> 2] | 0)) {
               break block5
              }
              if (!(HEAP32[($9 + 6864 | 0) >> 2] | 0)) {
               break block5
              }
              $11 = 1;
              if (HEAP32[($9 + 6868 | 0) >> 2] | 0) {
               break block6
              }
             }
             block7 : {
              if (!$1) {
               break block7
              }
              $12 = $9 + 216 | 0;
              $13 = $9 + 624 | 0;
              $14 = $9 + 916 | 0;
              $15 = $9 + 4 | 0;
              $16 = 0;
              label4 : while (1) {
               $17 = $16 << 2 | 0;
               $8 = 0;
               block8 : {
                $18 = HEAP32[($4 + 36 | 0) >> 2] | 0;
                if (!$18) {
                 break block8
                }
                $19 = HEAP32[($15 + $17 | 0) >> 2] | 0;
                $5 = 0;
                $1 = 0;
                block9 : {
                 label : while (1) {
                  $5 = HEAP32[($19 + ($1 << 2 | 0) | 0) >> 2] | 0 | $5 | 0;
                  $7 = $5 & 1 | 0;
                  $1 = $1 + 1 | 0;
                  if ($1 >>> 0 >= $18 >>> 0) {
                   break block9
                  }
                  if (!$7) {
                   continue label
                  }
                  break label;
                 };
                }
                $8 = 0;
                if (!$5) {
                 break block8
                }
                $1 = 0;
                if ($7) {
                 break block8
                }
                label1 : while (1) {
                 $1 = $1 + 1 | 0;
                 $7 = $5 & 2 | 0;
                 $5 = $5 >> 1 | 0;
                 if (!$7) {
                  continue label1
                 }
                 break label1;
                };
                if (!$1) {
                 break block8
                }
                $20 = $18 & 3 | 0;
                $8 = 0;
                $5 = 0;
                block10 : {
                 if ($18 >>> 0 < 4 >>> 0) {
                  break block10
                 }
                 $21 = $18 & -4 | 0;
                 $5 = 0;
                 $18 = 0;
                 label2 : while (1) {
                  $7 = $19 + ($5 << 2 | 0) | 0;
                  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
                  $22 = $7 + 4 | 0;
                  HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) >> $1 | 0;
                  $22 = $7 + 8 | 0;
                  HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) >> $1 | 0;
                  $7 = $7 + 12 | 0;
                  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
                  $5 = $5 + 4 | 0;
                  $18 = $18 + 4 | 0;
                  if (($18 | 0) != ($21 | 0)) {
                   continue label2
                  }
                  break label2;
                 };
                }
                block11 : {
                 if (!$20) {
                  break block11
                 }
                 label3 : while (1) {
                  $7 = $19 + ($5 << 2 | 0) | 0;
                  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
                  $5 = $5 + 1 | 0;
                  $8 = $8 + 1 | 0;
                  if (($8 | 0) != ($20 | 0)) {
                   continue label3
                  }
                  break label3;
                 };
                }
                $8 = $1;
               }
               $7 = Math_imul($16, 584);
               $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
               $1 = $8 >>> 0 < $5 >>> 0 ? $8 : $5;
               HEAP32[($14 + $7 | 0) >> 2] = $1;
               HEAP32[($13 + $7 | 0) >> 2] = $1;
               HEAP32[($12 + $17 | 0) >> 2] = $5 - $1 | 0;
               $16 = $16 + 1 | 0;
               if ($16 >>> 0 < (HEAP32[($4 + 24 | 0) >> 2] | 0) >>> 0) {
                continue label4
               }
               break label4;
              };
             }
             block12 : {
              if (!$11) {
               break block12
              }
              $19 = 1;
              break block13;
             }
             $8 = HEAP32[($4 + 36 | 0) >> 2] | 0;
             $11 = 0;
            }
            $18 = HEAP32[($9 + 36 | 0) >> 2] | 0;
            $5 = 0;
            $22 = 0;
            block14 : {
             if (!$8) {
              break block14
             }
             $1 = 0;
             $7 = 0;
             block15 : {
              label5 : while (1) {
               $1 = HEAP32[($18 + ($7 << 2 | 0) | 0) >> 2] | 0 | $1 | 0;
               $19 = $1 & 1 | 0;
               $7 = $7 + 1 | 0;
               if ($7 >>> 0 >= $8 >>> 0) {
                break block15
               }
               if (!$19) {
                continue label5
               }
               break label5;
              };
             }
             $22 = 0;
             if (!$1) {
              break block14
             }
             if ($19) {
              break block14
             }
             $7 = 0;
             label6 : while (1) {
              $7 = $7 + 1 | 0;
              $19 = $1 & 2 | 0;
              $1 = $1 >> 1 | 0;
              if (!$19) {
               continue label6
              }
              break label6;
             };
             if (!$7) {
              break block14
             }
             $16 = $8 & 3 | 0;
             $22 = 0;
             $1 = 0;
             block16 : {
              if ($8 >>> 0 < 4 >>> 0) {
               break block16
              }
              $21 = $8 & -4 | 0;
              $1 = 0;
              $8 = 0;
              label7 : while (1) {
               $19 = $18 + ($1 << 2 | 0) | 0;
               HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) >> $7 | 0;
               $20 = $19 + 4 | 0;
               HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) >> $7 | 0;
               $20 = $19 + 8 | 0;
               HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) >> $7 | 0;
               $19 = $19 + 12 | 0;
               HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) >> $7 | 0;
               $1 = $1 + 4 | 0;
               $8 = $8 + 4 | 0;
               if (($8 | 0) != ($21 | 0)) {
                continue label7
               }
               break label7;
              };
             }
             block17 : {
              if (!$16) {
               break block17
              }
              label8 : while (1) {
               $19 = $18 + ($1 << 2 | 0) | 0;
               HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) >> $7 | 0;
               $1 = $1 + 1 | 0;
               $22 = $22 + 1 | 0;
               if (($22 | 0) != ($16 | 0)) {
                continue label8
               }
               break label8;
              };
             }
             $22 = $7;
            }
            $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
            $7 = $22 >>> 0 < $1 >>> 0 ? $22 : $1;
            HEAP32[($9 + 5296 | 0) >> 2] = $7;
            HEAP32[($9 + 5588 | 0) >> 2] = $7;
            HEAP32[($9 + 248 | 0) >> 2] = $1 - $7 | 0;
            block19 : {
             block18 : {
              $8 = HEAP32[($4 + 36 | 0) >> 2] | 0;
              if ($8) {
               break block18
              }
              $22 = 0;
              break block19;
             }
             $19 = HEAP32[($9 + 40 | 0) >> 2] | 0;
             $1 = 0;
             block20 : {
              label9 : while (1) {
               $5 = HEAP32[($19 + ($1 << 2 | 0) | 0) >> 2] | 0 | $5 | 0;
               $7 = $5 & 1 | 0;
               $1 = $1 + 1 | 0;
               if ($1 >>> 0 >= $8 >>> 0) {
                break block20
               }
               if (!$7) {
                continue label9
               }
               break label9;
              };
             }
             $22 = 0;
             if (!$5) {
              break block19
             }
             if ($7) {
              break block19
             }
             $1 = 0;
             label10 : while (1) {
              $1 = $1 + 1 | 0;
              $7 = $5 & 2 | 0;
              $5 = $5 >> 1 | 0;
              if (!$7) {
               continue label10
              }
              break label10;
             };
             if (!$1) {
              break block19
             }
             $16 = $8 & 3 | 0;
             $22 = 0;
             $5 = 0;
             block21 : {
              if ($8 >>> 0 < 4 >>> 0) {
               break block21
              }
              $21 = $8 & -4 | 0;
              $5 = 0;
              $8 = 0;
              label11 : while (1) {
               $7 = $19 + ($5 << 2 | 0) | 0;
               HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
               $20 = $7 + 4 | 0;
               HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) >> $1 | 0;
               $20 = $7 + 8 | 0;
               HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) >> $1 | 0;
               $7 = $7 + 12 | 0;
               HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
               $5 = $5 + 4 | 0;
               $8 = $8 + 4 | 0;
               if (($8 | 0) != ($21 | 0)) {
                continue label11
               }
               break label11;
              };
             }
             block22 : {
              if (!$16) {
               break block22
              }
              label12 : while (1) {
               $7 = $19 + ($5 << 2 | 0) | 0;
               HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) >> $1 | 0;
               $5 = $5 + 1 | 0;
               $22 = $22 + 1 | 0;
               if (($22 | 0) != ($16 | 0)) {
                continue label12
               }
               break label12;
              };
             }
             $22 = $1;
            }
            $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
            $1 = $22 >>> 0 < $5 >>> 0 ? $22 : $5;
            HEAP32[($9 + 5880 | 0) >> 2] = $1;
            HEAP32[($9 + 6172 | 0) >> 2] = $1;
            HEAP32[($9 + 252 | 0) >> 2] = ($5 - $1 | 0) + 1 | 0;
            if ($11) {
             break block23
            }
            $19 = 0;
           }
           block24 : {
            if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
             break block24
            }
            $5 = 0;
            label13 : while (1) {
             $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             $1 = $7 + ($5 << 2 | 0) | 0;
             $7 = $7 + ($5 << 3 | 0) | 0;
             process_subframe_($0 | 0, $10 | 0, $6 | 0, $3 + 8 | 0 | 0, HEAP32[($1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, $7 + 6176 | 0 | 0, $7 + 6640 | 0 | 0, $7 + 256 | 0 | 0, $1 + 6768 | 0 | 0, $1 + 6808 | 0 | 0);
             $5 = $5 + 1 | 0;
             if ($5 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
              continue label13
             }
             break label13;
            };
            $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           }
           if ($19) {
            break block25
           }
           $18 = HEAP32[($9 + 36 | 0) >> 2] | 0;
          }
          process_subframe_($0 | 0, $10 | 0, $6 | 0, $3 + 8 | 0 | 0, HEAP32[($9 + 248 | 0) >> 2] | 0 | 0, $18 | 0, $9 + 6240 | 0 | 0, $9 + 6704 | 0 | 0, $9 + 320 | 0 | 0, $9 + 6800 | 0 | 0, $9 + 6840 | 0 | 0);
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          process_subframe_($0 | 0, $10 | 0, $6 | 0, $3 + 8 | 0 | 0, HEAP32[($5 + 252 | 0) >> 2] | 0 | 0, HEAP32[($5 + 40 | 0) >> 2] | 0 | 0, $5 + 6248 | 0 | 0, $5 + 6712 | 0 | 0, $5 + 328 | 0 | 0, $5 + 6804 | 0 | 0, $5 + 6844 | 0 | 0);
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          block27 : {
           block26 : {
            if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0)) {
             break block26
            }
            if (!(HEAP32[($5 + 6864 | 0) >> 2] | 0)) {
             break block26
            }
            $1 = HEAP32[($5 + 6868 | 0) >> 2] | 0 ? 3 : 0;
            break block27;
           }
           $1 = HEAP32[($5 + 6844 | 0) >> 2] | 0;
           $7 = HEAP32[($5 + 6808 | 0) >> 2] | 0;
           $19 = $1 + $7 | 0;
           $18 = HEAP32[($5 + 6812 | 0) >> 2] | 0;
           $7 = $18 + $7 | 0;
           $8 = $19 >>> 0 < $7 >>> 0;
           $18 = $1 + $18 | 0;
           $7 = $8 ? $19 : $7;
           $19 = $18 >>> 0 < $7 >>> 0;
           $1 = ((HEAP32[($5 + 6840 | 0) >> 2] | 0) + $1 | 0) >>> 0 < ($19 ? $18 : $7) >>> 0 ? 3 : $19 ? 2 : $8;
          }
          HEAP32[($3 + 20 | 0) >> 2] = $1;
          block28 : {
           if (FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0) | 0) {
            break block28
           }
           $1 = HEAP32[$0 >> 2] | 0;
           break block29;
          }
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          block35 : {
           block33 : {
            switch ($1 | 0) {
            default:
             $1 = ($5 + Math_imul(HEAP32[($5 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0;
             $7 = 220;
             $19 = 216;
             break block34;
            case 1:
             $1 = ($5 + Math_imul(HEAP32[($5 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0;
             $7 = 252;
             $19 = 216;
             break block35;
            case 2:
             $1 = ($5 + Math_imul(HEAP32[($5 + 6804 | 0) >> 2] | 0, 292) | 0) + 5592 | 0;
             $7 = 220;
             $19 = 252;
             break block34;
            case 3:
             break block33;
            };
           }
           $1 = ($5 + Math_imul(HEAP32[($5 + 6800 | 0) >> 2] | 0, 292) | 0) + 5008 | 0;
           $7 = 252;
           $19 = 248;
          }
          $18 = 6804;
          $8 = 5592;
          break block36;
         }
         $5 = FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($9 + 6856 | 0) >> 2] | 0 | 0) | 0;
         $1 = HEAP32[$0 >> 2] | 0;
         if (!$5) {
          break block29
         }
         if (!(HEAP32[($1 + 24 | 0) >> 2] | 0)) {
          break block37
         }
         $5 = 0;
         label14 : while (1) {
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $7 = $1 + ($5 << 2 | 0) | 0;
          if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7 + 216 | 0) >> 2] | 0 | 0, (($1 + Math_imul($5, 584) | 0) + Math_imul(HEAP32[($7 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0 | 0, HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
           break block38
          }
          $5 = $5 + 1 | 0;
          $1 = HEAP32[$0 >> 2] | 0;
          if ($5 >>> 0 >= (HEAP32[($1 + 24 | 0) >> 2] | 0) >>> 0) {
           break block37
          }
          continue label14;
         };
        }
        $18 = 6772;
        $8 = 920;
       }
       $7 = HEAP32[($5 + $7 | 0) >> 2] | 0;
       $18 = HEAP32[($5 + $18 | 0) >> 2] | 0;
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + $19 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break block38
       }
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, $7 | 0, ($5 + $8 | 0) + Math_imul($18, 292) | 0 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break block38
       }
       $1 = HEAP32[$0 >> 2] | 0;
      }
      block39 : {
       if (!(HEAP32[($1 + 20 | 0) >> 2] | 0)) {
        break block39
       }
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $1 = (HEAP32[($5 + 6864 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($5 + 6864 | 0) >> 2] = $1 >>> 0 < (HEAP32[($5 + 6860 | 0) >> 2] | 0) >>> 0 ? $1 : 0;
      }
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 6868 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (FLAC__bitwriter_zero_pad_to_byte_boundary(HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0) | 0) {
       break block40
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
      $5 = 0;
      break block1;
     }
     $5 = 0;
     break block1;
    }
    block42 : {
     block41 : {
      if (!(FLAC__bitwriter_get_write_crc16(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0) | 0)) {
       break block41
      }
      $5 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0;
      $1 = GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN;
      if (FLAC__bitwriter_write_raw_uint32($5 | 0, HEAPU16[($3 + 8 | 0) >> 1] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0) | 0) {
       break block42
      }
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     $5 = 0;
     break block1;
    }
    block43 : {
     if (write_bitbuffer_($0 | 0, HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, $2 | 0) | 0) {
      break block43
     }
     $5 = 0;
     break block1;
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($1 + 7052 | 0) >> 2] = 0;
    $5 = 1;
    HEAP32[($1 + 7056 | 0) >> 2] = (HEAP32[($1 + 7056 | 0) >> 2] | 0) + 1 | 0;
    $786 = $1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[($1 + 6920 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 6924 | 0) >> 2] | 0;
    $788 = i64toi32_i32$0;
    $788$hi = i64toi32_i32$1;
    i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $791 = i64toi32_i32$1;
    $791$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $788$hi;
    i64toi32_i32$2 = $788;
    i64toi32_i32$1 = $791$hi;
    i64toi32_i32$3 = $791;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $786;
    HEAP32[(i64toi32_i32$2 + 6920 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 6924 | 0) >> 2] = i64toi32_i32$5;
    break block1;
   }
   HEAP32[$1 >> 2] = 7;
   $5 = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return $5 | 0;
 }
 
 function update_metadata_($0) {
  $0 = $0 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $10 = 0, $14 = 0, $14$hi = 0, $1 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $4 = 0, $12 = 0, $13 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $11 = 0, $36 = 0, $39$hi = 0, $67$hi = 0, $76 = 0, $86 = 0, $89 = 0, $92 = 0, $95 = 0, $97 = 0, $104 = 0, $107$hi = 0, $112$hi = 0, $146 = 0, $149$hi = 0, $153$hi = 0, $185 = 0, $204 = 0, $213 = 0, $213$hi = 0, $216$hi = 0, $217 = 0, $217$hi = 0, $220 = 0, $220$hi = 0, $223$hi = 0, $224 = 0, $224$hi = 0, $225 = 0, $225$hi = 0, $228 = 0, $228$hi = 0, $231 = 0, $231$hi = 0, $232 = 0, $232$hi = 0, $235 = 0, $235$hi = 0, $237$hi = 0, $238 = 0, $238$hi = 0, $239 = 0, $239$hi = 0, $240 = 0, $241 = 0, $248 = 0, $248$hi = 0, $251$hi = 0, $252 = 0, $252$hi = 0, $255 = 0, $255$hi = 0, $258$hi = 0, $259 = 0, $259$hi = 0, $260 = 0, $260$hi = 0, $263 = 0, $263$hi = 0, $266 = 0, $266$hi = 0, $267 = 0, $267$hi = 0, $270 = 0, $270$hi = 0, $272$hi = 0, $273 = 0, $273$hi = 0, $274 = 0, $274$hi = 0, $275 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
  $3 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN;
  $4 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN;
  $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $11 = HEAP32[($10 + 6912 | 0) >> 2] | 0;
  $12 = HEAP32[($10 + 6900 | 0) >> 2] | 0;
  $13 = HEAP32[($10 + 6896 | 0) >> 2] | 0;
  i64toi32_i32$2 = $10;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6920 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6924 | 0) >> 2] | 0;
  $14 = i64toi32_i32$0;
  $14$hi = i64toi32_i32$1;
  block2 : {
   block1 : {
    block : {
     $36 = $0;
     i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
     $39$hi = i64toi32_i32$0;
     $3 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0;
     $2 = (((($3 + (HEAP32[$4 >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0) | 0;
     i64toi32_i32$0 = 0;
     $67$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $39$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $67$hi;
     i64toi32_i32$3 = (($2 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0) | 0) >>> 3 | 0) + 4 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     switch (FUNCTION_TABLE[HEAP32[($10 + 7268 | 0) >> 2] | 0 | 0]($36, i64toi32_i32$4, i64toi32_i32$5, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 0:
      break block;
     case 1:
      break block1;
     default:
      break block2;
     };
    }
    $76 = $10 + 6928 | 0;
    $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($10 + 7276 | 0) >> 2] | 0 | 0]($0, $76, 16, 0, 0, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0) {
     break block1
    }
    i64toi32_i32$5 = $14$hi;
    HEAP8[($1 + 4 | 0) >> 0] = $14;
    $86 = $1;
    i64toi32_i32$0 = $14;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $87 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $87 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($86 + 3 | 0) >> 0] = $87;
    $89 = $1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$5 = $14;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $88 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     $88 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($89 + 2 | 0) >> 0] = $88;
    $92 = $1;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 24;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $90 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $90 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($92 + 1 | 0) >> 0] = $90;
    $95 = $1;
    $97 = $11 << 4 | 0;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$0 = $14;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $91 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $91 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[$95 >> 0] = ($97 | ($91 & 15 | 0) | 0) + 240 | 0;
    block3 : {
     $104 = $0;
     i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 608 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 612 | 0) >> 2] | 0;
     $107$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $112$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $107$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $112$hi;
     i64toi32_i32$3 = (($2 + -4 | 0) >>> 3 | 0) + 4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($10 + 7268 | 0) >> 2] | 0 | 0]($104, i64toi32_i32$1, i64toi32_i32$4, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break block1;
     case 0:
      break block3;
     default:
      break block2;
     };
    }
    $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($10 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 5, 0, 0, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0) {
     break block1
    }
    HEAP8[($1 + 5 | 0) >> 0] = $12;
    HEAP8[($1 + 4 | 0) >> 0] = $12 >>> 8 | 0;
    HEAP8[($1 + 3 | 0) >> 0] = $12 >>> 16 | 0;
    HEAP8[($1 + 2 | 0) >> 0] = $13;
    HEAP8[($1 + 1 | 0) >> 0] = $13 >>> 8 | 0;
    HEAP8[$1 >> 0] = $13 >>> 16 | 0;
    block4 : {
     $146 = $0;
     i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
     $149$hi = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     $153$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $149$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = $153$hi;
     i64toi32_i32$3 = ($3 >>> 3 | 0) + 4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($10 + 7268 | 0) >> 2] | 0 | 0]($146, i64toi32_i32$2, i64toi32_i32$1, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break block1;
     case 0:
      break block4;
     default:
      break block2;
     };
    }
    $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($10 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 6, 0, 0, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0) {
     break block1
    }
    $10 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] | 0;
    if (!$10) {
     break block2
    }
    if (!(HEAP32[$10 >> 2] | 0)) {
     break block2
    }
    i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
     break block2
    }
    FLAC__format_seektable_sort($10 | 0) | 0;
    block5 : {
     $185 = $0;
     i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 4;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($10 + 7268 | 0) >> 2] | 0 | 0]($185, i64toi32_i32$4, i64toi32_i32$2, HEAP32[($10 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break block1;
     case 0:
      break block5;
     default:
      break block2;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $10 = HEAP32[($2 + 7048 | 0) >> 2] | 0;
    if (!(HEAP32[$10 >> 2] | 0)) {
     break block2
    }
    $4 = 0;
    label : while (1) {
     $204 = $1;
     $3 = Math_imul($4, 24);
     i64toi32_i32$1 = (HEAP32[($10 + 4 | 0) >> 2] | 0) + $3 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $14 = i64toi32_i32$2;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $93 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $93 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $213 = $93;
     $213$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$5 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $94 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $94 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $216$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $213$hi;
     i64toi32_i32$1 = $213;
     i64toi32_i32$2 = $216$hi;
     i64toi32_i32$3 = $94;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $217 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $217$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$5 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $96 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $96 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $220 = $96;
     $220$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $98 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $98 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $223$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $220$hi;
     i64toi32_i32$2 = $220;
     i64toi32_i32$5 = $223$hi;
     i64toi32_i32$3 = $98;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $224 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $224$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $217$hi;
     i64toi32_i32$1 = $217;
     i64toi32_i32$2 = $224$hi;
     i64toi32_i32$3 = $224;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $225 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $225$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$5 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $99 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $99 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $99;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $228 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $228$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $100 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $100 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $100;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $231 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $231$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $228$hi;
     i64toi32_i32$2 = $228;
     i64toi32_i32$5 = $231$hi;
     i64toi32_i32$3 = $231;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $232 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $232$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $101 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $101 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $101;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $235 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $235$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $102 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $102 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     $237$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $235$hi;
     i64toi32_i32$1 = $235;
     i64toi32_i32$2 = $237$hi;
     i64toi32_i32$3 = $102;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $238 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $238$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $232$hi;
     i64toi32_i32$5 = $232;
     i64toi32_i32$1 = $238$hi;
     i64toi32_i32$3 = $238;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $239 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $239$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $225$hi;
     i64toi32_i32$2 = $225;
     i64toi32_i32$5 = $239$hi;
     i64toi32_i32$3 = $239;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $240 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $204;
     HEAP32[i64toi32_i32$2 >> 2] = $240;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     $241 = $1;
     i64toi32_i32$1 = (HEAP32[($10 + 4 | 0) >> 2] | 0) + $3 | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     $14 = i64toi32_i32$5;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $103 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $103 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $248 = $103;
     $248$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$2 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $105 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $105 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $251$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $248$hi;
     i64toi32_i32$1 = $248;
     i64toi32_i32$5 = $251$hi;
     i64toi32_i32$3 = $105;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $252 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $252$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$2 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $106 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $106 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $255 = $106;
     $255$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $107 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $107 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $258$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $255$hi;
     i64toi32_i32$5 = $255;
     i64toi32_i32$2 = $258$hi;
     i64toi32_i32$3 = $107;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $259 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $259$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $252$hi;
     i64toi32_i32$1 = $252;
     i64toi32_i32$5 = $259$hi;
     i64toi32_i32$3 = $259;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $260 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $260$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$2 = $14;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $108 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $108 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $108;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $263 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $263$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $109 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $109 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $109;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $266 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $263$hi;
     i64toi32_i32$5 = $263;
     i64toi32_i32$2 = $266$hi;
     i64toi32_i32$3 = $266;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $267 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $267$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $14;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $110 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $110 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $110;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $270 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $270$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$5 = $14;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $111 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $111 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $272$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $270$hi;
     i64toi32_i32$1 = $270;
     i64toi32_i32$5 = $272$hi;
     i64toi32_i32$3 = $111;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $273 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $267$hi;
     i64toi32_i32$2 = $267;
     i64toi32_i32$1 = $273$hi;
     i64toi32_i32$3 = $273;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $274 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $274$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $260$hi;
     i64toi32_i32$5 = $260;
     i64toi32_i32$2 = $274$hi;
     i64toi32_i32$3 = $274;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $275 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $241;
     HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $275;
     HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
     $10 = HEAPU16[(((HEAP32[($10 + 4 | 0) >> 2] | 0) + $3 | 0) + 16 | 0) >> 1] | 0;
     HEAP16[($1 + 16 | 0) >> 1] = $10 << 8 | 0 | ($10 >>> 8 | 0) | 0;
     if (FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 18, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0) {
      break block1
     }
     $4 = $4 + 1 | 0;
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 7048 | 0) >> 2] | 0;
     if ($4 >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) {
      break block2
     }
     continue label;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function FLAC__stream_encoder_init_stream($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return init_stream_internal__305($0 | 0, 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal__305($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $10 = 0, $9 = 0, $11 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12 = 0, $14 = 0, $16 = 0, $13 = 0, $17 = 0, $21 = 0, $8 = 0, $18 = 0, $20 = 0, $15 = 0, $19 = 0, $22 = 0.0, $567 = 0, i64toi32_i32$2 = 0, $552 = 0, $767 = 0;
  $8 = __stack_pointer - 176 | 0;
  __stack_pointer = $8;
  block1 : {
   block : {
    $9 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$9 >> 2] | 0 | 0) == (1 | 0)) {
     break block
    }
    $10 = 13;
    break block1;
   }
   $10 = 3;
   if (!$2) {
    break block1
   }
   block2 : {
    if (!$3) {
     break block2
    }
    if (!$4) {
     break block1
    }
   }
   block3 : {
    $10 = HEAP32[($9 + 24 | 0) >> 2] | 0;
    if (($10 + -9 | 0) >>> 0 >= -8 >>> 0) {
     break block3
    }
    $10 = 4;
    break block1;
   }
   block6 : {
    block5 : {
     block4 : {
      if (($10 | 0) == (2 | 0)) {
       break block4
      }
      HEAP32[($9 + 16 | 0) >> 2] = 0;
      break block5;
     }
     if (HEAP32[($9 + 16 | 0) >> 2] | 0) {
      break block6
     }
    }
    HEAP32[($9 + 20 | 0) >> 2] = 0;
   }
   block7 : {
    $10 = HEAP32[($9 + 28 | 0) >> 2] | 0;
    if ($10 >>> 0 < 32 >>> 0) {
     break block7
    }
    HEAP32[($9 + 16 | 0) >> 2] = 0;
    $10 = 5;
    break block1;
   }
   block8 : {
    if (($10 + -25 | 0) >>> 0 >= -21 >>> 0) {
     break block8
    }
    $10 = 5;
    break block1;
   }
   block9 : {
    if (FLAC__format_sample_rate_is_valid(HEAP32[($9 + 32 | 0) >> 2] | 0 | 0) | 0) {
     break block9
    }
    $10 = 6;
    break block1;
   }
   block11 : {
    block10 : {
     $9 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($9 + 36 | 0) >> 2] | 0;
     if ($11) {
      break block10
     }
     $11 = HEAP32[($9 + 556 | 0) >> 2] | 0 ? 4096 : 1152;
     HEAP32[($9 + 36 | 0) >> 2] = $11;
     break block11;
    }
    if (($11 + -65536 | 0) >>> 0 >= -65520 >>> 0) {
     break block11
    }
    $10 = 7;
    break block1;
   }
   block12 : {
    $10 = HEAP32[($9 + 556 | 0) >> 2] | 0;
    if ($10 >>> 0 <= 32 >>> 0) {
     break block12
    }
    $10 = 8;
    break block1;
   }
   block13 : {
    if ($11 >>> 0 >= $10 >>> 0) {
     break block13
    }
    $10 = 10;
    break block1;
   }
   block24 : {
    block16 : {
     block22 : {
      block14 : {
       $10 = HEAP32[($9 + 560 | 0) >> 2] | 0;
       if ($10) {
        break block14
       }
       block15 : {
        $10 = HEAP32[($9 + 28 | 0) >> 2] | 0;
        if ($10 >>> 0 > 15 >>> 0) {
         break block15
        }
        $10 = $10 >>> 0 > 5 >>> 0 ? ($10 >>> 1 | 0) + 2 | 0 : 5;
        break block16;
       }
       block17 : {
        if (($10 | 0) != (16 | 0)) {
         break block17
        }
        block18 : {
         if ($11 >>> 0 >= 193 >>> 0) {
          break block18
         }
         $10 = 7;
         break block16;
        }
        block19 : {
         if ($11 >>> 0 >= 385 >>> 0) {
          break block19
         }
         $10 = 8;
         break block16;
        }
        block20 : {
         if ($11 >>> 0 >= 577 >>> 0) {
          break block20
         }
         $10 = 9;
         break block16;
        }
        block21 : {
         if ($11 >>> 0 >= 1153 >>> 0) {
          break block21
         }
         $10 = 10;
         break block16;
        }
        if ($11 >>> 0 >= 2305 >>> 0) {
         break block22
        }
        $10 = 11;
        break block16;
       }
       block23 : {
        if ($11 >>> 0 >= 385 >>> 0) {
         break block23
        }
        $10 = 13;
        break block16;
       }
       $10 = $11 >>> 0 < 1153 >>> 0 ? 14 : 15;
       break block16;
      }
      if (($10 + -16 | 0) >>> 0 >= -11 >>> 0) {
       break block24
      }
      $10 = 9;
      break block1;
     }
     $10 = $11 >>> 0 < 4609 >>> 0 ? 12 : 13;
    }
    HEAP32[($9 + 560 | 0) >> 2] = $10;
   }
   block26 : {
    block25 : {
     if (HEAP32[($9 + 8 | 0) >> 2] | 0) {
      break block25
     }
     $11 = HEAP32[($9 + 580 | 0) >> 2] | 0;
     break block26;
    }
    $10 = 11;
    if (!(FLAC__format_blocksize_is_subset($11 | 0, HEAP32[($9 + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break block1
    }
    if (!(FLAC__format_sample_rate_is_subset(HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break block1
    }
    $9 = HEAP32[$0 >> 2] | 0;
    if ((__wasm_rotl_i32((HEAP32[($9 + 28 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0) >>> 0 > 4 >>> 0) {
     break block1
    }
    $11 = HEAP32[($9 + 580 | 0) >> 2] | 0;
    if ($11 >>> 0 > 8 >>> 0) {
     break block1
    }
    if ((HEAP32[($9 + 32 | 0) >> 2] | 0) >>> 0 > 48e3 >>> 0) {
     break block26
    }
    if ((HEAP32[($9 + 36 | 0) >> 2] | 0) >>> 0 > 4608 >>> 0) {
     break block1
    }
    if ((HEAP32[($9 + 556 | 0) >> 2] | 0) >>> 0 > 12 >>> 0) {
     break block1
    }
   }
   block27 : {
    $10 = 1 << (HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0) | 0;
    if ($11 >>> 0 < $10 >>> 0) {
     break block27
    }
    $11 = $10 + -1 | 0;
    HEAP32[($9 + 580 | 0) >> 2] = $11;
   }
   block28 : {
    if ((HEAP32[($9 + 576 | 0) >> 2] | 0) >>> 0 < $11 >>> 0) {
     break block28
    }
    HEAP32[($9 + 576 | 0) >> 2] = $11;
   }
   block29 : {
    if (!$7) {
     break block29
    }
    $12 = HEAP32[($9 + 600 | 0) >> 2] | 0;
    if (!$12) {
     break block29
    }
    $13 = HEAP32[($9 + 604 | 0) >> 2] | 0;
    if ($13 >>> 0 < 2 >>> 0) {
     break block29
    }
    $10 = 1;
    $11 = 0;
    label2 : while (1) {
     block30 : {
      $14 = HEAP32[($12 + ($10 << 2 | 0) | 0) >> 2] | 0;
      if (!$14) {
       break block30
      }
      if ((HEAP32[$14 >> 2] | 0 | 0) != (4 | 0)) {
       break block30
      }
      block31 : {
       $13 = $10 & 3 | 0;
       if (!$13) {
        break block31
       }
       $9 = 0;
       label : while (1) {
        $12 = (HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) + ($10 << 2 | 0) | 0;
        HEAP32[$12 >> 2] = HEAP32[($12 + -4 | 0) >> 2] | 0;
        $10 = $10 + -1 | 0;
        $9 = $9 + 1 | 0;
        if (($9 | 0) != ($13 | 0)) {
         continue label
        }
        break label;
       };
      }
      block32 : {
       if ($11 >>> 0 < 3 >>> 0) {
        break block32
       }
       label1 : while (1) {
        $9 = $10 << 2 | 0;
        $11 = (HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[$11 >> 2] = HEAP32[($11 + -4 | 0) >> 2] | 0;
        $11 = (HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[($11 + -4 | 0) >> 2] = HEAP32[($11 + -8 | 0) >> 2] | 0;
        $11 = (HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[($11 + -8 | 0) >> 2] = HEAP32[($11 + -12 | 0) >> 2] | 0;
        $9 = (HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[($9 + -12 | 0) >> 2] = HEAP32[($9 + -16 | 0) >> 2] | 0;
        $10 = $10 + -4 | 0;
        if ($10) {
         continue label1
        }
        break label1;
       };
      }
      HEAP32[(HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0) >> 2] = $14;
      $9 = HEAP32[$0 >> 2] | 0;
      break block29;
     }
     $11 = $11 + 1 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($13 | 0)) {
      continue label2
     }
     break label2;
    };
   }
   $14 = HEAP32[($9 + 604 | 0) >> 2] | 0;
   block35 : {
    block37 : {
     block33 : {
      $12 = HEAP32[($9 + 600 | 0) >> 2] | 0;
      if (!$12) {
       break block33
      }
      block34 : {
       if ($14) {
        break block34
       }
       $15 = 1;
       break block35;
      }
      $10 = 0;
      label3 : while (1) {
       block36 : {
        $11 = HEAP32[($12 + ($10 << 2 | 0) | 0) >> 2] | 0;
        if (!$11) {
         break block36
        }
        if ((HEAP32[$11 >> 2] | 0 | 0) != (3 | 0)) {
         break block36
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] = $11 + 16 | 0;
        break block37;
       }
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($14 | 0)) {
        continue label3
       }
       break block37;
      };
     }
     block38 : {
      if (!$14) {
       break block38
      }
      $10 = 12;
      break block1;
     }
     $15 = 1;
     break block35;
    }
    $11 = 0;
    $16 = 0;
    $17 = 0;
    $14 = 0;
    $12 = 0;
    label4 : while (1) {
     $10 = 12;
     block39 : {
      block43 : {
       block42 : {
        block41 : {
         block40 : {
          $9 = HEAP32[((HEAP32[($9 + 600 | 0) >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] | 0;
          switch (HEAP32[$9 >> 2] | 0 | 0) {
          case 0:
           break block1;
          case 3:
           break block40;
          case 4:
           break block41;
          case 5:
           break block42;
          case 6:
           break block43;
          default:
           break block39;
          };
         }
         if ($12) {
          break block1
         }
         if (!(FLAC__format_seektable_is_legal($9 + 16 | 0 | 0) | 0)) {
          break block1
         }
         $12 = 1;
         break block39;
        }
        if ($14) {
         break block1
        }
        $14 = 1;
        break block39;
       }
       if (FLAC__format_cuesheet_is_legal($9 + 16 | 0 | 0, HEAP32[($9 + 160 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
        break block39
       }
       break block1;
      }
      $13 = $9 + 16 | 0;
      if (!(FLAC__format_picture_is_legal($13 | 0, 0 | 0) | 0)) {
       break block1
      }
      block45 : {
       switch ((HEAP32[$13 >> 2] | 0) + -1 | 0 | 0) {
       case 0:
        if ($17) {
         break block1
        }
        $13 = GOT_data_internal___memory_base;
        block46 : {
         $17 = HEAP32[($9 + 20 | 0) >> 2] | 0;
         if (!(strcmp($17 | 0, $13 + 70379 | 0 | 0) | 0)) {
          break block46
         }
         if (strcmp($17 | 0, GOT_data_internal___memory_base + 70448 | 0 | 0) | 0) {
          break block1
         }
        }
        if ((HEAP32[($9 + 28 | 0) >> 2] | 0 | 0) != (32 | 0)) {
         break block1
        }
        if ((HEAP32[($9 + 32 | 0) >> 2] | 0 | 0) != (32 | 0)) {
         break block1
        }
        $17 = 1;
        break block39;
       case 1:
        break block45;
       default:
        break block39;
       };
      }
      if ($16) {
       break block1
      }
      $16 = 1;
     }
     $11 = $11 + 1 | 0;
     $9 = HEAP32[$0 >> 2] | 0;
     if ($11 >>> 0 < (HEAP32[($9 + 604 | 0) >> 2] | 0) >>> 0) {
      continue label4
     }
     break label4;
    };
    $15 = !$14;
   }
   $11 = 0;
   $16 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[$16 >> 2] = 0;
   block47 : {
    $18 = HEAP32[($9 + 24 | 0) >> 2] | 0;
    if (!$18) {
     break block47
    }
    $19 = $18 & 1 | 0;
    $14 = $16 + 7368 | 0;
    $12 = $16 + 44 | 0;
    $13 = $16 + 7328 | 0;
    $17 = $16 + 4 | 0;
    block48 : {
     if (($18 | 0) == (1 | 0)) {
      break block48
     }
     $20 = $18 & -2 | 0;
     $11 = 0;
     $21 = 0;
     label5 : while (1) {
      $10 = $11 << 2 | 0;
      HEAP32[($17 + $10 | 0) >> 2] = 0;
      HEAP32[($13 + $10 | 0) >> 2] = 0;
      HEAP32[($12 + $10 | 0) >> 2] = 0;
      HEAP32[($14 + $10 | 0) >> 2] = 0;
      $10 = $10 | 4 | 0;
      HEAP32[($17 + $10 | 0) >> 2] = 0;
      HEAP32[($13 + $10 | 0) >> 2] = 0;
      HEAP32[($12 + $10 | 0) >> 2] = 0;
      HEAP32[($14 + $10 | 0) >> 2] = 0;
      $11 = $11 + 2 | 0;
      $21 = $21 + 2 | 0;
      if (($21 | 0) != ($20 | 0)) {
       continue label5
      }
      break label5;
     };
    }
    if (!$19) {
     break block47
    }
    $10 = $11 << 2 | 0;
    HEAP32[($17 + $10 | 0) >> 2] = 0;
    HEAP32[($13 + $10 | 0) >> 2] = 0;
    HEAP32[($12 + $10 | 0) >> 2] = 0;
    HEAP32[($14 + $10 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $16;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7400 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7404 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7360 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7364 | 0) >> 2] = i64toi32_i32$0;
   block49 : {
    $12 = HEAP32[($9 + 40 | 0) >> 2] | 0;
    if (!$12) {
     break block49
    }
    $20 = $12 & 3 | 0;
    $11 = i64toi32_i32$1 + 7408 | 0;
    $14 = i64toi32_i32$1 + 84 | 0;
    $13 = 0;
    $10 = 0;
    block50 : {
     if ($12 >>> 0 < 4 >>> 0) {
      break block50
     }
     $19 = $12 & -4 | 0;
     $10 = 0;
     $17 = 0;
     label6 : while (1) {
      $12 = $10 << 2 | 0;
      HEAP32[($14 + $12 | 0) >> 2] = 0;
      HEAP32[($11 + $12 | 0) >> 2] = 0;
      $21 = $12 | 4 | 0;
      HEAP32[($14 + $21 | 0) >> 2] = 0;
      HEAP32[($11 + $21 | 0) >> 2] = 0;
      $21 = $12 | 8 | 0;
      HEAP32[($14 + $21 | 0) >> 2] = 0;
      HEAP32[($11 + $21 | 0) >> 2] = 0;
      $12 = $12 | 12 | 0;
      HEAP32[($14 + $12 | 0) >> 2] = 0;
      HEAP32[($11 + $12 | 0) >> 2] = 0;
      $10 = $10 + 4 | 0;
      $17 = $17 + 4 | 0;
      if (($17 | 0) != ($19 | 0)) {
       continue label6
      }
      break label6;
     };
    }
    if (!$20) {
     break block49
    }
    label7 : while (1) {
     $12 = $10 << 2 | 0;
     HEAP32[($14 + $12 | 0) >> 2] = 0;
     HEAP32[($11 + $12 | 0) >> 2] = 0;
     $10 = $10 + 1 | 0;
     $13 = $13 + 1 | 0;
     if (($13 | 0) != ($20 | 0)) {
      continue label7
     }
     break label7;
    };
   }
   HEAP32[($16 + 7536 | 0) >> 2] = 0;
   HEAP32[($16 + 212 | 0) >> 2] = 0;
   block51 : {
    if (!$18) {
     break block51
    }
    $14 = $16 + 6768 | 0;
    $12 = $16 + 7544 | 0;
    $13 = $16 + 260 | 0;
    $17 = $16 + 7540 | 0;
    $21 = $16 + 256 | 0;
    $10 = 0;
    label8 : while (1) {
     $11 = $10 << 3 | 0;
     HEAP32[($21 + $11 | 0) >> 2] = 0;
     HEAP32[($17 + $11 | 0) >> 2] = 0;
     HEAP32[($13 + $11 | 0) >> 2] = 0;
     HEAP32[($12 + $11 | 0) >> 2] = 0;
     HEAP32[($14 + ($10 << 2 | 0) | 0) >> 2] = 0;
     $10 = $10 + 1 | 0;
     if ($10 >>> 0 < (HEAP32[($9 + 24 | 0) >> 2] | 0) >>> 0) {
      continue label8
     }
     break label8;
    };
   }
   i64toi32_i32$1 = $16;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7604 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7608 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 6848 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 6852 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 6800 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 6804 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 328 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $16 + 7612 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $16 + 7620 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $11 = HEAP32[($9 + 36 | 0) >> 2] | 0;
   $9 = HEAP32[($9 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $16;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7052 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7056 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 6864 | 0) >> 2] = 0;
   $10 = 1;
   $552 = i64toi32_i32$1;
   $22 = +($9 >>> 0) * .4 / +($11 >>> 0) + .5;
   if ($22 < 4294967295.0 & $22 >= 0.0 | 0) {
    $567 = ~~$22 >>> 0
   } else {
    $567 = 0
   }
   $9 = $567;
   HEAP32[($552 + 6860 | 0) >> 2] = $9 >>> 0 > 1 >>> 0 ? $9 : 1;
   FLAC__cpu_info($16 + 7156 | 0 | 0);
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $11 = GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients;
   HEAP32[($9 + 7244 | 0) >> 2] = $11;
   HEAP32[($9 + 7240 | 0) >> 2] = GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients_wide;
   HEAP32[($9 + 7236 | 0) >> 2] = $11;
   HEAP32[($9 + 7228 | 0) >> 2] = GOT_func_internal_FLAC__fixed_compute_best_predictor_wide;
   HEAP32[($9 + 7224 | 0) >> 2] = GOT_func_internal_FLAC__fixed_compute_best_predictor;
   HEAP32[($9 + 7220 | 0) >> 2] = GOT_data_internal___table_base + 16 | 0;
   HEAP32[($9 + 7232 | 0) >> 2] = GOT_func_internal_FLAC__lpc_compute_autocorrelation;
   $11 = HEAP32[$0 >> 2] | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[($9 + 7260 | 0) >> 2] = $7;
   block60 : {
    block53 : {
     block52 : {
      if (!$7) {
       break block52
      }
      if (!(FLAC__ogg_encoder_aspect_init($11 + 632 | 0 | 0) | 0)) {
       break block53
      }
      $11 = HEAP32[$0 >> 2] | 0;
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($9 + 7276 | 0) >> 2] = $2;
     HEAP32[($9 + 7264 | 0) >> 2] = $1;
     HEAP32[($9 + 7288 | 0) >> 2] = $6;
     HEAP32[($9 + 7280 | 0) >> 2] = $5;
     HEAP32[($9 + 7272 | 0) >> 2] = $4;
     HEAP32[($9 + 7268 | 0) >> 2] = $3;
     if (!(resize_buffers_($0 | 0, HEAP32[($11 + 36 | 0) >> 2] | 0 | 0) | 0)) {
      break block1
     }
     $9 = FLAC__bitwriter_init(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0;
     $2 = HEAP32[$0 >> 2] | 0;
     block54 : {
      if ($9) {
       break block54
      }
      HEAP32[$2 >> 2] = 8;
      break block1;
     }
     block56 : {
      block55 : {
       if (HEAP32[($2 + 4 | 0) >> 2] | 0) {
        break block55
       }
       $9 = 1;
       break block56;
      }
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($9 + 11796 | 0) >> 2] = (HEAP32[($2 + 36 | 0) >> 2] | 0) + 1 | 0;
      block57 : {
       if (!(HEAP32[($2 + 24 | 0) >> 2] | 0)) {
        break block57
       }
       $2 = 0;
       block58 : {
        label9 : while (1) {
         $10 = safe_malloc_mul_2op_p(4 | 0, HEAP32[($9 + 11796 | 0) >> 2] | 0 | 0) | 0;
         $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         HEAP32[(($9 + ($2 << 2 | 0) | 0) + 11764 | 0) >> 2] = $10;
         if (!$10) {
          break block58
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 >= (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
          break block57
         }
         continue label9;
        };
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
       $10 = 1;
       break block1;
      }
      HEAP32[($9 + 11800 | 0) >> 2] = 0;
      block59 : {
       $2 = HEAP32[($9 + 11752 | 0) >> 2] | 0;
       if ($2) {
        break block59
       }
       $2 = FLAC__stream_decoder_new() | 0;
       HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11752 | 0) >> 2] = $2;
       if ($2) {
        break block59
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
       $10 = 1;
       break block1;
      }
      $10 = GOT_data_internal___table_base;
      $10 = FLAC__stream_decoder_init_stream($2 | 0, $10 + 18 | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, $10 + 19 | 0 | 0, $10 + 20 | 0 | 0, $10 + 21 | 0 | 0, $0 | 0) | 0;
      $2 = HEAP32[$0 >> 2] | 0;
      if ($10) {
       break block60
      }
      $9 = !(HEAP32[($2 + 4 | 0) >> 2] | 0);
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[($10 + 11816 | 0) >> 2] = 0;
     HEAP32[($10 + 11820 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[($10 + 7312 | 0) >> 2] = 0;
     HEAP32[($10 + 7316 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($10 + 7292 | 0) >> 2] = 0;
     i64toi32_i32$1 = $10 + 11824 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $10 + 11832 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($10 + 11840 | 0) >> 2] = 0;
     i64toi32_i32$1 = $2 + 624 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 616 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] = i64toi32_i32$0;
     block61 : {
      if ($9) {
       break block61
      }
      HEAP32[($10 + 11756 | 0) >> 2] = 0;
     }
     $10 = HEAP32[($10 + 6856 | 0) >> 2] | 0;
     $2 = GOT_data_internal_FLAC__STREAM_SYNC_LEN;
     block62 : {
      if (FLAC__bitwriter_write_raw_uint32($10 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_SYNC >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0) {
       break block62
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      $10 = 1;
      break block1;
     }
     $10 = 1;
     if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break block1
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     block63 : {
      $9 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($9 + 4 | 0) >> 2] | 0)) {
       break block63
      }
      HEAP32[($2 + 11756 | 0) >> 2] = 1;
     }
     HEAP32[($2 + 6880 | 0) >> 2] = 34;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 6872 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 6876 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 6888 | 0) >> 2] = HEAP32[($9 + 36 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6892 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6900 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6904 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6908 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6912 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 592 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 596 | 0) >> 2] | 0;
     $767 = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[(i64toi32_i32$0 + 6920 | 0) >> 2] = $767;
     HEAP32[(i64toi32_i32$0 + 6924 | 0) >> 2] = i64toi32_i32$1;
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 0;
     HEAP32[($2 + 6928 | 0) >> 2] = 0;
     HEAP32[($2 + 6932 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2 + 6936 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     block64 : {
      if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 12 | 0) >> 2] | 0)) {
       break block64
      }
      FLAC__MD5Init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7060 | 0 | 0);
     }
     block65 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (FLAC__add_metadata_block($2 + 6872 | 0 | 0, HEAP32[($2 + 6856 | 0) >> 2] | 0 | 0) | 0) {
       break block65
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break block1;
     }
     if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break block1
     }
     $2 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0) >> 2] = (-1 << (HEAP32[$2 >> 2] | 0) | 0) ^ -1 | 0;
     i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 6920 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 6924 | 0) >> 2] = i64toi32_i32$1;
     block66 : {
      if (!$15) {
       break block66
      }
      HEAP32[$8 >> 2] = 4;
      $2 = HEAP32[((HEAP32[$0 >> 2] | 0) + 604 | 0) >> 2] | 0;
      i64toi32_i32$0 = $8 + 24 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $8;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 8;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = !$2;
      block67 : {
       if (FLAC__add_metadata_block(i64toi32_i32$0 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
        break block67
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
       break block1;
      }
      if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
       break block1
      }
     }
     block68 : {
      $2 = HEAP32[$0 >> 2] | 0;
      $9 = HEAP32[($2 + 604 | 0) >> 2] | 0;
      if (!$9) {
       break block68
      }
      $10 = 0;
      label10 : while (1) {
       $2 = HEAP32[((HEAP32[($2 + 600 | 0) >> 2] | 0) + ($10 << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($2 + 4 | 0) >> 2] = ($10 | 0) == ($9 + -1 | 0 | 0);
       block69 : {
        if (FLAC__add_metadata_block($2 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
         break block69
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
        $10 = 1;
        break block1;
       }
       block70 : {
        if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
         break block70
        }
        $10 = $10 + 1 | 0;
        $2 = HEAP32[$0 >> 2] | 0;
        $9 = HEAP32[($2 + 604 | 0) >> 2] | 0;
        if ($10 >>> 0 >= $9 >>> 0) {
         break block68
        }
        continue label10;
       }
       break label10;
      };
      $10 = 1;
      break block1;
     }
     block71 : {
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = HEAP32[($9 + 7272 | 0) >> 2] | 0;
      if (!$3) {
       break block71
      }
      $10 = 1;
      $9 = FUNCTION_TABLE[$3 | 0]($0, $2 + 624 | 0, HEAP32[($9 + 7288 | 0) >> 2] | 0) | 0;
      $2 = HEAP32[$0 >> 2] | 0;
      if (($9 | 0) != (1 | 0)) {
       break block71
      }
      HEAP32[$2 >> 2] = 5;
      break block1;
     }
     $10 = 0;
     if (!(HEAP32[($2 + 4 | 0) >> 2] | 0)) {
      break block1
     }
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11756 | 0) >> 2] = 2;
     break block1;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    $10 = 1;
    break block1;
   }
   HEAP32[$2 >> 2] = 3;
   $10 = 1;
  }
  __stack_pointer = $8 + 176 | 0;
  return $10 | 0;
 }
 
 function precompute_partition_info_sums_($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $12 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $15$hi = 0, $14 = 0, $18 = 0, $15 = 0, $9 = 0, $10 = 0, $11 = 0, $17 = 0, $8 = 0, $21 = 0, $13 = 0, $16 = 0, $76 = 0, $83$hi = 0, $84$hi = 0, $89 = 0, $96$hi = 0, $114 = 0, $121$hi = 0, $19 = 0, $20 = 0, $171 = 0, $177 = 0, $182 = 0, $188 = 0, $193 = 0, $204 = 0, $230 = 0, $281 = 0, $288 = 0, $288$hi = 0, $290 = 0, $290$hi = 0, $294 = 0, $297 = 0, $297$hi = 0, $300 = 0, $300$hi = 0, $317 = 0, $324 = 0, $324$hi = 0, $326 = 0, $326$hi = 0;
  $7 = 0;
  $8 = 0 - $3 | 0;
  $9 = 1 << $5 | 0;
  $10 = ($3 + $2 | 0) >>> $5 | 0;
  $11 = $10 - $3 | 0;
  block4 : {
   block : {
    if (($6 + 4 | 0) >>> 0 < (32 - (Math_clz32($10) ^ 31 | 0) | 0) >>> 0) {
     break block
    }
    $12 = $0 + 4 | 0;
    $13 = $10 + ($3 ^ -1 | 0) | 0;
    $14 = 0;
    label1 : while (1) {
     i64toi32_i32$0 = 0;
     $15 = 0;
     $15$hi = i64toi32_i32$0;
     block1 : {
      $8 = $8 + $10 | 0;
      if ($7 >>> 0 >= $8 >>> 0) {
       break block1
      }
      $6 = $11 - $7 | 0;
      $16 = $6 & 1 | 0;
      i64toi32_i32$0 = 0;
      $15 = 0;
      $15$hi = i64toi32_i32$0;
      block3 : {
       block2 : {
        if (($13 + Math_imul($10, $14) | 0 | 0) != ($7 | 0)) {
         break block2
        }
        $6 = $7;
        break block3;
       }
       $17 = $6 & -2 | 0;
       $2 = 0;
       i64toi32_i32$0 = 0;
       $15 = 0;
       $15$hi = i64toi32_i32$0;
       $6 = $7;
       label : while (1) {
        i64toi32_i32$0 = $15$hi;
        $7 = $6 << 2 | 0;
        $18 = HEAP32[($0 + $7 | 0) >> 2] | 0;
        $76 = $18;
        $18 = $18 >> 31 | 0;
        i64toi32_i32$0 = 0;
        $83$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = $15;
        i64toi32_i32$1 = $83$hi;
        i64toi32_i32$3 = ($76 ^ $18 | 0) - $18 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $84$hi = i64toi32_i32$5;
        $7 = HEAP32[($12 + $7 | 0) >> 2] | 0;
        $89 = $7;
        $7 = $7 >> 31 | 0;
        i64toi32_i32$5 = 0;
        $96$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $84$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$2 = $96$hi;
        i64toi32_i32$3 = ($89 ^ $7 | 0) - $7 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $15 = i64toi32_i32$1;
        $15$hi = i64toi32_i32$4;
        $6 = $6 + 2 | 0;
        $2 = $2 + 2 | 0;
        if (($2 | 0) != ($17 | 0)) {
         continue label
        }
        break label;
       };
      }
      $7 = $11;
      if (!$16) {
       break block1
      }
      i64toi32_i32$4 = $15$hi;
      $6 = HEAP32[($0 + ($6 << 2 | 0) | 0) >> 2] | 0;
      $114 = $6;
      $6 = $6 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $121$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$0 = $121$hi;
      i64toi32_i32$3 = ($114 ^ $6 | 0) - $6 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      $7 = $11;
     }
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$5 = $1 + ($14 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$5 >> 2] = $15;
     HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
     $11 = $11 + $10 | 0;
     $14 = $14 + 1 | 0;
     if (($14 | 0) != ($9 | 0)) {
      continue label1
     }
     break block4;
    };
   }
   $13 = $0 + 12 | 0;
   $19 = $0 + 8 | 0;
   $20 = $0 + 4 | 0;
   $6 = 0;
   $21 = 0;
   label4 : while (1) {
    i64toi32_i32$1 = 0;
    $15 = 0;
    $15$hi = i64toi32_i32$1;
    block5 : {
     $8 = $8 + $10 | 0;
     if ($6 >>> 0 >= $8 >>> 0) {
      break block5
     }
     $2 = $11 - $6 | 0;
     $14 = $2 & 3 | 0;
     $18 = 0;
     block7 : {
      block6 : {
       if (((Math_imul($10, $21 ^ -1 | 0) + $3 | 0) + $6 | 0) >>> 0 <= -4 >>> 0) {
        break block6
       }
       $2 = 0;
       break block7;
      }
      $16 = $2 & -4 | 0;
      $2 = 0;
      $17 = 0;
      label2 : while (1) {
       $7 = $6 << 2 | 0;
       $12 = HEAP32[($13 + $7 | 0) >> 2] | 0;
       $171 = $12;
       $12 = $12 >> 31 | 0;
       $177 = ($171 ^ $12 | 0) - $12 | 0;
       $12 = HEAP32[($19 + $7 | 0) >> 2] | 0;
       $182 = $12;
       $12 = $12 >> 31 | 0;
       $188 = ($182 ^ $12 | 0) - $12 | 0;
       $12 = HEAP32[($20 + $7 | 0) >> 2] | 0;
       $193 = $12;
       $12 = $12 >> 31 | 0;
       $7 = HEAP32[($0 + $7 | 0) >> 2] | 0;
       $204 = $7;
       $7 = $7 >> 31 | 0;
       $2 = $177 + ($188 + ((($193 ^ $12 | 0) - $12 | 0) + ((($204 ^ $7 | 0) - $7 | 0) + $2 | 0) | 0) | 0) | 0;
       $6 = $6 + 4 | 0;
       $17 = $17 + 4 | 0;
       if (($17 | 0) != ($16 | 0)) {
        continue label2
       }
       break label2;
      };
     }
     block8 : {
      if (!$14) {
       break block8
      }
      label3 : while (1) {
       $7 = HEAP32[($0 + ($6 << 2 | 0) | 0) >> 2] | 0;
       $230 = $7;
       $7 = $7 >> 31 | 0;
       $2 = (($230 ^ $7 | 0) - $7 | 0) + $2 | 0;
       $6 = $6 + 1 | 0;
       $18 = $18 + 1 | 0;
       if (($18 | 0) != ($14 | 0)) {
        continue label3
       }
       break label3;
      };
     }
     i64toi32_i32$1 = 0;
     $15 = $2;
     $15$hi = i64toi32_i32$1;
     $6 = $11;
    }
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$5 = $1 + ($21 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$5 >> 2] = $15;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    $11 = $11 + $10 | 0;
    $21 = $21 + 1 | 0;
    if (($21 | 0) != ($9 | 0)) {
     continue label4
    }
    break label4;
   };
  }
  block9 : {
   if (($5 | 0) <= ($4 | 0)) {
    break block9
   }
   $17 = $1 + 8 | 0;
   $2 = 0;
   $12 = $9;
   label6 : while (1) {
    $14 = $12;
    $12 = $12 >>> 1 | 0;
    block10 : {
     if ($14 >>> 0 < 2 >>> 0) {
      break block10
     }
     block11 : {
      if (($12 | 0) == (1 | 0)) {
       break block11
      }
      $18 = $12 & 2147483646 | 0;
      $7 = 0;
      label5 : while (1) {
       $0 = $9 << 3 | 0;
       $281 = $1 + $0 | 0;
       $6 = $1 + ($2 << 3 | 0) | 0;
       i64toi32_i32$4 = $6 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
       $288 = i64toi32_i32$1;
       $288$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $6;
       i64toi32_i32$5 = HEAP32[$6 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($6 + 4 | 0) >> 2] | 0;
       $290 = i64toi32_i32$5;
       $290$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $288$hi;
       i64toi32_i32$4 = $288;
       i64toi32_i32$5 = $290$hi;
       i64toi32_i32$3 = $290;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       i64toi32_i32$4 = $281;
       HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
       $294 = $17 + $0 | 0;
       i64toi32_i32$1 = $6 + 24 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $297 = i64toi32_i32$2;
       $297$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $6 + 16 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $300 = i64toi32_i32$4;
       $300$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $297$hi;
       i64toi32_i32$1 = $297;
       i64toi32_i32$4 = $300$hi;
       i64toi32_i32$3 = $300;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       i64toi32_i32$1 = $294;
       HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2 = $2 + 4 | 0;
       $9 = $9 + 2 | 0;
       $7 = $7 + 2 | 0;
       if (($7 | 0) != ($18 | 0)) {
        continue label5
       }
       break label5;
      };
     }
     if (!($14 & 2 | 0)) {
      break block10
     }
     $317 = $1 + ($9 << 3 | 0) | 0;
     $6 = $1 + ($2 << 3 | 0) | 0;
     i64toi32_i32$2 = $6 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $324 = i64toi32_i32$0;
     $324$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = HEAP32[$6 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     $326 = i64toi32_i32$1;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $324$hi;
     i64toi32_i32$2 = $324;
     i64toi32_i32$1 = $326$hi;
     i64toi32_i32$3 = $326;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $317;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     $2 = $2 + 2 | 0;
     $9 = $9 + 1 | 0;
    }
    $5 = $5 + -1 | 0;
    if (($5 | 0) > ($4 | 0)) {
     continue label6
    }
    break label6;
   };
  }
 }
 
 function resize_buffers_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $5 = 0, $3 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0;
  $2 = 1;
  block : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if ($1 >>> 0 <= (HEAP32[$3 >> 2] | 0) >>> 0) {
    break block
   }
   $4 = $1 + 5 | 0;
   $2 = 0;
   block2 : {
    label4 : while (1) {
     block1 : {
      if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
       break block1
      }
      $5 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $3 + 7360 | 0 | 0, $3 + 36 | 0 | 0) | 0;
      $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $2 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = (HEAP32[($2 + 36 | 0) >> 2] | 0) + 16 | 0;
      if (!$5) {
       break block2
      }
      $2 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $2 + 7364 | 0 | 0, $2 + 40 | 0 | 0) | 0;
      $5 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = $5;
      i64toi32_i32$0 = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $5 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($5 + 40 | 0) >> 2] = (HEAP32[($5 + 40 | 0) >> 2] | 0) + 16 | 0;
      if (!$2) {
       break block2
      }
      block3 : {
       if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 556 | 0) >> 2] | 0)) {
        break block3
       }
       $2 = 0;
       block4 : {
        label : while (1) {
         $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if ($2 >>> 0 >= (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         $3 = $2 << 2 | 0;
         $2 = $2 + 1 | 0;
         $5 = $5 + $3 | 0;
         if (FLAC__memory_alloc_aligned_real_array($1 | 0, $5 + 7408 | 0 | 0, $5 + 84 | 0 | 0) | 0) {
          continue label
         }
         break block2;
        };
       }
       if (!(FLAC__memory_alloc_aligned_real_array($1 | 0, $5 + 7536 | 0 | 0, $5 + 212 | 0 | 0) | 0)) {
        break block2
       }
      }
      $5 = 0;
      $3 = 1;
      $2 = 0;
      block8 : {
       block7 : {
        label2 : while (1) {
         block5 : {
          if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
           break block5
          }
          label1 : while (1) {
           $2 = 0;
           block6 : {
            $6 = $5 << 3 | 0;
            $5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $6 | 0;
            if (!(FLAC__memory_alloc_aligned_int32_array($1 | 0, $5 + 7604 | 0 | 0, $5 + 320 | 0 | 0) | 0)) {
             break block6
            }
            $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $6 | 0;
            $2 = (FLAC__memory_alloc_aligned_int32_array($1 | 0, $2 + 7608 | 0 | 0, $2 + 324 | 0 | 0) | 0 | 0) != (0 | 0);
           }
           $6 = $2 & $3 | 0;
           $5 = 1;
           $3 = 0;
           if ($6) {
            continue label1
           }
           break label1;
          };
          if (!$2) {
           break block2
          }
          $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $2 = FLAC__memory_alloc_aligned_uint64_array($1 << 1 | 0 | 0, $2 + 7620 | 0 | 0, $2 + 6848 | 0 | 0) | 0;
          $5 = HEAP32[((HEAP32[$0 >> 2] | 0) + 572 | 0) >> 2] | 0;
          if (!$5) {
           break block7
          }
          if (!$2) {
           break block7
          }
          $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (FLAC__memory_alloc_aligned_unsigned_array($1 << 1 | 0 | 0, $2 + 7624 | 0 | 0, $2 + 6852 | 0 | 0) | 0) {
           break block8
          }
          break block2;
         }
         block10 : {
          block9 : {
           $4 = $2 << 3 | 0;
           $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $4 | 0;
           if (FLAC__memory_alloc_aligned_int32_array($1 | 0, $6 + 7540 | 0 | 0, $6 + 256 | 0 | 0) | 0) {
            break block9
           }
           $6 = 0;
           break block10;
          }
          $6 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $4 | 0;
          $6 = (FLAC__memory_alloc_aligned_int32_array($1 | 0, $6 + 7544 | 0 | 0, $6 + 260 | 0 | 0) | 0 | 0) != (0 | 0);
         }
         $2 = $2 + 1 | 0;
         if ($6) {
          continue label2
         }
         break block2;
        };
       }
       if ($5) {
        break block2
       }
       if (!$2) {
        break block2
       }
      }
      block11 : {
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (($1 | 0) == (HEAP32[$2 >> 2] | 0 | 0)) {
        break block11
       }
       $5 = HEAP32[$0 >> 2] | 0;
       if (!(HEAP32[($5 + 556 | 0) >> 2] | 0)) {
        break block11
       }
       if (!(HEAP32[($5 + 40 | 0) >> 2] | 0)) {
        break block11
       }
       $2 = 0;
       label3 : while (1) {
        $5 = $5 + ($2 << 4 | 0) | 0;
        $6 = $5 + 44 | 0;
        $3 = HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0;
        block29 : {
         block20 : {
          switch (HEAP32[($5 + 44 | 0) >> 2] | 0 | 0) {
          case 0:
           FLAC__window_bartlett($3 | 0, $1 | 0);
           break block29;
          case 1:
           FLAC__window_bartlett_hann($3 | 0, $1 | 0);
           break block29;
          case 2:
           FLAC__window_blackman($3 | 0, $1 | 0);
           break block29;
          case 3:
           FLAC__window_blackman_harris_4term_92db_sidelobe($3 | 0, $1 | 0);
           break block29;
          case 4:
           FLAC__window_connes($3 | 0, $1 | 0);
           break block29;
          case 5:
           FLAC__window_flattop($3 | 0, $1 | 0);
           break block29;
          case 6:
           FLAC__window_gauss($3 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2])));
           break block29;
          case 7:
           FLAC__window_hamming($3 | 0, $1 | 0);
           break block29;
          case 9:
           FLAC__window_kaiser_bessel($3 | 0, $1 | 0);
           break block29;
          case 10:
           FLAC__window_nuttall($3 | 0, $1 | 0);
           break block29;
          case 11:
           FLAC__window_rectangle($3 | 0, $1 | 0);
           break block29;
          case 12:
           FLAC__window_triangle($3 | 0, $1 | 0);
           break block29;
          case 13:
           FLAC__window_tukey($3 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2])));
           break block29;
          case 14:
           FLAC__window_partial_tukey($3 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2])));
           break block29;
          case 15:
           FLAC__window_punchout_tukey($3 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2])));
           break block29;
          case 16:
           FLAC__window_welch($3 | 0, $1 | 0);
           break block29;
          default:
           break block20;
          };
         }
         FLAC__window_hann($3 | 0, $1 | 0);
        }
        $2 = $2 + 1 | 0;
        $5 = HEAP32[$0 >> 2] | 0;
        if ($2 >>> 0 < (HEAP32[($5 + 40 | 0) >> 2] | 0) >>> 0) {
         continue label3
        }
        break label3;
       };
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$2 >> 2] = $1;
      return 1 | 0;
     }
     $5 = $2 << 2 | 0;
     $3 = $3 + $5 | 0;
     $6 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $3 + 7328 | 0 | 0, $3 + 4 | 0 | 0) | 0;
     $3 = HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $5 | 0) + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $5 = $3 + $5 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) + 16 | 0;
     $2 = $2 + 1 | 0;
     if ($6) {
      continue label4
     }
     break label4;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function verify_read_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $5 = 0, $6 = 0, $4 = 0;
  block : {
   $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($4 + 11760 | 0) >> 2] | 0)) {
    break block
   }
   HEAP32[$2 >> 2] = 4;
   $7 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
   $8 = $1;
   $9 = HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$8 >> 0] = $9;
   HEAP8[($8 + 1 | 0) >> 0] = $9 >>> 8 | 0;
   HEAP8[($8 + 2 | 0) >> 0] = $9 >>> 16 | 0;
   HEAP8[($8 + 3 | 0) >> 0] = $9 >>> 24 | 0;
   HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + 11760 | 0) >> 2] = 0;
   return 0 | 0;
  }
  block1 : {
   $5 = HEAP32[($4 + 11812 | 0) >> 2] | 0;
   if ($5) {
    break block1
   }
   return 2 | 0;
  }
  block2 : {
   $6 = HEAP32[$2 >> 2] | 0;
   if ($5 >>> 0 >= $6 >>> 0) {
    break block2
   }
   HEAP32[$2 >> 2] = $5;
   $6 = $5;
  }
  block3 : {
   if (!$6) {
    break block3
   }
   wasm2js_memory_copy($1, HEAP32[($4 + 11804 | 0) >> 2] | 0, $6);
  }
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[($3 + 11804 | 0) >> 2] = (HEAP32[($3 + 11804 | 0) >> 2] | 0) + $2 | 0;
  HEAP32[($3 + 11812 | 0) >> 2] = (HEAP32[($3 + 11812 | 0) >> 2] | 0) - $2 | 0;
  return 0 | 0;
 }
 
 function verify_write_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $9 = 0, i64toi32_i32$2 = 0, $5 = 0, $10 = 0, $7 = 0, i64toi32_i32$5 = 0, $4 = 0, $8 = 0, $11 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $65 = 0, $67$hi = 0, $69$hi = 0, $82$hi = 0, $84$hi = 0, $22 = 0;
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  block : {
   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if ($6) {
    break block
   }
   HEAP32[($5 + 11800 | 0) >> 2] = (HEAP32[($5 + 11800 | 0) >> 2] | 0) - $4 | 0;
   return 0 | 0;
  }
  $7 = $4 << 2 | 0;
  $8 = $5 + 11764 | 0;
  $9 = 0;
  label1 : while (1) {
   block1 : {
    $10 = $9 << 2 | 0;
    $11 = HEAP32[($2 + $10 | 0) >> 2] | 0;
    $10 = HEAP32[($8 + $10 | 0) >> 2] | 0;
    if (!(memcmp($11 | 0, $10 | 0, $7 | 0) | 0)) {
     break block1
    }
    $8 = 0;
    block4 : {
     block2 : {
      if (!$4) {
       break block2
      }
      $6 = 0;
      label : while (1) {
       block3 : {
        $2 = $6 << 2 | 0;
        $7 = HEAP32[($11 + $2 | 0) >> 2] | 0;
        $2 = HEAP32[($10 + $2 | 0) >> 2] | 0;
        if (($7 | 0) == ($2 | 0)) {
         break block3
        }
        $8 = $6;
        break block4;
       }
       $6 = $6 + 1 | 0;
       if (($6 | 0) != ($4 | 0)) {
        continue label
       }
       break label;
      };
     }
     $2 = 0;
     $7 = 0;
    }
    $65 = $5;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $67$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $69$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $67$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $69$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $8 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $8 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $65;
    HEAP32[(i64toi32_i32$2 + 11816 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 11820 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$1 = $1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    HEAP32[($5 + 11840 | 0) >> 2] = $7;
    HEAP32[($5 + 11836 | 0) >> 2] = $2;
    HEAP32[($5 + 11832 | 0) >> 2] = $8;
    HEAP32[($5 + 11828 | 0) >> 2] = $9;
    $82$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $84$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $82$hi;
    $22 = i64toi32_i32$5;
    i64toi32_i32$5 = $84$hi;
    i64toi32_i32$5 = __wasm_i64_udiv($22 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    HEAP32[($5 + 11824 | 0) >> 2] = i64toi32_i32$5;
    HEAP32[(HEAP32[$3 >> 2] | 0) >> 2] = 4;
    return 1 | 0;
   }
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($6 | 0)) {
    continue label1
   }
   break label1;
  };
  HEAP32[($5 + 11800 | 0) >> 2] = (HEAP32[($5 + 11800 | 0) >> 2] | 0) - $4 | 0;
  $5 = $6 & 1 | 0;
  $9 = 0;
  block5 : {
   if (($6 | 0) == (1 | 0)) {
    break block5
   }
   $8 = $6 & -2 | 0;
   $9 = 0;
   $10 = 0;
   label2 : while (1) {
    $11 = $4 << 2 | 0;
    $6 = $9 << 2 | 0;
    block6 : {
     $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     $7 = (HEAP32[($2 + 11800 | 0) >> 2] | 0) << 2 | 0;
     if (!$7) {
      break block6
     }
     $2 = HEAP32[(($2 + $6 | 0) + 11764 | 0) >> 2] | 0;
     wasm2js_memory_copy($2, $2 + $11 | 0, $7);
    }
    block7 : {
     $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     $7 = (HEAP32[($2 + 11800 | 0) >> 2] | 0) << 2 | 0;
     if (!$7) {
      break block7
     }
     $6 = HEAP32[(($2 + $6 | 0) + 11768 | 0) >> 2] | 0;
     wasm2js_memory_copy($6, $6 + $11 | 0, $7);
    }
    $9 = $9 + 2 | 0;
    $10 = $10 + 2 | 0;
    if (($10 | 0) != ($8 | 0)) {
     continue label2
    }
    break label2;
   };
  }
  block8 : {
   if (!$5) {
    break block8
   }
   $10 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $11 = (HEAP32[($10 + 11800 | 0) >> 2] | 0) << 2 | 0;
   if (!$11) {
    break block8
   }
   $9 = HEAP32[(($10 + ($9 << 2 | 0) | 0) + 11764 | 0) >> 2] | 0;
   wasm2js_memory_copy($9, $9 + ($4 << 2 | 0) | 0, $11);
  }
  return 0 | 0;
 }
 
 function verify_metadata_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function verify_error_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 3;
 }
 
 function write_bitbuffer_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4 = 0, i64toi32_i32$3 = 0, $3 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $13$hi = 0, $15$hi = 0, $10$hi = 0, $12 = 0, $13 = 0, $14$hi = 0, $15 = 0, $88 = 0, $96 = 0, $10 = 0, $121$hi = 0, $14 = 0, $201 = 0, $203$hi = 0, $205$hi = 0, $207 = 0, $209$hi = 0, $211$hi = 0, $234 = 0, $247 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = FLAC__bitwriter_get_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 4 | 0 | 0, $3 | 0) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
  block1 : {
   block : {
    if ($4) {
     break block
    }
    HEAP32[$5 >> 2] = 8;
    $4 = 0;
    break block1;
   }
   $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $6 = HEAP32[$3 >> 2] | 0;
   $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   block14 : {
    block6 : {
     block7 : {
      block9 : {
       block8 : {
        block4 : {
         block2 : {
          if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
           break block2
          }
          HEAP32[($4 + 11812 | 0) >> 2] = $6;
          HEAP32[($4 + 11804 | 0) >> 2] = $7;
          block3 : {
           if (HEAP32[($4 + 11756 | 0) >> 2] | 0) {
            break block3
           }
           HEAP32[($4 + 11760 | 0) >> 2] = 1;
           break block2;
          }
          if (!(FLAC__stream_decoder_process_single(HEAP32[($4 + 11752 | 0) >> 2] | 0 | 0) | 0)) {
           break block4
          }
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $6 = HEAP32[$3 >> 2] | 0;
          $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         }
         i64toi32_i32$1 = $3;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
         block5 : {
          $5 = HEAP32[($4 + 7272 | 0) >> 2] | 0;
          if (!$5) {
           break block5
          }
          if ((FUNCTION_TABLE[$5 | 0]($0, i64toi32_i32$1 + 8 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0) | 0 | 0) == (1 | 0)) {
           break block6
          }
         }
         if ($1) {
          break block7
         }
         switch ((HEAPU8[$7 >> 0] | 0) & 127 | 0 | 0) {
         case 0:
          break block8;
         case 3:
          break block9;
         default:
          break block7;
         };
        }
        FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
        FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
        $4 = 0;
        $0 = HEAP32[$0 >> 2] | 0;
        if ((HEAP32[$0 >> 2] | 0 | 0) == (4 | 0)) {
         break block1
        }
        HEAP32[$0 >> 2] = 3;
        break block1;
       }
       i64toi32_i32$2 = $3;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       $88 = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
       HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] = $88;
       HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] = i64toi32_i32$1;
       break block7;
      }
      $4 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
       break block7
      }
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
      $96 = i64toi32_i32$2;
      i64toi32_i32$2 = $4;
      HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] = $96;
      HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] = i64toi32_i32$0;
     }
     block10 : {
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + 7048 | 0) >> 2] | 0;
      if (!$8) {
       break block10
      }
      $9 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$3 = $9;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 624 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 628 | 0) >> 2] | 0;
      $10 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$2;
      if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0)) {
       break block10
      }
      $11 = HEAP32[$8 >> 2] | 0;
      if (!$11) {
       break block10
      }
      $4 = HEAP32[($5 + 7292 | 0) >> 2] | 0;
      if ($4 >>> 0 >= $11 >>> 0) {
       break block10
      }
      $12 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $121$hi = i64toi32_i32$2;
      i64toi32_i32$3 = $5;
      i64toi32_i32$2 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $121$hi;
      i64toi32_i32$3 = $12;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $14 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$4;
      $9 = HEAP32[($8 + 4 | 0) >> 2] | 0;
      label : while (1) {
       $8 = $9 + Math_imul($4, 24) | 0;
       i64toi32_i32$5 = $8;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $15 = i64toi32_i32$4;
       $15$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = $14$hi;
       i64toi32_i32$1 = $14;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break block10
       }
       block11 : {
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$1 = $15;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$4 = $13;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
         break block11
        }
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = $8;
        i64toi32_i32$1 = i64toi32_i32$0;
        HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$4 = $3;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
        $15 = i64toi32_i32$1;
        $15$hi = i64toi32_i32$5;
        HEAP32[($8 + 16 | 0) >> 2] = $12;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        i64toi32_i32$2 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
        i64toi32_i32$4 = $8;
        HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
       }
       $4 = $4 + 1 | 0;
       HEAP32[($5 + 7292 | 0) >> 2] = $4;
       if (($4 | 0) != ($11 | 0)) {
        continue label
       }
       break label;
      };
     }
     $4 = HEAP32[($5 + 7056 | 0) >> 2] | 0;
     block13 : {
      block12 : {
       if (!(HEAP32[($5 + 7260 | 0) >> 2] | 0)) {
        break block12
       }
       $4 = FLAC__ogg_encoder_aspect_write_callback_wrapper((HEAP32[$0 >> 2] | 0) + 632 | 0 | 0, $7 | 0, $6 | 0, $1 | 0, $4 | 0, $2 | 0, HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0, $0 | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0 | 0) | 0;
       break block13;
      }
      $4 = FUNCTION_TABLE[HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0]($0, $7, $6, $1, $4, HEAP32[($5 + 7288 | 0) >> 2] | 0) | 0;
     }
     if (!$4) {
      break block14
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    $4 = 0;
    break block1;
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $201 = $5;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[($5 + 7304 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($5 + 7308 | 0) >> 2] | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   $205$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $203$hi;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   i64toi32_i32$5 = $201;
   HEAP32[(i64toi32_i32$5 + 7304 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$5 + 7308 | 0) >> 2] = i64toi32_i32$3;
   $207 = $5;
   i64toi32_i32$4 = $5;
   i64toi32_i32$3 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
   $209$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   $211$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $209$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = $211$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   i64toi32_i32$4 = $207;
   HEAP32[(i64toi32_i32$4 + 7312 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$4 + 7316 | 0) >> 2] = i64toi32_i32$1;
   $4 = 1;
   $8 = HEAP32[($5 + 7320 | 0) >> 2] | 0;
   $6 = (HEAP32[($5 + 7056 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($5 + 7320 | 0) >> 2] = $8 >>> 0 > $6 >>> 0 ? $8 : $6;
   FLAC__bitwriter_release_buffer(HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0);
   FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
   if (!$1) {
    break block1
   }
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $234 = $1;
   $5 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[($1 + 6896 | 0) >> 2] | 0;
   HEAP32[($234 + 6896 | 0) >> 2] = $5 >>> 0 < $1 >>> 0 ? $5 : $1;
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $247 = $0;
   $0 = HEAP32[($0 + 6900 | 0) >> 2] | 0;
   HEAP32[($247 + 6900 | 0) >> 2] = $5 >>> 0 > $0 >>> 0 ? $5 : $0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__stream_encoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return init_stream_internal__305($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, 1 | 0) | 0 | 0;
 }
 
 function process_subframe_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $15 = 0, $17 = 0, $21 = 0, $12 = 0, $20 = 0, $11 = 0, $23 = 0, $31 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $40 = 0, $29 = Math_fround(0), i64toi32_i32$0 = 0, $49 = 0.0, $42 = 0, $43 = 0.0, $50 = 0.0, $254 = 0, $522 = 0, $27 = Math_fround(0), $220 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $359 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $614 = 0;
  $11 = __stack_pointer - 576 | 0;
  __stack_pointer = $11;
  $12 = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
  $13 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $14 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER;
  $15 = HEAP32[$3 >> 2] | 0;
  block2 : {
   block1 : {
    block : {
     if (!(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7256 | 0) >> 2] | 0)) {
      break block
     }
     $16 = -1;
     if ($15 >>> 0 > 3 >>> 0) {
      break block1
     }
    }
    $17 = HEAP32[$6 >> 2] | 0;
    HEAP32[($17 + 4 | 0) >> 2] = $5;
    HEAP32[$17 >> 2] = 1;
    $16 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + Math_imul($15, $4) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($17 + 288 | 0) >> 2] | 0) | 0;
    $18 = 0;
    $15 = HEAP32[$3 >> 2] | 0;
    if ($15 >>> 0 < 4 >>> 0) {
     break block2
    }
   }
   $19 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + ((($4 + (Math_clz32(($15 | 1 | 0) + -4 | 0) ^ 31 | 0) | 0) + 4 | 0) >>> 0 < 33 >>> 0 ? 7224 : 7228) | 0) >> 2] | 0 | 0]($5 + 16 | 0, $15 + -4 | 0, $11 + 416 | 0) | 0;
   block4 : {
    block3 : {
     $20 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($20 + 7248 | 0) >> 2] | 0) {
      break block3
     }
     if (Math_fround(HEAPF32[($11 + 420 | 0) >> 2]) != Math_fround(0.0)) {
      break block3
     }
     $15 = 1;
     $17 = HEAP32[$5 >> 2] | 0;
     $21 = HEAP32[$3 >> 2] | 0;
     if ($21 >>> 0 <= 1 >>> 0) {
      break block4
     }
     label : while (1) {
      if (($17 | 0) != (HEAP32[($5 + ($15 << 2 | 0) | 0) >> 2] | 0 | 0)) {
       break block3
      }
      $15 = $15 + 1 | 0;
      if (($15 | 0) == ($21 | 0)) {
       break block4
      }
      continue label;
     };
    }
    $22 = HEAP32[($12 >>> 0 > 16 >>> 0 ? $14 : $13) >> 2] | 0;
    $15 = HEAP32[$0 >> 2] | 0;
    block6 : {
     block5 : {
      if (!(HEAP32[($20 + 7252 | 0) >> 2] | 0)) {
       break block5
      }
      $18 = 0;
      if (HEAP32[($15 + 556 | 0) >> 2] | 0) {
       break block6
      }
      if (($16 | 0) != (-1 | 0)) {
       break block6
      }
     }
     $18 = 0;
     $17 = HEAP32[($15 + 568 | 0) >> 2] | 0;
     $20 = $17 ? 0 : $19;
     $17 = $17 ? 4 : $19;
     $21 = HEAP32[$3 >> 2] | 0;
     $23 = $17 >>> 0 < $21 >>> 0 ? $17 : $21 + -1 | 0;
     if ($20 >>> 0 > $23 >>> 0) {
      break block6
     }
     $24 = $20 + -1 | 0;
     $25 = $22 + -1 | 0;
     $15 = GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN;
     $26 = ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0;
     $27 = Math_fround($4 >>> 0);
     $28 = 0;
     $18 = 0;
     label3 : while (1) {
      block7 : {
       $15 = $20 << 2 | 0;
       $29 = Math_fround(HEAPF32[(($11 + 416 | 0) + $15 | 0) >> 2]);
       if ($29 >= $27) {
        break block7
       }
       $30 = !$18;
       $17 = $30 << 2 | 0;
       $21 = HEAP32[($7 + $17 | 0) >> 2] | 0;
       $31 = HEAP32[($6 + $17 | 0) >> 2] | 0;
       $12 = HEAP32[((HEAP32[$0 >> 2] | 0) + 572 | 0) >> 2] | 0;
       $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $14 = HEAP32[($13 + 6852 | 0) >> 2] | 0;
       $13 = HEAP32[($13 + 6848 | 0) >> 2] | 0;
       $220 = $5 + $15 | 0;
       $19 = (HEAP32[$3 >> 2] | 0) - $20 | 0;
       $15 = HEAP32[($8 + $17 | 0) >> 2] | 0;
       FLAC__fixed_compute_residual($220 | 0, $19 | 0, $20 | 0, $15 | 0);
       HEAP32[($31 + 36 | 0) >> 2] = $15;
       HEAP32[($31 + 12 | 0) >> 2] = $21;
       i64toi32_i32$0 = 0;
       HEAP32[$31 >> 2] = 2;
       HEAP32[($31 + 4 | 0) >> 2] = i64toi32_i32$0;
       $238 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $239 = $15;
       $240 = $13;
       $241 = $14;
       $242 = $19;
       $243 = $20;
       $49 = +$29 + .5;
       if ($49 < 4294967295.0 & $49 >= 0.0 | 0) {
        $254 = ~~$49 >>> 0
       } else {
        $254 = 0
       }
       $17 = $29 > Math_fround(0.0) ? $254 + 1 | 0 : 1;
       $32 = find_best_partition_order_($238 | 0, $239 | 0, $240 | 0, $241 | 0, $242 | 0, $243 | 0, ($17 >>> 0 < $22 >>> 0 ? $17 : $25) | 0, $22 | 0, $1 | 0, $2 | 0, $4 | 0, $12 | 0, $31 + 4 | 0 | 0) | 0;
       HEAP32[($31 + 16 | 0) >> 2] = $20;
       block8 : {
        if (!$20) {
         break block8
        }
        $17 = $31 + 20 | 0;
        $12 = 0;
        $15 = 0;
        block9 : {
         if (($24 + $28 | 0) >>> 0 < 3 >>> 0) {
          break block9
         }
         $19 = $20 & -4 | 0;
         $15 = 0;
         $13 = 0;
         label1 : while (1) {
          $21 = $15 << 2 | 0;
          HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
          $14 = $21 | 4 | 0;
          HEAP32[($17 + $14 | 0) >> 2] = HEAP32[($5 + $14 | 0) >> 2] | 0;
          $14 = $21 | 8 | 0;
          HEAP32[($17 + $14 | 0) >> 2] = HEAP32[($5 + $14 | 0) >> 2] | 0;
          $21 = $21 | 12 | 0;
          HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
          $15 = $15 + 4 | 0;
          $13 = $13 + 4 | 0;
          if (($13 | 0) != ($19 | 0)) {
           continue label1
          }
          break label1;
         };
        }
        $13 = $20 & 3 | 0;
        if (!$13) {
         break block8
        }
        label2 : while (1) {
         $21 = $15 << 2 | 0;
         HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
         $15 = $15 + 1 | 0;
         $12 = $12 + 1 | 0;
         if (($12 | 0) != ($13 | 0)) {
          continue label2
         }
         break label2;
        };
       }
       $15 = (($32 + Math_imul($20, $4) | 0) + $26 | 0) + (HEAP32[($31 + 288 | 0) >> 2] | 0) | 0;
       $359 = $15;
       $15 = $15 >>> 0 < $16 >>> 0;
       $16 = $15 ? $359 : $16;
       $18 = $15 ? $30 : $18;
      }
      $28 = $28 + 1 | 0;
      $20 = $20 + 1 | 0;
      if ($20 >>> 0 <= $23 >>> 0) {
       continue label3
      }
      break label3;
     };
     $15 = HEAP32[$0 >> 2] | 0;
    }
    $17 = HEAP32[($15 + 556 | 0) >> 2] | 0;
    if (!$17) {
     break block2
    }
    $21 = HEAP32[$3 >> 2] | 0;
    $17 = $17 >>> 0 < $21 >>> 0 ? $17 : $21 + -1 | 0;
    HEAP32[($11 + 12 | 0) >> 2] = $17;
    if (!$17) {
     break block2
    }
    if (!(HEAP32[($15 + 40 | 0) >> 2] | 0)) {
     break block2
    }
    $33 = $22 + -1 | 0;
    $15 = GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN;
    $34 = (HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
    $15 = GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN;
    $35 = ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0;
    $36 = +($4 >>> 0);
    $37 = $4 >>> 0 < 18 >>> 0;
    $38 = $4 >>> 0 > 16 >>> 0;
    $39 = $4 >>> 0 > 17 >>> 0;
    $40 = 0;
    label8 : while (1) {
     $15 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     FLAC__lpc_window_data($5 | 0, HEAP32[(($15 + ($40 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, HEAP32[($15 + 212 | 0) >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0);
     $15 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[($15 + 7232 | 0) >> 2] | 0 | 0](HEAP32[($15 + 212 | 0) >> 2] | 0, HEAP32[$3 >> 2] | 0, (HEAP32[($11 + 12 | 0) >> 2] | 0) + 1 | 0, $11 + 272 | 0);
     block10 : {
      if (Math_fround(HEAPF32[($11 + 272 | 0) >> 2]) == Math_fround(0.0)) {
       break block10
      }
      FLAC__lpc_compute_lp_coefficients($11 + 272 | 0 | 0, $11 + 12 | 0 | 0, (HEAP32[($0 + 4 | 0) >> 2] | 0) + 7628 | 0 | 0, $11 + 16 | 0 | 0);
      $23 = 1;
      $15 = HEAP32[($11 + 12 | 0) >> 2] | 0;
      block11 : {
       $17 = HEAP32[$0 >> 2] | 0;
       if (HEAP32[($17 + 568 | 0) >> 2] | 0) {
        break block11
       }
       $21 = 5;
       block12 : {
        if (HEAP32[($17 + 564 | 0) >> 2] | 0) {
         break block12
        }
        $21 = HEAP32[($17 + 560 | 0) >> 2] | 0;
       }
       $15 = FLAC__lpc_compute_best_order($11 + 16 | 0 | 0, $15 | 0, HEAP32[$3 >> 2] | 0 | 0, $21 + $4 | 0 | 0) | 0;
       HEAP32[($11 + 12 | 0) >> 2] = $15;
       $23 = $15;
      }
      block13 : {
       $17 = HEAP32[$3 >> 2] | 0;
       if ($15 >>> 0 < $17 >>> 0) {
        break block13
       }
       $15 = $17 + -1 | 0;
       HEAP32[($11 + 12 | 0) >> 2] = $15;
      }
      if ($23 >>> 0 > $15 >>> 0) {
       break block10
      }
      $41 = $23 + -1 | 0;
      $42 = 0;
      label7 : while (1) {
       block14 : {
        $15 = $23 + -1 | 0;
        $43 = +FLAC__lpc_compute_expected_bits_per_residual_sample(+(+HEAPF64[(($11 + 16 | 0) + ($15 << 3 | 0) | 0) >> 3]), (HEAP32[$3 >> 2] | 0) - $23 | 0 | 0);
        if ($43 >= $36) {
         break block14
        }
        $50 = $43 + .5;
        if ($50 < 4294967295.0 & $50 >= 0.0 | 0) {
         $522 = ~~$50 >>> 0
        } else {
         $522 = 0
        }
        $17 = $43 > 0.0 ? $522 + 1 | 0 : 1;
        $21 = $17 >>> 0 < $22 >>> 0;
        block17 : {
         block15 : {
          $12 = HEAP32[$0 >> 2] | 0;
          if (!(HEAP32[($12 + 564 | 0) >> 2] | 0)) {
           break block15
          }
          block16 : {
           if (!$39) {
            break block16
           }
           $24 = 15;
           $20 = 5;
           break block17;
          }
          $20 = 5;
          $12 = ((Math_clz32($23) ^ -32 | 0) - $4 | 0) + 33 | 0;
          $12 = $12 >>> 0 < 15 >>> 0 ? $12 : 15;
          $24 = $12 >>> 0 > 5 >>> 0 ? $12 : 5;
          break block17;
         }
         $20 = HEAP32[($12 + 560 | 0) >> 2] | 0;
         $24 = $20;
        }
        $44 = $21 ? $17 : $33;
        $28 = $23 & -4 | 0;
        $19 = $23 & 3 | 0;
        $45 = $5 + ($23 << 2 | 0) | 0;
        $17 = Math_clz32($23);
        $46 = $4 + ($17 ^ 31 | 0) | 0;
        $30 = (($17 ^ -32 | 0) - $4 | 0) + 33 | 0;
        $47 = $15 << 7 | 0;
        $48 = ($41 + $42 | 0) >>> 0 < 3 >>> 0;
        label6 : while (1) {
         $12 = HEAP32[$3 >> 2] | 0;
         $32 = !$18;
         $15 = $32 << 2 | 0;
         $13 = HEAP32[($7 + $15 | 0) >> 2] | 0;
         $31 = HEAP32[($6 + $15 | 0) >> 2] | 0;
         $21 = HEAP32[($8 + $15 | 0) >> 2] | 0;
         $14 = HEAP32[((HEAP32[$0 >> 2] | 0) + 572 | 0) >> 2] | 0;
         $17 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $25 = HEAP32[($17 + 6852 | 0) >> 2] | 0;
         $26 = HEAP32[($17 + 6848 | 0) >> 2] | 0;
         $15 = 0;
         block18 : {
          $614 = ($17 + $47 | 0) + 7628 | 0;
          $17 = $37 ? ($20 >>> 0 < $30 >>> 0 ? $20 : $30) : $20;
          if (FLAC__lpc_quantize_coefficients($614 | 0, $23 | 0, $17 | 0, $11 + 448 | 0 | 0, $11 + 444 | 0 | 0) | 0) {
           break block18
          }
          $15 = $12 - $23 | 0;
          block21 : {
           block19 : {
            if (($17 + $46 | 0) >>> 0 > 32 >>> 0) {
             break block19
            }
            $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            block20 : {
             if ($38) {
              break block20
             }
             if ($17 >>> 0 > 16 >>> 0) {
              break block20
             }
             $12 = $12 + 7244 | 0;
             break block21;
            }
            $12 = $12 + 7236 | 0;
            break block21;
           }
           $12 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 7240 | 0;
          }
          FUNCTION_TABLE[HEAP32[$12 >> 2] | 0 | 0]($45, $15, $11 + 448 | 0, $23, HEAP32[($11 + 444 | 0) >> 2] | 0, $21);
          HEAP32[($31 + 284 | 0) >> 2] = $21;
          HEAP32[($31 + 12 | 0) >> 2] = $13;
          i64toi32_i32$0 = 0;
          HEAP32[$31 >> 2] = 3;
          HEAP32[($31 + 4 | 0) >> 2] = i64toi32_i32$0;
          $25 = find_best_partition_order_(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $21 | 0, $26 | 0, $25 | 0, $15 | 0, $23 | 0, $44 | 0, $22 | 0, $1 | 0, $2 | 0, $4 | 0, $14 | 0, $31 + 4 | 0 | 0) | 0;
          HEAP32[($31 + 20 | 0) >> 2] = $17;
          HEAP32[($31 + 16 | 0) >> 2] = $23;
          HEAP32[($31 + 24 | 0) >> 2] = HEAP32[($11 + 444 | 0) >> 2] | 0;
          block22 : {
           if (!128) {
            break block22
           }
           wasm2js_memory_copy($31 + 28 | 0, $11 + 448 | 0, 128);
          }
          $26 = $17 + $4 | 0;
          block23 : {
           if (!$23) {
            break block23
           }
           $17 = $31 + 156 | 0;
           $12 = 0;
           $15 = 0;
           $13 = 0;
           block24 : {
            if ($48) {
             break block24
            }
            label4 : while (1) {
             $21 = $15 << 2 | 0;
             HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
             $14 = $21 | 4 | 0;
             HEAP32[($17 + $14 | 0) >> 2] = HEAP32[($5 + $14 | 0) >> 2] | 0;
             $14 = $21 | 8 | 0;
             HEAP32[($17 + $14 | 0) >> 2] = HEAP32[($5 + $14 | 0) >> 2] | 0;
             $21 = $21 | 12 | 0;
             HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
             $15 = $15 + 4 | 0;
             $13 = $13 + 4 | 0;
             if (($13 | 0) != ($28 | 0)) {
              continue label4
             }
             break label4;
            };
           }
           if (!$19) {
            break block23
           }
           label5 : while (1) {
            $21 = $15 << 2 | 0;
            HEAP32[($17 + $21 | 0) >> 2] = HEAP32[($5 + $21 | 0) >> 2] | 0;
            $15 = $15 + 1 | 0;
            $12 = $12 + 1 | 0;
            if (($12 | 0) != ($19 | 0)) {
             continue label5
            }
            break label5;
           };
          }
          $15 = ((($25 + Math_imul($26, $23) | 0) + $35 | 0) + (HEAP32[($31 + 288 | 0) >> 2] | 0) | 0) + $34 | 0;
         }
         $17 = ($15 | 0) != (0 | 0) & $15 >>> 0 < $16 >>> 0 | 0;
         $18 = $17 ? $32 : $18;
         $16 = $17 ? $15 : $16;
         $20 = $20 + 1 | 0;
         if ($20 >>> 0 <= $24 >>> 0) {
          continue label6
         }
         break label6;
        };
       }
       $42 = $42 + 1 | 0;
       $23 = $23 + 1 | 0;
       if ($23 >>> 0 <= (HEAP32[($11 + 12 | 0) >> 2] | 0) >>> 0) {
        continue label7
       }
       break label7;
      };
     }
     $40 = $40 + 1 | 0;
     if ($40 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
      continue label8
     }
     break block2;
    };
   }
   $15 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   HEAP32[($15 + 4 | 0) >> 2] = $17;
   HEAP32[$15 >> 2] = 0;
   $15 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + $4 | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($15 + 288 | 0) >> 2] | 0) | 0;
   $18 = $15 >>> 0 < $16 >>> 0;
   $16 = $18 ? $15 : $16;
  }
  block25 : {
   if (($16 | 0) != (-1 | 0)) {
    break block25
   }
   $17 = HEAP32[$3 >> 2] | 0;
   $15 = HEAP32[($6 + ($18 << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($15 + 4 | 0) >> 2] = $5;
   HEAP32[$15 >> 2] = 1;
   $16 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + Math_imul($17, $4) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($15 + 288 | 0) >> 2] | 0) | 0;
  }
  HEAP32[$9 >> 2] = $18;
  HEAP32[$10 >> 2] = $16;
  __stack_pointer = $11 + 576 | 0;
 }
 
 function add_subframe_($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 1;
  block4 : {
   block5 : {
    block1 : {
     switch (HEAP32[$3 >> 2] | 0 | 0) {
     case 0:
      if (!(FLAC__subframe_add_constant($3 + 4 | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break block5
      }
      break block4;
     case 2:
      if (!(FLAC__subframe_add_fixed($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break block5
      }
      break block4;
     case 3:
      if (!(FLAC__subframe_add_lpc($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break block5
      }
      break block4;
     case 1:
      break block1;
     default:
      break block4;
     };
    }
    if (FLAC__subframe_add_verbatim($3 + 4 | 0 | 0, $1 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
     break block4
    }
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function FLAC__stream_encoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   FLAC__ogg_encoder_aspect_set_serial_number($0 + 632 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_verify($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_channels($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_bits_per_sample($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_sample_rate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 32 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_compression_level($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $2 = 0, $19 = 0;
  $2 = 0;
  block : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   $1 = (GOT_data_internal___memory_base + 84432 | 0) + Math_imul($1 >>> 0 < 8 >>> 0 ? $1 : 8, 44) | 0;
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $19 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $19;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   $3 = FLAC__stream_encoder_set_apodization($0 | 0, HEAP32[($1 + 40 | 0) >> 2] | 0 | 0) | 0;
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 576 | 0) >> 2] = 0;
   HEAP32[($0 + 568 | 0) >> 2] = 0;
   i64toi32_i32$0 = $0;
   i64toi32_i32$1 = 0;
   HEAP32[($0 + 560 | 0) >> 2] = 0;
   HEAP32[($0 + 564 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 580 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
   HEAP32[($0 + 556 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $2 = $3;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_blocksize($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   HEAP32[($0 + 36 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_total_samples_estimate($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2 = 0, $17 = 0, $15$hi = 0, $9 = 0, $10 = 0, $10$hi = 0, $12 = 0, $12$hi = 0, $3 = 0, $19 = 0;
  $2 = 0;
  block : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break block
   }
   $9 = $0;
   i64toi32_i32$0 = $1$hi;
   $10 = $1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$3 = $12;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$1 = $17;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $15$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4 ? $10 : i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
   $19 = i64toi32_i32$1;
   i64toi32_i32$1 = $9;
   HEAP32[(i64toi32_i32$1 + 592 | 0) >> 2] = $19;
   HEAP32[(i64toi32_i32$1 + 596 | 0) >> 2] = i64toi32_i32$3;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_metadata($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  block : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) == (1 | 0)) {
    break block
   }
   return 0 | 0;
  }
  $2 = $1 ? $2 : 0;
  block1 : {
   $4 = HEAP32[($3 + 600 | 0) >> 2] | 0;
   if (!$4) {
    break block1
   }
   emscripten_builtin_free($4 | 0);
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 600 | 0) >> 2] = 0;
   HEAP32[($3 + 604 | 0) >> 2] = 0;
  }
  block2 : {
   if (!$2) {
    break block2
   }
   block3 : {
    $4 = safe_malloc_mul_2op_p(4 | 0, $2 | 0) | 0;
    if ($4) {
     break block3
    }
    return 0 | 0;
   }
   block4 : {
    $3 = $2 << 2 | 0;
    if (!$3) {
     break block4
    }
    wasm2js_memory_copy($4, $1, $3);
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 604 | 0) >> 2] = $2;
   HEAP32[($3 + 600 | 0) >> 2] = $4;
  }
  return (FLAC__ogg_encoder_aspect_set_num_metadata($3 + 632 | 0 | 0, $2 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function FLAC__stream_encoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_encoder_get_verify_decoder_state($0) {
  $0 = $0 | 0;
  block : {
   if (HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0) {
    break block
   }
   return 9 | 0;
  }
  return FLAC__stream_decoder_get_state(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11752 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function FLAC__stream_encoder_get_verify($0) {
  $0 = $0 | 0;
  return HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_encoder_process($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $14 = 0, $15 = 0, $11 = 0, $18 = 0, $21 = 0, $12 = 0, $19 = 0, $20 = 0, $4 = 0, $3 = 0, $13 = 0, $9 = 0, $16 = 0, $17 = 0, $6 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $22 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($3 + 24 | 0) >> 2] | 0;
  $5 = $4 & -4 | 0;
  $6 = $4 & 3 | 0;
  $7 = $4 & -2 | 0;
  $8 = $4 & 1 | 0;
  $9 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  $10 = $9 + 1 | 0;
  $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $12 = 0;
  $13 = $9 << 2 | 0;
  block6 : {
   label5 : while (1) {
    $14 = $10 - (HEAP32[($11 + 7052 | 0) >> 2] | 0) | 0;
    $15 = $2 - $12 | 0;
    $16 = $14 >>> 0 < $15 >>> 0 ? $14 : $15;
    block : {
     if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
      break block
     }
     block1 : {
      if (!$4) {
       break block1
      }
      $17 = $11 + 11764 | 0;
      $18 = $16 << 2 | 0;
      $14 = 0;
      $19 = 0;
      block2 : {
       if (($4 | 0) == (1 | 0)) {
        break block2
       }
       label : while (1) {
        $20 = $12 << 2 | 0;
        $15 = $14 << 2 | 0;
        block3 : {
         $21 = !$18;
         if ($21) {
          break block3
         }
         wasm2js_memory_copy((HEAP32[($17 + $15 | 0) >> 2] | 0) + ((HEAP32[($11 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0, (HEAP32[($1 + $15 | 0) >> 2] | 0) + $20 | 0, $18);
        }
        block4 : {
         if ($21) {
          break block4
         }
         $15 = $15 | 4 | 0;
         wasm2js_memory_copy((HEAP32[($17 + $15 | 0) >> 2] | 0) + ((HEAP32[($11 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0, (HEAP32[($1 + $15 | 0) >> 2] | 0) + $20 | 0, $18);
        }
        $14 = $14 + 2 | 0;
        $19 = $19 + 2 | 0;
        if (($19 | 0) != ($7 | 0)) {
         continue label
        }
        break label;
       };
      }
      if (!$8) {
       break block1
      }
      if (!$18) {
       break block1
      }
      $14 = $14 << 2 | 0;
      wasm2js_memory_copy((HEAP32[($17 + $14 | 0) >> 2] | 0) + ((HEAP32[($11 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0, (HEAP32[($1 + $14 | 0) >> 2] | 0) + ($12 << 2 | 0) | 0, $18);
     }
     HEAP32[($11 + 11800 | 0) >> 2] = (HEAP32[($11 + 11800 | 0) >> 2] | 0) + $16 | 0;
    }
    block5 : {
     if (!$4) {
      break block5
     }
     $15 = $16 << 2 | 0;
     $20 = 0;
     $14 = 0;
     label1 : while (1) {
      $18 = $14 << 2 | 0;
      $19 = HEAP32[($1 + $18 | 0) >> 2] | 0;
      if (!$19) {
       break block6
      }
      block7 : {
       if (!$15) {
        break block7
       }
       $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       wasm2js_memory_copy((HEAP32[(($11 + $18 | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($11 + 7052 | 0) >> 2] | 0) << 2 | 0) | 0, $19 + ($12 << 2 | 0) | 0, $15);
      }
      $14 = $14 + 1 | 0;
      if (($14 | 0) != ($4 | 0)) {
       continue label1
      }
      break label1;
     };
    }
    block9 : {
     block8 : {
      $3 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
       break block8
      }
      $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $14 = HEAP32[($11 + 7052 | 0) >> 2] | 0;
      if ($14 >>> 0 > $9 >>> 0) {
       break block9
      }
      if ($2 >>> 0 <= $12 >>> 0) {
       break block9
      }
      $20 = HEAP32[($11 + 36 | 0) >> 2] | 0;
      $21 = HEAP32[($11 + 40 | 0) >> 2] | 0;
      $17 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      $22 = HEAP32[$1 >> 2] | 0;
      label2 : while (1) {
       $15 = $14 << 2 | 0;
       $18 = $12 << 2 | 0;
       $19 = $22 + $18 | 0;
       $18 = $17 + $18 | 0;
       HEAP32[($21 + $15 | 0) >> 2] = (HEAP32[$19 >> 2] | 0) - (HEAP32[$18 >> 2] | 0) | 0;
       HEAP32[($20 + $15 | 0) >> 2] = ((HEAP32[$18 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0) >> 1 | 0;
       $12 = $12 + 1 | 0;
       $14 = $14 + 1 | 0;
       if ($14 >>> 0 > $9 >>> 0) {
        break block9
       }
       if ($12 >>> 0 < $2 >>> 0) {
        continue label2
       }
       break block9;
      };
     }
     $12 = $16 + $12 | 0;
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    $14 = (HEAP32[($11 + 7052 | 0) >> 2] | 0) + $16 | 0;
    HEAP32[($11 + 7052 | 0) >> 2] = $14;
    block10 : {
     if ($14 >>> 0 <= $9 >>> 0) {
      break block10
     }
     $20 = 0;
     if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break block6
     }
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     block11 : {
      if (!$4) {
       break block11
      }
      $19 = $11 + 4 | 0;
      $18 = 0;
      $14 = 0;
      $20 = 0;
      block12 : {
       if ($4 >>> 0 < 4 >>> 0) {
        break block12
       }
       label3 : while (1) {
        $15 = $19 + ($14 << 2 | 0) | 0;
        $21 = HEAP32[$15 >> 2] | 0;
        HEAP32[$21 >> 2] = HEAP32[($21 + $13 | 0) >> 2] | 0;
        $21 = HEAP32[($15 + 4 | 0) >> 2] | 0;
        HEAP32[$21 >> 2] = HEAP32[($21 + $13 | 0) >> 2] | 0;
        $21 = HEAP32[($15 + 8 | 0) >> 2] | 0;
        HEAP32[$21 >> 2] = HEAP32[($21 + $13 | 0) >> 2] | 0;
        $15 = HEAP32[($15 + 12 | 0) >> 2] | 0;
        HEAP32[$15 >> 2] = HEAP32[($15 + $13 | 0) >> 2] | 0;
        $14 = $14 + 4 | 0;
        $20 = $20 + 4 | 0;
        if (($20 | 0) != ($5 | 0)) {
         continue label3
        }
        break label3;
       };
      }
      if (!$6) {
       break block11
      }
      label4 : while (1) {
       $15 = HEAP32[($19 + ($14 << 2 | 0) | 0) >> 2] | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + $13 | 0) >> 2] | 0;
       $14 = $14 + 1 | 0;
       $18 = $18 + 1 | 0;
       if (($18 | 0) != ($6 | 0)) {
        continue label4
       }
       break label4;
      };
     }
     block13 : {
      $3 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
       break block13
      }
      $14 = HEAP32[($11 + 36 | 0) >> 2] | 0;
      HEAP32[$14 >> 2] = HEAP32[($14 + $13 | 0) >> 2] | 0;
      $14 = HEAP32[($11 + 40 | 0) >> 2] | 0;
      HEAP32[$14 >> 2] = HEAP32[($14 + $13 | 0) >> 2] | 0;
     }
     HEAP32[($11 + 7052 | 0) >> 2] = 1;
    }
    if ($12 >>> 0 < $2 >>> 0) {
     continue label5
    }
    break label5;
   };
   $20 = 1;
  }
  return $20 | 0;
 }
 
 function FLAC__stream_encoder_process_interleaved($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $16 = 0, $22 = 0, $17 = 0, $19 = 0, $3 = 0, $24 = 0, $23 = 0, $15 = 0, $21 = 0, $14 = 0, $4 = 0, $6 = 0, $13 = 0, $9 = 0, $10 = 0, $18 = 0, $20 = 0, $5 = 0, $8 = 0, $11 = 0, $12 = 0, $7 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  $5 = $4 + 1 | 0;
  $6 = HEAP32[($3 + 24 | 0) >> 2] | 0;
  block12 : {
   block15 : {
    block1 : {
     block : {
      if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
       break block
      }
      if (($6 | 0) == (2 | 0)) {
       break block1
      }
     }
     $7 = $6 & -4 | 0;
     $8 = $6 & 3 | 0;
     $9 = $1 + 4 | 0;
     $10 = $6 & -2 | 0;
     $11 = $6 & 1 | 0;
     $12 = $6 + -1 | 0;
     $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = 0;
     $14 = 0;
     label7 : while (1) {
      block2 : {
       if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0)) {
        break block2
       }
       $15 = HEAP32[($13 + 11800 | 0) >> 2] | 0;
       block3 : {
        $16 = $5 - (HEAP32[($13 + 7052 | 0) >> 2] | 0) | 0;
        $17 = $2 - $14 | 0;
        $18 = $16 >>> 0 < $17 >>> 0 ? $16 : $17;
        if (!$18) {
         break block3
        }
        block4 : {
         if (!$6) {
          break block4
         }
         $19 = $13 + 11764 | 0;
         $16 = Math_imul($14, $6);
         $20 = 0;
         label1 : while (1) {
          $17 = 0;
          $21 = 0;
          block5 : {
           if (!$12) {
            break block5
           }
           label : while (1) {
            $22 = $19 + ($17 << 2 | 0) | 0;
            $23 = $15 << 2 | 0;
            $24 = $16 << 2 | 0;
            HEAP32[((HEAP32[$22 >> 2] | 0) + $23 | 0) >> 2] = HEAP32[($1 + $24 | 0) >> 2] | 0;
            HEAP32[((HEAP32[($22 + 4 | 0) >> 2] | 0) + $23 | 0) >> 2] = HEAP32[($9 + $24 | 0) >> 2] | 0;
            $17 = $17 + 2 | 0;
            $16 = $16 + 2 | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($10 | 0)) {
             continue label
            }
            break label;
           };
          }
          block6 : {
           if (!$11) {
            break block6
           }
           HEAP32[((HEAP32[($19 + ($17 << 2 | 0) | 0) >> 2] | 0) + ($15 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($16 << 2 | 0) | 0) >> 2] | 0;
           $16 = $16 + 1 | 0;
          }
          $15 = $15 + 1 | 0;
          $20 = $20 + 1 | 0;
          if (($20 | 0) != ($18 | 0)) {
           continue label1
          }
          break block3;
         };
        }
        $15 = $18 + $15 | 0;
       }
       HEAP32[($13 + 11800 | 0) >> 2] = $15;
      }
      $22 = $2 >>> 0 > $14 >>> 0;
      block7 : {
       $24 = HEAP32[($13 + 7052 | 0) >> 2] | 0;
       if ($24 >>> 0 > $4 >>> 0) {
        break block7
       }
       if ($2 >>> 0 <= $14 >>> 0) {
        break block7
       }
       block8 : {
        if (!$6) {
         break block8
        }
        $15 = $13 + 4 | 0;
        label3 : while (1) {
         $16 = 0;
         $17 = 0;
         block9 : {
          if (!$12) {
           break block9
          }
          label2 : while (1) {
           $21 = $15 + ($16 << 2 | 0) | 0;
           $22 = $24 << 2 | 0;
           $23 = $3 << 2 | 0;
           HEAP32[((HEAP32[$21 >> 2] | 0) + $22 | 0) >> 2] = HEAP32[($1 + $23 | 0) >> 2] | 0;
           HEAP32[((HEAP32[($21 + 4 | 0) >> 2] | 0) + $22 | 0) >> 2] = HEAP32[($9 + $23 | 0) >> 2] | 0;
           $16 = $16 + 2 | 0;
           $3 = $3 + 2 | 0;
           $17 = $17 + 2 | 0;
           if (($17 | 0) != ($10 | 0)) {
            continue label2
           }
           break label2;
          };
         }
         block10 : {
          if (!$11) {
           break block10
          }
          HEAP32[((HEAP32[($15 + ($16 << 2 | 0) | 0) >> 2] | 0) + ($24 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($3 << 2 | 0) | 0) >> 2] | 0;
          $3 = $3 + 1 | 0;
         }
         $14 = $14 + 1 | 0;
         $22 = $14 >>> 0 < $2 >>> 0;
         $24 = $24 + 1 | 0;
         if ($24 >>> 0 > $4 >>> 0) {
          break block7
         }
         if ($14 >>> 0 < $2 >>> 0) {
          continue label3
         }
         break block7;
        };
       }
       label4 : while (1) {
        $14 = $14 + 1 | 0;
        $22 = $14 >>> 0 < $2 >>> 0;
        $24 = $24 + 1 | 0;
        if ($24 >>> 0 > $4 >>> 0) {
         break block7
        }
        if ($14 >>> 0 < $2 >>> 0) {
         continue label4
        }
        break label4;
       };
      }
      HEAP32[($13 + 7052 | 0) >> 2] = $24;
      block11 : {
       if ($24 >>> 0 <= $4 >>> 0) {
        break block11
       }
       $16 = 0;
       if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
        break block12
       }
       $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       block13 : {
        if (!$6) {
         break block13
        }
        $24 = $13 + 4 | 0;
        $23 = 0;
        $16 = 0;
        $15 = 0;
        block14 : {
         if ($6 >>> 0 < 4 >>> 0) {
          break block14
         }
         label5 : while (1) {
          $17 = $24 + ($16 << 2 | 0) | 0;
          $19 = HEAP32[$17 >> 2] | 0;
          $21 = $4 << 2 | 0;
          HEAP32[$19 >> 2] = HEAP32[($19 + $21 | 0) >> 2] | 0;
          $19 = HEAP32[($17 + 4 | 0) >> 2] | 0;
          HEAP32[$19 >> 2] = HEAP32[($19 + $21 | 0) >> 2] | 0;
          $19 = HEAP32[($17 + 8 | 0) >> 2] | 0;
          HEAP32[$19 >> 2] = HEAP32[($19 + $21 | 0) >> 2] | 0;
          $17 = HEAP32[($17 + 12 | 0) >> 2] | 0;
          HEAP32[$17 >> 2] = HEAP32[($17 + $21 | 0) >> 2] | 0;
          $16 = $16 + 4 | 0;
          $15 = $15 + 4 | 0;
          if (($15 | 0) != ($7 | 0)) {
           continue label5
          }
          break label5;
         };
        }
        if (!$8) {
         break block13
        }
        label6 : while (1) {
         $17 = HEAP32[($24 + ($16 << 2 | 0) | 0) >> 2] | 0;
         HEAP32[$17 >> 2] = HEAP32[($17 + ($4 << 2 | 0) | 0) >> 2] | 0;
         $16 = $16 + 1 | 0;
         $23 = $23 + 1 | 0;
         if (($23 | 0) != ($8 | 0)) {
          continue label6
         }
         break label6;
        };
       }
       HEAP32[($13 + 7052 | 0) >> 2] = 1;
      }
      if ($22) {
       continue label7
      }
      break block15;
     };
    }
    $19 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $21 = 0;
    $17 = 0;
    label10 : while (1) {
     block16 : {
      if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0)) {
       break block16
      }
      $3 = HEAP32[($19 + 11800 | 0) >> 2] | 0;
      block17 : {
       $16 = $5 - (HEAP32[($19 + 7052 | 0) >> 2] | 0) | 0;
       $22 = $2 - $17 | 0;
       $10 = $16 >>> 0 < $22 >>> 0 ? $16 : $22;
       if (!$10) {
        break block17
       }
       $16 = $17 << 1 | 0;
       $24 = HEAP32[($19 + 11768 | 0) >> 2] | 0;
       $15 = HEAP32[($19 + 11764 | 0) >> 2] | 0;
       $22 = 0;
       label8 : while (1) {
        $23 = $3 << 2 | 0;
        $9 = $1 + ($16 << 2 | 0) | 0;
        HEAP32[($15 + $23 | 0) >> 2] = HEAP32[$9 >> 2] | 0;
        HEAP32[($24 + $23 | 0) >> 2] = HEAP32[($9 + 4 | 0) >> 2] | 0;
        $3 = $3 + 1 | 0;
        $16 = $16 + 2 | 0;
        $22 = $22 + 1 | 0;
        if (($22 | 0) != ($10 | 0)) {
         continue label8
        }
        break label8;
       };
      }
      HEAP32[($19 + 11800 | 0) >> 2] = $3;
     }
     $3 = $2 >>> 0 > $17 >>> 0;
     block18 : {
      $16 = HEAP32[($19 + 7052 | 0) >> 2] | 0;
      if ($16 >>> 0 > $4 >>> 0) {
       break block18
      }
      if ($2 >>> 0 <= $17 >>> 0) {
       break block18
      }
      $9 = HEAP32[($19 + 36 | 0) >> 2] | 0;
      $10 = HEAP32[($19 + 40 | 0) >> 2] | 0;
      $24 = HEAP32[($19 + 8 | 0) >> 2] | 0;
      $15 = HEAP32[($19 + 4 | 0) >> 2] | 0;
      label9 : while (1) {
       $3 = $16 << 2 | 0;
       $23 = $1 + ($21 << 2 | 0) | 0;
       $22 = HEAP32[$23 >> 2] | 0;
       HEAP32[($15 + $3 | 0) >> 2] = $22;
       $23 = HEAP32[($23 + 4 | 0) >> 2] | 0;
       HEAP32[($24 + $3 | 0) >> 2] = $23;
       HEAP32[($10 + $3 | 0) >> 2] = $22 - $23 | 0;
       HEAP32[($9 + $3 | 0) >> 2] = ($23 + $22 | 0) >> 1 | 0;
       $21 = $21 + 2 | 0;
       $17 = $17 + 1 | 0;
       $3 = $17 >>> 0 < $2 >>> 0;
       $16 = $16 + 1 | 0;
       if ($16 >>> 0 > $4 >>> 0) {
        break block18
       }
       if ($17 >>> 0 < $2 >>> 0) {
        continue label9
       }
       break label9;
      };
     }
     HEAP32[($19 + 7052 | 0) >> 2] = $16;
     block19 : {
      if ($16 >>> 0 <= $4 >>> 0) {
       break block19
      }
      $16 = 0;
      if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
       break block12
      }
      $19 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $22 = HEAP32[($19 + 4 | 0) >> 2] | 0;
      $16 = $4 << 2 | 0;
      HEAP32[$22 >> 2] = HEAP32[($22 + $16 | 0) >> 2] | 0;
      $22 = HEAP32[($19 + 8 | 0) >> 2] | 0;
      HEAP32[$22 >> 2] = HEAP32[($22 + $16 | 0) >> 2] | 0;
      $22 = HEAP32[($19 + 36 | 0) >> 2] | 0;
      HEAP32[$22 >> 2] = HEAP32[($22 + $16 | 0) >> 2] | 0;
      $22 = HEAP32[($19 + 40 | 0) >> 2] | 0;
      HEAP32[$22 >> 2] = HEAP32[($22 + $16 | 0) >> 2] | 0;
      HEAP32[($19 + 7052 | 0) >> 2] = 1;
     }
     if ($3) {
      continue label10
     }
     break label10;
    };
   }
   $16 = 1;
  }
  return $16 | 0;
 }
 
 function find_best_partition_order_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $23 = 0, $14 = 0, $26 = 0, $29 = 0, $25 = 0, $37$hi = 0, $20 = 0, $28 = 0, $21 = 0, $37 = 0, $38$hi = 0, $19 = 0, $22 = 0, $38 = 0, $39 = 0, $39$hi = 0, $15 = 0, $24 = 0, $30 = 0, $16 = 0, $17 = 0, $27 = 0, $35 = 0, $13 = 0, $18 = 0, $33 = 0, $34$hi = 0, $36 = 0, $60 = 0, $61 = 0, $40$hi = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $106 = 0, $114 = 0, $31 = 0, $32 = 0, $34 = 0, $315$hi = 0, $40 = 0, $371 = 0, $375$hi = 0, $394 = 0, $399 = 0, $433 = 0, $454 = 0;
  $13 = $5 + $4 | 0;
  $14 = FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($9 | 0, $13 | 0, $5 | 0) | 0;
  $15 = $8 >>> 0 < $14 >>> 0 ? $8 : $14;
  FUNCTION_TABLE[HEAP32[($0 + 7220 | 0) >> 2] | 0 | 0]($1, $2, $4, $5, $15, $14, $10);
  block : {
   if (!$11) {
    break block
   }
   $9 = 0;
   $8 = 0;
   block1 : {
    if (($14 | 0) < (0 | 0)) {
     break block1
    }
    $16 = $1 + 12 | 0;
    $17 = $1 + 8 | 0;
    $18 = $1 + 4 | 0;
    $19 = $13 >>> $14 | 0;
    $8 = 1 << $14 | 0;
    $20 = 0;
    $21 = 0;
    label2 : while (1) {
     block3 : {
      block2 : {
       $22 = $21 ? 0 : $5;
       if (($19 | 0) != ($22 | 0)) {
        break block2
       }
       $10 = 1;
       break block3;
      }
      $23 = $19 - $22 | 0;
      $24 = $23 & 3 | 0;
      $25 = 0;
      $26 = 0;
      $10 = $20;
      block4 : {
       if (($22 - $19 | 0) >>> 0 > -4 >>> 0) {
        break block4
       }
       $27 = $23 & -4 | 0;
       $26 = 0;
       $28 = 0;
       label : while (1) {
        $23 = $10 << 2 | 0;
        $29 = HEAP32[($16 + $23 | 0) >> 2] | 0;
        $106 = ($29 >> 31 | 0) ^ $29 | 0;
        $29 = HEAP32[($17 + $23 | 0) >> 2] | 0;
        $114 = ($29 >> 31 | 0) ^ $29 | 0;
        $29 = HEAP32[($18 + $23 | 0) >> 2] | 0;
        $23 = HEAP32[($1 + $23 | 0) >> 2] | 0;
        $26 = $106 | ($114 | (($29 >> 31 | 0) ^ $29 | 0 | (($23 >> 31 | 0) ^ $23 | 0 | $26 | 0) | 0) | 0) | 0;
        $10 = $10 + 4 | 0;
        $28 = $28 + 4 | 0;
        if (($28 | 0) != ($27 | 0)) {
         continue label
        }
        break label;
       };
      }
      block5 : {
       if (!$24) {
        break block5
       }
       label1 : while (1) {
        $23 = HEAP32[($1 + ($10 << 2 | 0) | 0) >> 2] | 0;
        $26 = ($23 >> 31 | 0) ^ $23 | 0 | $26 | 0;
        $10 = $10 + 1 | 0;
        $25 = $25 + 1 | 0;
        if (($25 | 0) != ($24 | 0)) {
         continue label1
        }
        break label1;
       };
      }
      $10 = $26 ? (Math_clz32($26) ^ 31 | 0) + 2 | 0 : 1;
      $20 = ($20 + $19 | 0) - $22 | 0;
     }
     HEAP32[($3 + ($21 << 2 | 0) | 0) >> 2] = $10;
     $21 = $21 + 1 | 0;
     if (($21 | 0) != ($8 | 0)) {
      continue label2
     }
     break label2;
    };
   }
   if (($14 | 0) <= ($15 | 0)) {
    break block
   }
   $25 = $14;
   label4 : while (1) {
    $25 = $25 + -1 | 0;
    $10 = 0;
    label3 : while (1) {
     $26 = $3 + ($9 << 2 | 0) | 0;
     $23 = HEAP32[$26 >> 2] | 0;
     $26 = HEAP32[($26 + 4 | 0) >> 2] | 0;
     HEAP32[($3 + ($8 << 2 | 0) | 0) >> 2] = $23 >>> 0 > $26 >>> 0 ? $23 : $26;
     $8 = $8 + 1 | 0;
     $9 = $9 + 2 | 0;
     $10 = $10 + 1 | 0;
     if (!($10 >>> $25 | 0)) {
      continue label3
     }
     break label3;
    };
    if (($25 | 0) > ($15 | 0)) {
     continue label4
    }
    break label4;
   };
  }
  $30 = 0;
  $20 = 0;
  $29 = 0;
  block6 : {
   if (($14 | 0) < ($15 | 0)) {
    break block6
   }
   $17 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN >> 2] | 0;
   $31 = (Math_imul($6 + 1 | 0, $4) - ($4 >>> 1 | 0) | 0) + $17 | 0;
   $18 = $7 + -1 | 0;
   $32 = $0 + 11724 | 0;
   $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN;
   $22 = (HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
   $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN;
   $33 = (HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
   i64toi32_i32$0 = 0;
   $34 = $6 + -1 | 0;
   $34$hi = i64toi32_i32$0;
   $35 = 0;
   $29 = 0;
   $20 = 0;
   $30 = 0;
   label10 : while (1) {
    $36 = $20 ^ 1 | 0;
    $8 = $32 + Math_imul($36, 12) | 0;
    FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($8 | 0, ($14 >>> 0 > 6 >>> 0 ? $14 : 6) | 0) | 0;
    $21 = $3 + ($35 << 2 | 0) | 0;
    $27 = $2 + ($35 << 3 | 0) | 0;
    $19 = HEAP32[($8 + 4 | 0) >> 2] | 0;
    $16 = HEAP32[$8 >> 2] | 0;
    block17 : {
     block7 : {
      if (!$14) {
       break block7
      }
      $24 = $13 >>> $14 | 0;
      $23 = 0;
      $1 = 0;
      $28 = $33;
      label9 : while (1) {
       block8 : {
        if ($23) {
         break block8
        }
        if ($24 >>> 0 <= $5 >>> 0) {
         break block6
        }
       }
       $25 = $24 - ($23 ? 0 : $5) | 0;
       block14 : {
        block11 : {
         block10 : {
          block9 : {
           i64toi32_i32$2 = $27 + ($23 << 3 | 0) | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $37 = i64toi32_i32$0;
           $37$hi = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 268435456;
           if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
            break block9
           }
           $8 = 0;
           $9 = $25;
           i64toi32_i32$2 = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$1;
           $10 = $37;
           if (($9 << 3 | 0) >>> 0 < $10 >>> 0) {
            break block10
           }
           break block11;
          }
          i64toi32_i32$2 = 0;
          $38 = $25;
          $38$hi = i64toi32_i32$2;
          $8 = 0;
          block13 : {
           block12 : {
            i64toi32_i32$2 = $37$hi;
            i64toi32_i32$3 = $37;
            i64toi32_i32$1 = 16777216;
            i64toi32_i32$0 = 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
             break block12
            }
            i64toi32_i32$3 = $38$hi;
            $39 = $25;
            $39$hi = i64toi32_i32$3;
            break block13;
           }
           i64toi32_i32$3 = $38$hi;
           $39 = $38;
           $39$hi = i64toi32_i32$3;
           i64toi32_i32$0 = $38;
           i64toi32_i32$2 = 0;
           i64toi32_i32$1 = 7;
           i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            $60 = 0;
           } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
            $60 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
           }
           $315$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $37$hi;
           i64toi32_i32$2 = $315$hi;
           i64toi32_i32$3 = $60;
           i64toi32_i32$0 = $37$hi;
           i64toi32_i32$1 = $37;
           if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
            break block13
           }
           label5 : while (1) {
            $8 = $8 + 8 | 0;
            i64toi32_i32$3 = $38$hi;
            i64toi32_i32$1 = $38;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = 15;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
             $61 = 0;
            } else {
             i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
             $61 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            }
            $40 = $61;
            $40$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $38$hi;
            i64toi32_i32$3 = $38;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 8;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
             $62 = 0;
            } else {
             i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
             $62 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
            }
            $39 = $62;
            $39$hi = i64toi32_i32$1;
            $38 = $39;
            $38$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $40$hi;
            i64toi32_i32$1 = $37$hi;
            i64toi32_i32$1 = $40$hi;
            i64toi32_i32$2 = $40;
            i64toi32_i32$3 = $37$hi;
            i64toi32_i32$0 = $37;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
             continue label5
            }
            break label5;
           };
          }
          i64toi32_i32$2 = $39$hi;
          i64toi32_i32$2 = $37$hi;
          i64toi32_i32$2 = $39$hi;
          i64toi32_i32$0 = $39;
          i64toi32_i32$1 = $37$hi;
          i64toi32_i32$3 = $37;
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break block14
          }
          label6 : while (1) {
           $8 = $8 + 1 | 0;
           i64toi32_i32$0 = $39$hi;
           i64toi32_i32$3 = $39;
           i64toi32_i32$2 = 0;
           i64toi32_i32$1 = 1;
           i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
            $63 = 0;
           } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $63 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
           }
           $39 = $63;
           $39$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $37$hi;
           i64toi32_i32$2 = $39$hi;
           i64toi32_i32$0 = $39;
           i64toi32_i32$3 = $37$hi;
           i64toi32_i32$1 = $37;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
            continue label6
           }
           break block14;
          };
         }
         label7 : while (1) {
          $8 = $8 + 4 | 0;
          $26 = $9 << 7 | 0;
          $9 = $9 << 4 | 0;
          if ($26 >>> 0 < $10 >>> 0) {
           continue label7
          }
          break label7;
         };
        }
        if ($9 >>> 0 >= $10 >>> 0) {
         break block14
        }
        label8 : while (1) {
         $8 = $8 + 1 | 0;
         $9 = $9 << 1 | 0;
         if ($9 >>> 0 < $10 >>> 0) {
          continue label8
         }
         break label8;
        };
       }
       $9 = $8 >>> 0 < $7 >>> 0 ? $8 : $18;
       $371 = ($17 - ($25 >>> 1 | 0) | 0) + Math_imul($9 + 1 | 0, $25) | 0;
       i64toi32_i32$0 = $37$hi;
       i64toi32_i32$0 = 0;
       $375$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $37$hi;
       i64toi32_i32$1 = $37;
       i64toi32_i32$2 = $375$hi;
       i64toi32_i32$3 = $9 + -1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $64 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $64 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       i64toi32_i32$2 = $37$hi;
       $8 = $371 + ($9 ? $64 : $37 << 1 | 0) | 0;
       block16 : {
        block15 : {
         if ($11) {
          break block15
         }
         $1 = ($8 | 0) == (-1 | 0) ? $1 : $9;
         break block16;
        }
        $10 = $23 << 2 | 0;
        $394 = $19 + $10 | 0;
        $10 = HEAP32[($21 + $10 | 0) >> 2] | 0;
        $399 = $10;
        $10 = $22 + Math_imul($10, $25) | 0;
        $26 = $10 >>> 0 > $8 >>> 0;
        HEAP32[$394 >> 2] = $26 ? 0 : $399;
        $8 = $10 >>> 0 < $8 >>> 0 ? $10 : $8;
        $1 = $26 ? $9 : 0;
       }
       HEAP32[($16 + ($23 << 2 | 0) | 0) >> 2] = $1;
       $28 = $8 + $28 | 0;
       $23 = $23 + 1 | 0;
       if (!($23 >>> $14 | 0)) {
        continue label9
       }
       break block17;
      };
     }
     $433 = $31;
     i64toi32_i32$0 = $27;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $38 = i64toi32_i32$2;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $34$hi;
     i64toi32_i32$1 = $38$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$2 = $34$hi;
     i64toi32_i32$3 = $34;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $65 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $65 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$2 = $38$hi;
     $8 = $433 + ($6 ? $65 : $38 << 1 | 0) | 0;
     block19 : {
      block18 : {
       if ($11) {
        break block18
       }
       $9 = ($8 | 0) == (-1 | 0) ? 0 : $6;
       break block19;
      }
      $9 = HEAP32[$21 >> 2] | 0;
      $454 = $9;
      $9 = $22 + Math_imul($9, $4) | 0;
      $10 = $9 >>> 0 > $8 >>> 0;
      HEAP32[$19 >> 2] = $10 ? 0 : $454;
      $8 = $9 >>> 0 < $8 >>> 0 ? $9 : $8;
      $9 = $10 ? $6 : 0;
     }
     HEAP32[$16 >> 2] = $9;
     $28 = $8 + $33 | 0;
    }
    $8 = ($30 + -1 | 0) >>> 0 < $28 >>> 0;
    $29 = $8 ? $29 : $14;
    $20 = $8 ? $20 : $36;
    $30 = $8 ? $30 : $28;
    $35 = $35 + (1 << $14 | 0) | 0;
    $8 = ($14 | 0) > ($15 | 0);
    $14 = $14 + -1 | 0;
    if ($8) {
     continue label10
    }
    break label10;
   };
  }
  HEAP32[($12 + 4 | 0) >> 2] = $29;
  $8 = HEAP32[($12 + 8 | 0) >> 2] | 0;
  FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($8 | 0, ($29 >>> 0 > 6 >>> 0 ? $29 : 6) | 0) | 0;
  $9 = $0 + Math_imul($20, 12) | 0;
  block20 : {
   $10 = 4 << $29 | 0;
   $3 = !$10;
   if ($3) {
    break block20
   }
   wasm2js_memory_copy(HEAP32[$8 >> 2] | 0, HEAP32[($9 + 11724 | 0) >> 2] | 0, $10);
  }
  block21 : {
   if (!$11) {
    break block21
   }
   if ($3) {
    break block21
   }
   wasm2js_memory_copy(HEAP32[($8 + 4 | 0) >> 2] | 0, HEAP32[(($9 + 11724 | 0) + 4 | 0) >> 2] | 0, $10);
  }
  $9 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER >> 2] | 0;
  $10 = HEAP32[$8 >> 2] | 0;
  $8 = 0;
  block23 : {
   block22 : {
    label11 : while (1) {
     if ((HEAP32[($10 + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 >= $9 >>> 0) {
      break block22
     }
     $8 = $8 + 1 | 0;
     if ($8 >>> $29 | 0) {
      break block23
     }
     continue label11;
    };
   }
   HEAP32[$12 >> 2] = 1;
  }
  return $30 | 0;
 }
 
 function _emscripten_stack_restore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function _emscripten_stack_alloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function __strerror_l($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (HEAPU16[((($0 >>> 0 > 153 >>> 0 ? 0 : $0) << 1 | 0) + 83648 | 0) >> 1] | 0) + 81728 | 0 | 0;
 }
 
 function strerror($0) {
  $0 = $0 | 0;
  return __strerror_l($0 | 0, $0 | 0) | 0 | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$FLAC__stream_encoder_set_total_samples_estimate($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $12 = 0, $3 = 0, $5 = 0, $5$hi = 0, $8$hi = 0;
  $3 = $0;
  i64toi32_i32$0 = 0;
  $5 = $1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $12 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $12 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $5;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return FLAC__stream_encoder_set_total_samples_estimate($3 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  _emscripten_tempret_set($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, __stdio_close, __stdio_write, __stdio_seek, wrapper_cmp, seekpoint_compare_, __stdio_read, FLAC__lpc_restore_signal, FLAC__lpc_restore_signal_wide, read_callback_, read_callback_proxy_, __emscripten_stdout_close, __emscripten_stdout_seek, FLAC__lpc_compute_residual_from_qlp_coefficients, FLAC__lpc_compute_residual_from_qlp_coefficients_wide, FLAC__fixed_compute_best_predictor_wide, FLAC__fixed_compute_best_predictor, precompute_partition_info_sums_, FLAC__lpc_compute_autocorrelation, verify_read_callback_, verify_write_callback_, verify_metadata_callback_, verify_error_callback_]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": __wasm_call_ctors, 
  "FLAC__stream_decoder_new": FLAC__stream_decoder_new, 
  "FLAC__stream_decoder_delete": FLAC__stream_decoder_delete, 
  "FLAC__stream_decoder_finish": FLAC__stream_decoder_finish, 
  "FLAC__stream_decoder_init_stream": FLAC__stream_decoder_init_stream, 
  "FLAC__stream_decoder_reset": FLAC__stream_decoder_reset, 
  "FLAC__stream_decoder_init_ogg_stream": FLAC__stream_decoder_init_ogg_stream, 
  "FLAC__stream_decoder_set_ogg_serial_number": FLAC__stream_decoder_set_ogg_serial_number, 
  "FLAC__stream_decoder_set_md5_checking": FLAC__stream_decoder_set_md5_checking, 
  "FLAC__stream_decoder_set_metadata_respond": FLAC__stream_decoder_set_metadata_respond, 
  "FLAC__stream_decoder_set_metadata_respond_application": FLAC__stream_decoder_set_metadata_respond_application, 
  "FLAC__stream_decoder_set_metadata_respond_all": FLAC__stream_decoder_set_metadata_respond_all, 
  "FLAC__stream_decoder_set_metadata_ignore": FLAC__stream_decoder_set_metadata_ignore, 
  "FLAC__stream_decoder_set_metadata_ignore_application": FLAC__stream_decoder_set_metadata_ignore_application, 
  "FLAC__stream_decoder_set_metadata_ignore_all": FLAC__stream_decoder_set_metadata_ignore_all, 
  "FLAC__stream_decoder_get_state": FLAC__stream_decoder_get_state, 
  "FLAC__stream_decoder_get_md5_checking": FLAC__stream_decoder_get_md5_checking, 
  "FLAC__stream_decoder_process_single": FLAC__stream_decoder_process_single, 
  "FLAC__stream_decoder_process_until_end_of_metadata": FLAC__stream_decoder_process_until_end_of_metadata, 
  "FLAC__stream_decoder_process_until_end_of_stream": FLAC__stream_decoder_process_until_end_of_stream, 
  "FLAC__stream_encoder_new": FLAC__stream_encoder_new, 
  "FLAC__stream_encoder_delete": FLAC__stream_encoder_delete, 
  "FLAC__stream_encoder_finish": FLAC__stream_encoder_finish, 
  "FLAC__stream_encoder_init_stream": FLAC__stream_encoder_init_stream, 
  "FLAC__stream_encoder_init_ogg_stream": FLAC__stream_encoder_init_ogg_stream, 
  "FLAC__stream_encoder_set_ogg_serial_number": FLAC__stream_encoder_set_ogg_serial_number, 
  "FLAC__stream_encoder_set_verify": FLAC__stream_encoder_set_verify, 
  "FLAC__stream_encoder_set_channels": FLAC__stream_encoder_set_channels, 
  "FLAC__stream_encoder_set_bits_per_sample": FLAC__stream_encoder_set_bits_per_sample, 
  "FLAC__stream_encoder_set_sample_rate": FLAC__stream_encoder_set_sample_rate, 
  "FLAC__stream_encoder_set_compression_level": FLAC__stream_encoder_set_compression_level, 
  "FLAC__stream_encoder_set_blocksize": FLAC__stream_encoder_set_blocksize, 
  "FLAC__stream_encoder_set_total_samples_estimate": legalstub$FLAC__stream_encoder_set_total_samples_estimate, 
  "FLAC__stream_encoder_set_metadata": FLAC__stream_encoder_set_metadata, 
  "FLAC__stream_encoder_get_state": FLAC__stream_encoder_get_state, 
  "FLAC__stream_encoder_get_verify_decoder_state": FLAC__stream_encoder_get_verify_decoder_state, 
  "FLAC__stream_encoder_get_verify": FLAC__stream_encoder_get_verify, 
  "FLAC__stream_encoder_process": FLAC__stream_encoder_process, 
  "FLAC__stream_encoder_process_interleaved": FLAC__stream_encoder_process_interleaved, 
  "fflush": fflush, 
  "strerror": strerror, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "_emscripten_stack_restore": _emscripten_stack_restore, 
  "_emscripten_stack_alloc": _emscripten_stack_alloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort('malloc() called but not included in the build - add `_malloc` to EXPORTED_FUNCTIONS');
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort('free() called but not included in the build - add `_free` to EXPORTED_FUNCTIONS');
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */
var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');

// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */
function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith('_')) {
      librarySymbol = '$' + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
    }
    warnOnce(msg);
  });

  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module['noFSInit'] && !FS.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;
function findWasmBinary() {
    var f = 'libflac.dev.wasm';
    if (!isDataURI(f)) {
      return locateFile(f);
    }
    return f;
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {
      // Fall back to getBinarySync below;
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile)
      // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
      && !isFileURI(binaryFile)
      // Avoid instantiateStreaming() on Node.js environment for now, as while
      // Node.js v18.1.0 implements it, it does not have a full fetch()
      // implementation yet.
      //
      // Reference:
      //   https://github.com/emscripten-core/emscripten/pull/16917
      && !ENVIRONMENT_IS_NODE
     ) {
    try {
      var response = fetch(binaryFile, { credentials: 'same-origin' });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err('falling back to ArrayBuffer instantiation');
      // fall back of instantiateArrayBuffer below
    };
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    
    assert(wasmTable, 'table not found in wasm exports');

    addOnInit(wasmExports['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
        return false;
    }
  }

  wasmBinaryFile ??= findWasmBinary();

    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===
// end include: preamble.js


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    };

  var __abort_js = () =>
      abort('native code called abort()');

  var getHeapMax = () =>
      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
      // for any code that deals with heap sizes, which would require special
      // casing all heap size related code to treat 0 specially.
      2147483648;
  
  var alignMemory = (size, alignment) => {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    };
  
  var growMemory = (size) => {
      var b = wasmMemory.buffer;
      var pages = ((size - b.byteLength + 65535) / 65536) | 0;
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size
        updateMemoryViews();
        return 1 /*success*/;
      } catch(e) {
        err(`growMemory: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      // With multithreaded builds, races can happen (another thread might increase the size
      // in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1.  Always increase heap size to at least the requested size, rounded up
      //     to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
      //     geometrically: increase the heap size according to
      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
      //     linearly: increase the heap size by at least
      //     MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4.  If we were unable to allocate as much memory, it may be due to
      //     over-eager decision to excessively reserve due to (3) above.
      //     Hence if an allocation fails, cut down on the amount of excess
      //     growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager
      // reservation that fails, cut down on the attempted size and reserve a
      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = growMemory(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
      return false;
    };

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.slice(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.slice(0, -1);
        }
        return root + dir;
      },
  basename:(path) => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
      // This block is not needed on v19+ since crypto.getRandomValues is builtin
      if (ENVIRONMENT_IS_NODE) {
        var nodeCrypto = require('crypto');
        return (view) => nodeCrypto.randomFillSync(view);
      }
  
      return (view) => crypto.getRandomValues(view);
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).slice(1);
        to = PATH_FS.resolve(to).slice(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
  var FS_stdin_getChar_buffer = [];
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  /** @type {function(string, boolean=, number=)} */
  var intArrayFromString = (stringy, dontAddNull, length) => {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    };
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          // we will read data by chunks of BUFSIZE
          var BUFSIZE = 256;
          var buf = Buffer.alloc(BUFSIZE);
          var bytesRead = 0;
  
          // For some reason we must suppress a closure warning here, even though
          // fd definitely exists on process.stdin, and is even the proper way to
          // get the fd of stdin,
          // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
          // This started to happen after moving this logic out of library_tty.js,
          // so it is related to the surrounding code in some unclear manner.
          /** @suppress {missingProperties} */
          var fd = process.stdin.fd;
  
          try {
            bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
          } catch(e) {
            // Cross-platform differences: on Windows, reading EOF throws an
            // exception, but on other OSes, reading EOF returns 0. Uniformize
            // behavior by treating the EOF exception to return 0.
            if (e.toString().includes('EOF')) bytesRead = 0;
            else throw e;
          }
  
          if (bytesRead > 0) {
            result = buf.slice(0, bytesRead).toString('utf-8');
          }
        } else
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.atime = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.mtime = stream.node.ctime = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var zeroMemory = (address, size) => {
      HEAPU8.fill(0, address, address + size);
    };
  
  var mmapAlloc = (size) => {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16895, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              allocate: MEMFS.stream_ops.allocate,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.atime = node.mtime = node.ctime = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.atime = parent.mtime = parent.ctime = node.atime;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.atime);
          attr.mtime = new Date(node.mtime);
          attr.ctime = new Date(node.ctime);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          for (const key of ["mode", "atime", "mtime", "ctime"]) {
            if (attr[key] != null) {
              node[key] = attr[key];
            }
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {}
          if (new_node) {
            if (FS.isDir(old_node.mode)) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
            FS.hashRemoveNode(new_node);
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          new_dir.contents[new_name] = old_node;
          old_node.name = new_name;
          new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  readdir(node) {
          return ['.', '..', ...Object.keys(node.contents)];
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0o777 | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.mtime = node.ctime = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  allocate(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  var asyncLoad = async (url) => {
      var arrayBuffer = await readAsync(url);
      assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
      return new Uint8Array(arrayBuffer);
    };
  
  
  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    };
  
  var preloadPlugins = Module['preloadPlugins'] || [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url).then(processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  
  var strError = (errno) => UTF8ToString(_strerror(errno));
  
  var ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  ErrnoError:class extends Error {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          super(runtimeInitialized ? strError(errno) : '');
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
        }
      },
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
          this.atime = this.mtime = this.ctime = Date.now();
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        if (!path) {
          throw new FS.ErrnoError(44);
        }
        opts.follow_mount ??= true
  
        if (!PATH.isAbs(path)) {
          path = FS.cwd() + '/' + path;
        }
  
        // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
        linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
  
          // start at the root
          var current = FS.root;
          var current_path = '/';
  
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
  
            if (parts[i] === '.') {
              continue;
            }
  
            if (parts[i] === '..') {
              current_path = PATH.dirname(current_path);
              current = current.parent;
              continue;
            }
  
            current_path = PATH.join2(current_path, parts[i]);
            try {
              current = FS.lookupNode(current, parts[i]);
            } catch (e) {
              // if noent_okay is true, suppress a ENOENT in the last component
              // and return an object with an undefined node. This is needed for
              // resolving symlinks in the path when creating a file.
              if ((e?.errno === 44) && islast && opts.noent_okay) {
                return { path: current_path };
              }
              throw e;
            }
  
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
              current = current.mounted.root;
            }
  
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (FS.isLink(current.mode) && (!islast || opts.follow)) {
              if (!current.node_ops.readlink) {
                throw new FS.ErrnoError(52);
              }
              var link = current.node_ops.readlink(current);
              if (!PATH.isAbs(link)) {
                link = PATH.dirname(current_path) + '/' + link;
              }
              path = link + '/' + parts.slice(i + 1).join('/');
              continue linkloop;
            }
          }
          return { path: current_path, node: current };
        }
        throw new FS.ErrnoError(32);
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        if (!FS.isDir(dir.mode)) {
          return 54;
        }
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' // opening for write
              || (flags & (512 | 64))) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  checkOpExists(op, err) {
        if (!op) {
          throw new FS.ErrnoError(err);
        }
        return op;
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
        assert(fd >= -1);
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  doSetAttr(stream, node, attr) {
        var setattr = stream?.stream_ops.setattr;
        var arg = setattr ? stream : node;
        setattr ??= node.node_ops.setattr;
        FS.checkOpExists(setattr, 63)
        setattr(arg, attr);
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name) {
          throw new FS.ErrnoError(28);
        }
        if (name === '.' || name === '..') {
          throw new FS.ErrnoError(20);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  statfs(path) {
        return FS.statfsNode(FS.lookupPath(path, {follow: true}).node);
      },
  statfsStream(stream) {
        // We keep a separate statfsStream function because noderawfs overrides
        // it. In noderawfs, stream.node is sometimes null. Instead, we need to
        // look at stream.path.
        return FS.statfsNode(stream.node);
      },
  statfsNode(node) {
        // NOTE: None of the defaults here are true. We're just returning safe and
        //       sane values. Currently nodefs and rawfs replace these defaults,
        //       other file systems leave them alone.
        var rtn = {
          bsize: 4096,
          frsize: 4096,
          blocks: 1e6,
          bfree: 5e5,
          bavail: 5e5,
          files: FS.nextInode,
          ffree: FS.nextInode - 1,
          fsid: 42,
          flags: 2,
          namelen: 255,
        };
  
        if (node.node_ops.statfs) {
          Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
        }
        return rtn;
      },
  create(path, mode = 0o666) {
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode = 0o777) {
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 0o666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
        return readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return link.node_ops.readlink(link);
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
        return getattr(node);
      },
  fstat(fd) {
        var stream = FS.getStreamChecked(fd);
        var node = stream.node;
        var getattr = stream.stream_ops.getattr;
        var arg = getattr ? stream : node;
        getattr ??= node.node_ops.getattr;
        FS.checkOpExists(getattr, 63)
        return getattr(arg);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  doChmod(stream, node, mode, dontFollow) {
        FS.doSetAttr(stream, node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          ctime: Date.now(),
          dontFollow
        });
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChmod(null, node, mode, dontFollow);
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.doChmod(stream, stream.node, mode, false);
      },
  doChown(stream, node, dontFollow) {
        FS.doSetAttr(stream, node, {
          timestamp: Date.now(),
          dontFollow
          // we ignore the uid / gid for now
        });
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChown(null, node, dontFollow);
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.doChown(stream, stream.node, false);
      },
  doTruncate(stream, node, len) {
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.doSetAttr(stream, node, {
          size: len,
          timestamp: Date.now()
        });
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doTruncate(null, node, len);
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if (len < 0 || (stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.doTruncate(stream, stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          atime: atime,
          mtime: mtime
        });
      },
  open(path, flags, mode = 0o666) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        var isDirPath;
        if (typeof path == 'object') {
          node = path;
        } else {
          isDirPath = path.endsWith("/");
          // noent_okay makes it so that if the final component of the path
          // doesn't exist, lookupPath returns `node: undefined`. `path` will be
          // updated to point to the target of all symlinks.
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072),
            noent_okay: true
          });
          node = lookup.node;
          path = lookup.path;
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else if (isDirPath) {
            throw new FS.ErrnoError(31);
          } else {
            // node doesn't exist, try to create it
            // Ignore the permission bits here to ensure we can `open` this new
            // file below. We use chmod below the apply the permissions once the
            // file is open.
            node = FS.mknod(path, mode | 0o777, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (created) {
          FS.chmod(node, mode & 0o777);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  allocate(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        assert(offset >= 0);
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
          llseek: () => 0,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomFill(randomBuffer);
            randomLeft = randomBuffer.byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16895, 73);
            node.stream_ops = {
              llseek: MEMFS.stream_ops.llseek,
            };
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                  id: fd + 1,
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              },
              readdir() {
                return Array.from(FS.streams.entries())
                  .filter(([k, v]) => v)
                  .map(([k, v]) => k.toString());
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
        assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
        assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
      },
  staticInit() {
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },
  init(input, output, error) {
        assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.atime = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.mtime = stream.node.ctime = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  absolutePath() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
  createFolder() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
  createLink() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
  joinPath() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
  mmapAlloc() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
  standardizePath() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      },
  };
  
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return dir + '/' + path;
      },
  writeStat(buf, stat) {
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        return 0;
      },
  writeStatFs(buf, stats) {
        HEAP32[(((buf)+(4))>>2)] = stats.bsize;
        HEAP32[(((buf)+(40))>>2)] = stats.bsize;
        HEAP32[(((buf)+(8))>>2)] = stats.blocks;
        HEAP32[(((buf)+(12))>>2)] = stats.bfree;
        HEAP32[(((buf)+(16))>>2)] = stats.bavail;
        HEAP32[(((buf)+(20))>>2)] = stats.files;
        HEAP32[(((buf)+(24))>>2)] = stats.ffree;
        HEAP32[(((buf)+(28))>>2)] = stats.fsid;
        HEAP32[(((buf)+(44))>>2)] = stats.flags;  // ST_NOSUID
        HEAP32[(((buf)+(36))>>2)] = stats.namelen;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  var convertI32PairToI53Checked = (lo, hi) => {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    };
  function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
    var offset = convertI32PairToI53Checked(offset_low, offset_high);
  
    
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  var getCFunc = (ident) => {
      var func = Module['_' + ident]; // closure exported function
      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
      return func;
    };
  
  var writeArrayToMemory = (array, buffer) => {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    };
  
  
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  
  
  
  
  
    /**
     * @param {string|null=} returnType
     * @param {Array=} argTypes
     * @param {Arguments|Array=} args
     * @param {Object=} opts
     */
  var ccall = (ident, returnType, argTypes, args, opts) => {
      // For fast lookup of conversion functions
      var toC = {
        'string': (str) => {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) { // null string
            ret = stringToUTF8OnStack(str);
          }
          return ret;
        },
        'array': (arr) => {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }
      };
  
      function convertReturnValue(ret) {
        if (returnType === 'string') {
          return UTF8ToString(ret);
        }
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
      }
  
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      assert(returnType !== 'array', 'Return type should not be "array".');
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func(...cArgs);
      function onDone(ret) {
        if (stack !== 0) stackRestore(stack);
        return convertReturnValue(ret);
      }
  
      ret = onDone(ret);
      return ret;
    };

  
  
    /**
     * @param {string=} returnType
     * @param {Array=} argTypes
     * @param {Object=} opts
     */
  var cwrap = (ident, returnType, argTypes, opts) => {
      return (...args) => ccall(ident, returnType, argTypes, args, opts);
    };



  var uleb128Encode = (n, target) => {
      assert(n < 16384);
      if (n < 128) {
        target.push(n);
      } else {
        target.push((n % 128) | 128, n >> 7);
      }
    };
  
  var sigToWasmTypes = (sig) => {
      assert(!sig.includes('j'), 'i64 not permitted in function signatures when WASM_BIGINT is disabled');
      var typeNames = {
        'i': 'i32',
        'j': 'i64',
        'f': 'f32',
        'd': 'f64',
        'e': 'externref',
        'p': 'i32',
      };
      var type = {
        parameters: [],
        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
      };
      for (var i = 1; i < sig.length; ++i) {
        assert(sig[i] in typeNames, 'invalid signature char: ' + sig[i]);
        type.parameters.push(typeNames[sig[i]]);
      }
      return type;
    };
  
  var generateFuncType = (sig, target) => {
      var sigRet = sig.slice(0, 1);
      var sigParam = sig.slice(1);
      var typeCodes = {
        'i': 0x7f, // i32
        'p': 0x7f, // i32
        'j': 0x7e, // i64
        'f': 0x7d, // f32
        'd': 0x7c, // f64
        'e': 0x6f, // externref
      };
  
      // Parameters, length + signatures
      target.push(0x60 /* form: func */);
      uleb128Encode(sigParam.length, target);
      for (var i = 0; i < sigParam.length; ++i) {
        assert(sigParam[i] in typeCodes, 'invalid signature char: ' + sigParam[i]);
        target.push(typeCodes[sigParam[i]]);
      }
  
      // Return values, length + signatures
      // With no multi-return in MVP, either 0 (void) or 1 (anything else)
      if (sigRet == 'v') {
        target.push(0x00);
      } else {
        target.push(0x01, typeCodes[sigRet]);
      }
    };
  var convertJsFunctionToWasm = (func, sig) => {
      // return func;
    };
  
  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        /** @suppress {checkTypes} */
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      /** @suppress {checkTypes} */
      assert(wasmTable.get(funcPtr) == func, 'JavaScript-side Wasm function table mirror is out of date!');
      return func;
    };
  
  var updateTableMap = (offset, count) => {
      if (functionsInTableMap) {
        for (var i = offset; i < offset + count; i++) {
          var item = getWasmTableEntry(i);
          // Ignore null values.
          if (item) {
            functionsInTableMap.set(item, i);
          }
        }
      }
    };
  
  var functionsInTableMap;
  
  var getFunctionAddress = (func) => {
      // First, create the map if this is the first use.
      if (!functionsInTableMap) {
        functionsInTableMap = new WeakMap();
        updateTableMap(0, wasmTable.length);
      }
      return functionsInTableMap.get(func) || 0;
    };
  
  
  var freeTableIndexes = [];
  
  var getEmptyTableSlot = () => {
      // Reuse a free index if there is one, otherwise grow.
      if (freeTableIndexes.length) {
        return freeTableIndexes.pop();
      }
      // Grow the table
      try {
        /** @suppress {checkTypes} */
        wasmTable.grow(1);
      } catch (err) {
        if (!(err instanceof RangeError)) {
          throw err;
        }
        throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
      }
      return wasmTable.length - 1;
    };
  
  
  
  var setWasmTableEntry = (idx, func) => {
      /** @suppress {checkTypes} */
      wasmTable.set(idx, func);
      // With ABORT_ON_WASM_EXCEPTIONS wasmTable.get is overridden to return wrapped
      // functions so we need to call it here to retrieve the potential wrapper correctly
      // instead of just storing 'func' directly into wasmTableMirror
      /** @suppress {checkTypes} */
      wasmTableMirror[idx] = wasmTable.get(idx);
    };
  
  /** @param {string=} sig */
  var addFunction = (func, sig) => {
      assert(typeof func != 'undefined');
      // Check if the function is already in the table, to ensure each function
      // gets a unique index.
      var rtn = getFunctionAddress(func);
      if (rtn) {
        return rtn;
      }
  
      // It's not in the table, add it now.
  
      var ret = getEmptyTableSlot();
  
      // Set the new value.
      try {
        // Attempting to call this with JS function will cause of table.set() to fail
        setWasmTableEntry(ret, func);
      } catch (err) {
        if (!(err instanceof TypeError)) {
          throw err;
        }
        assert(typeof sig != 'undefined', 'Missing signature argument to addFunction: ' + func);
        var wrapped = convertJsFunctionToWasm(func, sig);
        setWasmTableEntry(ret, wrapped);
      }
  
      functionsInTableMap.set(func, ret);
  
      return ret;
    };

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();
  // Set module methods based on EXPORTED_RUNTIME_METHODS
  ;
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write
};
var wasmExports;
createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var _FLAC__stream_decoder_new = Module['_FLAC__stream_decoder_new'] = createExportWrapper('FLAC__stream_decoder_new', 0);
var _FLAC__stream_decoder_delete = Module['_FLAC__stream_decoder_delete'] = createExportWrapper('FLAC__stream_decoder_delete', 1);
var _FLAC__stream_decoder_finish = Module['_FLAC__stream_decoder_finish'] = createExportWrapper('FLAC__stream_decoder_finish', 1);
var _FLAC__stream_decoder_init_stream = Module['_FLAC__stream_decoder_init_stream'] = createExportWrapper('FLAC__stream_decoder_init_stream', 10);
var _FLAC__stream_decoder_reset = Module['_FLAC__stream_decoder_reset'] = createExportWrapper('FLAC__stream_decoder_reset', 1);
var _FLAC__stream_decoder_init_ogg_stream = Module['_FLAC__stream_decoder_init_ogg_stream'] = createExportWrapper('FLAC__stream_decoder_init_ogg_stream', 10);
var _FLAC__stream_decoder_set_ogg_serial_number = Module['_FLAC__stream_decoder_set_ogg_serial_number'] = createExportWrapper('FLAC__stream_decoder_set_ogg_serial_number', 2);
var _FLAC__stream_decoder_set_md5_checking = Module['_FLAC__stream_decoder_set_md5_checking'] = createExportWrapper('FLAC__stream_decoder_set_md5_checking', 2);
var _FLAC__stream_decoder_set_metadata_respond = Module['_FLAC__stream_decoder_set_metadata_respond'] = createExportWrapper('FLAC__stream_decoder_set_metadata_respond', 2);
var _FLAC__stream_decoder_set_metadata_respond_application = Module['_FLAC__stream_decoder_set_metadata_respond_application'] = createExportWrapper('FLAC__stream_decoder_set_metadata_respond_application', 2);
var _FLAC__stream_decoder_set_metadata_respond_all = Module['_FLAC__stream_decoder_set_metadata_respond_all'] = createExportWrapper('FLAC__stream_decoder_set_metadata_respond_all', 1);
var _FLAC__stream_decoder_set_metadata_ignore = Module['_FLAC__stream_decoder_set_metadata_ignore'] = createExportWrapper('FLAC__stream_decoder_set_metadata_ignore', 2);
var _FLAC__stream_decoder_set_metadata_ignore_application = Module['_FLAC__stream_decoder_set_metadata_ignore_application'] = createExportWrapper('FLAC__stream_decoder_set_metadata_ignore_application', 2);
var _FLAC__stream_decoder_set_metadata_ignore_all = Module['_FLAC__stream_decoder_set_metadata_ignore_all'] = createExportWrapper('FLAC__stream_decoder_set_metadata_ignore_all', 1);
var _FLAC__stream_decoder_get_state = Module['_FLAC__stream_decoder_get_state'] = createExportWrapper('FLAC__stream_decoder_get_state', 1);
var _FLAC__stream_decoder_get_md5_checking = Module['_FLAC__stream_decoder_get_md5_checking'] = createExportWrapper('FLAC__stream_decoder_get_md5_checking', 1);
var _FLAC__stream_decoder_process_single = Module['_FLAC__stream_decoder_process_single'] = createExportWrapper('FLAC__stream_decoder_process_single', 1);
var _FLAC__stream_decoder_process_until_end_of_metadata = Module['_FLAC__stream_decoder_process_until_end_of_metadata'] = createExportWrapper('FLAC__stream_decoder_process_until_end_of_metadata', 1);
var _FLAC__stream_decoder_process_until_end_of_stream = Module['_FLAC__stream_decoder_process_until_end_of_stream'] = createExportWrapper('FLAC__stream_decoder_process_until_end_of_stream', 1);
var _FLAC__stream_encoder_new = Module['_FLAC__stream_encoder_new'] = createExportWrapper('FLAC__stream_encoder_new', 0);
var _FLAC__stream_encoder_delete = Module['_FLAC__stream_encoder_delete'] = createExportWrapper('FLAC__stream_encoder_delete', 1);
var _FLAC__stream_encoder_finish = Module['_FLAC__stream_encoder_finish'] = createExportWrapper('FLAC__stream_encoder_finish', 1);
var _FLAC__stream_encoder_init_stream = Module['_FLAC__stream_encoder_init_stream'] = createExportWrapper('FLAC__stream_encoder_init_stream', 6);
var _FLAC__stream_encoder_init_ogg_stream = Module['_FLAC__stream_encoder_init_ogg_stream'] = createExportWrapper('FLAC__stream_encoder_init_ogg_stream', 7);
var _FLAC__stream_encoder_set_ogg_serial_number = Module['_FLAC__stream_encoder_set_ogg_serial_number'] = createExportWrapper('FLAC__stream_encoder_set_ogg_serial_number', 2);
var _FLAC__stream_encoder_set_verify = Module['_FLAC__stream_encoder_set_verify'] = createExportWrapper('FLAC__stream_encoder_set_verify', 2);
var _FLAC__stream_encoder_set_channels = Module['_FLAC__stream_encoder_set_channels'] = createExportWrapper('FLAC__stream_encoder_set_channels', 2);
var _FLAC__stream_encoder_set_bits_per_sample = Module['_FLAC__stream_encoder_set_bits_per_sample'] = createExportWrapper('FLAC__stream_encoder_set_bits_per_sample', 2);
var _FLAC__stream_encoder_set_sample_rate = Module['_FLAC__stream_encoder_set_sample_rate'] = createExportWrapper('FLAC__stream_encoder_set_sample_rate', 2);
var _FLAC__stream_encoder_set_compression_level = Module['_FLAC__stream_encoder_set_compression_level'] = createExportWrapper('FLAC__stream_encoder_set_compression_level', 2);
var _FLAC__stream_encoder_set_blocksize = Module['_FLAC__stream_encoder_set_blocksize'] = createExportWrapper('FLAC__stream_encoder_set_blocksize', 2);
var _FLAC__stream_encoder_set_total_samples_estimate = Module['_FLAC__stream_encoder_set_total_samples_estimate'] = createExportWrapper('FLAC__stream_encoder_set_total_samples_estimate', 3);
var _FLAC__stream_encoder_set_metadata = Module['_FLAC__stream_encoder_set_metadata'] = createExportWrapper('FLAC__stream_encoder_set_metadata', 3);
var _FLAC__stream_encoder_get_state = Module['_FLAC__stream_encoder_get_state'] = createExportWrapper('FLAC__stream_encoder_get_state', 1);
var _FLAC__stream_encoder_get_verify_decoder_state = Module['_FLAC__stream_encoder_get_verify_decoder_state'] = createExportWrapper('FLAC__stream_encoder_get_verify_decoder_state', 1);
var _FLAC__stream_encoder_get_verify = Module['_FLAC__stream_encoder_get_verify'] = createExportWrapper('FLAC__stream_encoder_get_verify', 1);
var _FLAC__stream_encoder_process = Module['_FLAC__stream_encoder_process'] = createExportWrapper('FLAC__stream_encoder_process', 3);
var _FLAC__stream_encoder_process_interleaved = Module['_FLAC__stream_encoder_process_interleaved'] = createExportWrapper('FLAC__stream_encoder_process_interleaved', 3);
var _fflush = createExportWrapper('fflush', 1);
var _strerror = createExportWrapper('strerror', 1);
var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();
var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module['ccall'] = ccall;
Module['cwrap'] = cwrap;
Module['addFunction'] = addFunction;
Module['setValue'] = setValue;
Module['getValue'] = getValue;
var missingLibrarySymbols = [
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getTempRet0',
  'setTempRet0',
  'exitJS',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'readEmAsmArgs',
  'jstoi_q',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'keepRuntimeAlive',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'asmjsMangle',
  'HandleAllocator',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'stringToNewUTF8',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'getEnvStrings',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'safeSetTimeout',
  'setImmediateWrapped',
  'safeRequestAnimationFrame',
  'clearImmediateWrapped',
  'registerPostMainLoop',
  'registerPreMainLoop',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'ExceptionInfo',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_unlink',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'setErrNo',
  'demangle',
  'stackTrace',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'convertI32PairToI53Checked',
  'stackSave',
  'stackRestore',
  'stackAlloc',
  'ptrToString',
  'zeroMemory',
  'getHeapMax',
  'growMemory',
  'ENV',
  'ERRNO_CODES',
  'strError',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'jstoi_s',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'wasmTable',
  'noExitRuntime',
  'getCFunc',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'freeTableIndexes',
  'functionsInTableMap',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'UTF16Decoder',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'JSEvents',
  'specialHTMLTargets',
  'findCanvasEventTarget',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'UNWIND_CACHE',
  'ExitStatus',
  'doReadv',
  'doWritev',
  'initRandomFill',
  'randomFill',
  'emSetImmediate',
  'emClearImmediate_deps',
  'emClearImmediate',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'Browser',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_createPreloadedFile',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar_buffer',
  'FS_stdin_getChar',
  'FS_createPath',
  'FS_createDevice',
  'FS_readFile',
  'FS',
  'FS_createDataFile',
  'FS_createLazyFile',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'GL',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    Module['onRuntimeInitialized']?.();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach((name) => {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();

// end include: postamble.js

// include: /home/tema/libflac.js/libflac_post.js
//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){

	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 *
 * @param {POINTER} p_frame
 * @param {CodingOptions} [enc_opt]
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame, enc_opt){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use.
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;
	var numberType = number_type === 0? 'frames' : 'samples';

	var crc = Module.getValue(p_frame+36,'i8');

	var subframes;
	if(enc_opt && enc_opt.analyseSubframes){
		var subOffset = {offset: 40};
		subframes = [];
		for(var i=0; i < channels; ++i){
			subframes.push(_readSubFrameHdr(p_frame, subOffset, blocksize, enc_opt));
		}
		//TODO read footer
		// console.log('  footer crc ', Module.getValue(p_frame + subOffset.offset,'i16'));
	}

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		channelAssignment: channel_assignment,
		bitsPerSample: bits_per_sample,
		number: number,
		numberType: numberType,
		crc: crc,
		subframes: subframes
	};
}


function _readSubFrameHdr(p_subframe, subOffset, block_size, enc_opt){
	/*
	FLAC__SubframeType 	type
	union {
	   FLAC__Subframe_Constant   constant
	   FLAC__Subframe_Fixed   fixed
	   FLAC__Subframe_LPC   lpc
	   FLAC__Subframe_Verbatim   verbatim
	} 	data
	unsigned 	wasted_bits
	*/

	var type = Module.getValue(p_subframe + subOffset.offset, 'i32');
	subOffset.offset += 4;

	var data;
	switch(type){
		case 0:	//FLAC__SUBFRAME_TYPE_CONSTANT
			data = {value: Module.getValue(p_subframe + subOffset.offset, 'i32')};
			subOffset.offset += 284;//4;
			break;
		case 1:	//FLAC__SUBFRAME_TYPE_VERBATIM
			data = Module.getValue(p_subframe + subOffset.offset, 'i32');
			subOffset.offset += 284;//4;
			break;
		case 2:	//FLAC__SUBFRAME_TYPE_FIXED
			data = _readSubFrameHdrFixedData(p_subframe, subOffset, block_size, false, enc_opt);
			break;
		case 3:	//FLAC__SUBFRAME_TYPE_LPC
			data = _readSubFrameHdrFixedData(p_subframe, subOffset, block_size, true, enc_opt);
			break;
	}

	var offset =  subOffset.offset;
	var wasted_bits = Module.getValue(p_subframe + offset, 'i32');
	subOffset.offset += 4;

	return {
		type: type,//['CONSTANT', 'VERBATIM', 'FIXED', 'LPC'][type],
		data: data,
		wastedBits: wasted_bits
	}
}

function _readSubFrameHdrFixedData(p_subframe_data, subOffset, block_size, is_lpc, enc_opt){

	var offset = subOffset.offset;

	var data = {order: -1, contents: {parameters: [], rawBits: []}};
	//FLAC__Subframe_Fixed:
	// FLAC__EntropyCodingMethod 	entropy_coding_method
	// unsigned 	order
	// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER]
	// const FLAC__int32 * 	residual

	//FLAC__EntropyCodingMethod:
	// FLAC__EntropyCodingMethodType 	type
	// union {
	//    FLAC__EntropyCodingMethod_PartitionedRice   partitioned_rice
	// } 	data

	//FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE	0		Residual is coded by partitioning into contexts, each with it's own 4-bit Rice parameter.
	//FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 1	Residual is coded by partitioning into contexts, each with it's own 5-bit Rice parameter.
	var entropyType = Module.getValue(p_subframe_data, 'i32');
	offset += 4;

	//FLAC__EntropyCodingMethod_PartitionedRice:
	//	unsigned 	order
	var entropyOrder = Module.getValue(p_subframe_data + offset, 'i32');
	data.order = entropyOrder;
	offset += 4;

	//FLAC__EntropyCodingMethod_PartitionedRice:
	//	FLAC__EntropyCodingMethod_PartitionedRiceContents * 	contents
	var partitions = 1 << entropyOrder, params = data.contents.parameters, raws = data.contents.rawBits;
	//FLAC__EntropyCodingMethod_PartitionedRiceContents
	// unsigned * 	parameters
	// unsigned * 	raw_bits
	// unsigned 	capacity_by_order
	var ppart = Module.getValue(p_subframe_data + offset, 'i32');
	var pparams = Module.getValue(ppart, 'i32');
	var praw = Module.getValue(ppart + 4, 'i32');
	data.contents.capacityByOrder = Module.getValue(ppart + 8, 'i32');
	for(var i=0; i < partitions; ++i){
		params.push(Module.getValue(pparams + (i*4), 'i32'));
		raws.push(Module.getValue(praw + (i*4), 'i32'));
	}
	offset += 4;

	//FLAC__Subframe_Fixed:
	//	unsigned 	order
	var order = Module.getValue(p_subframe_data + offset, 'i32');
	offset += 4;

	var warmup = [], res;

	if(is_lpc){
		//FLAC__Subframe_LPC

		// unsigned 	qlp_coeff_precision
		var qlp_coeff_precision = Module.getValue(p_subframe_data + offset, 'i32');
		offset += 4;
		// int 	quantization_level
		var quantization_level = Module.getValue(p_subframe_data + offset, 'i32');
		offset += 4;

		//FLAC__Subframe_LPC :
		// FLAC__int32 	qlp_coeff [FLAC__MAX_LPC_ORDER]
		var qlp_coeff = [];
		for(var i=0; i < order; ++i){
			qlp_coeff.push(Module.getValue(p_subframe_data + offset, 'i32'));
			offset += 4;
		}
		data.qlp_coeff = qlp_coeff;
		data.qlp_coeff_precision = qlp_coeff_precision;
		data.quantization_level = quantization_level;

		//FLAC__Subframe_LPC:
		// FLAC__int32 	warmup [FLAC__MAX_LPC_ORDER]
		offset = subOffset.offset + 152;
		offset = _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order);

		//FLAC__Subframe_LPC:
		// const FLAC__int32 * 	residual
		if(enc_opt && enc_opt.analyseResiduals){
			offset = subOffset.offset + 280;
			res = _readSubFrameHdrResidual(p_subframe_data + offset, block_size, order);
		}

	} else {

		//FLAC__Subframe_Fixed:
		// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER]
		offset = _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order);

		//FLAC__Subframe_Fixed:
		// const FLAC__int32 * 	residual
		offset = subOffset.offset + 32;
		if(enc_opt && enc_opt.analyseResiduals){
			res = _readSubFrameHdrResidual(p_subframe_data + offset, block_size, order);
		}
	}

	subOffset.offset += 284;
	return {
		partition: {
			type: entropyType,
			data: data
		},
		order: order,
		warmup: warmup,
		residual: res
	}
}


function _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order){

	// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER | FLAC__MAX_LPC_ORDER]
	for(var i=0; i < order; ++i){
		warmup.push(Module.getValue(p_subframe_data + offset, 'i32'));
		offset += 4;
	}
	return offset;
}


function _readSubFrameHdrResidual(p_subframe_data_res, block_size, order){
	// const FLAC__int32 * 	residual
	var pres = Module.getValue(p_subframe_data_res, 'i32');
	var res = [];//Module.getValue(pres, 'i32');
	//TODO read residual all values(?)
	// -> "The residual signal, length == (blocksize minus order) samples.
	for(var i=0, size = block_size - order; i < size; ++i){
		res.push(Module.getValue(pres + (i*4), 'i32'));
	}
	return res;
}

function _readConstChar(ptr, length, sb){
	sb.splice(0);
	var ch;
	for(var i=0; i < length; ++i){
		ch = Module.getValue(ptr + i,'i8');
		if(ch === 0){
			break;
		}
		sb.push(String.fromCodePoint(ch));
	}
	return sb.join('');
}

function _readNullTerminatedChar(ptr, sb){
	sb.splice(0);
	var ch = 1, i = 0;
	while(ch > 0){
		ch = Module.getValue(ptr + i++, 'i8');
		if(ch === 0){
			break;
		}
		sb.push(String.fromCodePoint(ch));
	}
	return sb.join('');
}


/**
 * HELPER read/extract padding metadata meta-data from meta-data block
 * @param {POINTER} p_padding_metadata
 * @returns PaddingMetadata
 */
function _readPaddingMetadata(p_padding_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_PADDING (1)

	//FLAC__StreamMetadata_Padding:
	//		int 	dummy
	return {
		dummy: Module.getValue(p_padding_metadata,'i32')
	}
}

/**
 * HELPER read/extract application metadata meta-data from meta-data block
 * @param {POINTER} p_application_metadata
 * @returns ApplicationMetadata
 */
function _readApplicationMetadata(p_application_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_APPLICATION (2)

	//FLAC__StreamMetadata_Application:
	// FLAC__byte 	id [4]
	// FLAC__byte * 	data
	return {
		id : Module.getValue(p_application_metadata,'i32'),
		data: Module.getValue(p_application_metadata + 4,'i32')//TODO should read (binary) data?
	}
}


/**
 * HELPER read/extract seek table metadata meta-data from meta-data block
 * @param {POINTER} p_seek_table_metadata
 * @returns SeekTableMetadata
 */
function _readSeekTableMetadata(p_seek_table_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_SEEKTABLE (3)

	//FLAC__StreamMetadata_SeekTable:
	// 	unsigned 	num_points
	// 	FLAC__StreamMetadata_SeekPoint * 	points

	var num_points = Module.getValue(p_seek_table_metadata,'i32');

	var ptrPoints = Module.getValue(p_seek_table_metadata + 4,'i32');
	var points = [];
	for(var i=0; i < num_points; ++i){

		//FLAC__StreamMetadata_SeekPoint:
		// 	FLAC__uint64 	sample_number
		// 	FLAC__uint64 	stream_offset
		// 	unsigned 	frame_samples

		points.push({
			sample_number: Module.getValue(ptrPoints + (i * 24),'i64'),
			stream_offset: Module.getValue(ptrPoints + (i * 24) + 8,'i64'),
			frame_samples: Module.getValue(ptrPoints + (i * 24) + 16,'i32')
		});
	}

	return {
		num_points: num_points,
		points: points
	}
}

/**
 * HELPER read/extract vorbis comment meta-data from meta-data block
 * @param {POINTER} p_vorbiscomment
 * @returns VorbisComment
 */
function _readVorbisComment(p_vorbiscomment){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_VORBIS_COMMENT (4)

	// FLAC__StreamMetadata_VorbisComment
	// FLAC__StreamMetadata_VorbisComment_Entry vendor_string:
	// 		FLAC__uint32 	length
	// 		FLAC__byte * 	entry
	var length = Module.getValue(p_vorbiscomment,'i32');
	var entry = Module.getValue(p_vorbiscomment + 4,'i32');

	var sb = [];
	var strEntry = _readConstChar(entry, length, sb);

	// FLAC__uint32 	num_comments
	var num_comments = Module.getValue(p_vorbiscomment + 8,'i32');

	// FLAC__StreamMetadata_VorbisComment_Entry * 	comments
	var comments = [], clen, centry;
	var pc = Module.getValue(p_vorbiscomment + 12, 'i32')
	for(var i=0; i < num_comments; ++i){

		// FLAC__StreamMetadata_VorbisComment_Entry
		// 		FLAC__uint32 	length
		// 		FLAC__byte * 	entry

		clen = Module.getValue(pc + (i*8), 'i32');
		if(clen === 0){
			continue;
		}

		centry = Module.getValue(pc + (i*8) + 4, 'i32');
		comments.push(_readConstChar(centry, clen, sb));
	}

	return {
		vendor_string: strEntry,
		num_comments: num_comments,
		comments: comments
	}
}

/**
 * HELPER read/extract cue sheet meta-data from meta-data block
 * @param {POINTER} p_cue_sheet
 * @returns CueSheetMetadata
 */
function _readCueSheetMetadata(p_cue_sheet){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_CUESHEET (5)

	// char 	media_catalog_number [129]
	// FLAC__uint64 	lead_in
	// FLAC__bool 	is_cd
	// unsigned 	num_tracks
	// FLAC__StreamMetadata_CueSheet_Track * 	tracks

	var sb = [];
	var media_catalog_number = _readConstChar(p_cue_sheet, 129, sb);

	var lead_in = Module.getValue(p_cue_sheet + 136,'i64');

	var is_cd = Module.getValue(p_cue_sheet + 144,'i8');
	var num_tracks = Module.getValue(p_cue_sheet + 148,'i32');

	var ptrTrack = Module.getValue(p_cue_sheet + 152,'i32');
	var tracks = [], trackOffset = ptrTrack;
	if(ptrTrack !== 0){

		for(var i=0; i < num_tracks; ++i){

			var tr = _readCueSheetMetadata_track(trackOffset, sb);
			tracks.push(tr);
			trackOffset += 32;
		}
	}

	return {
		media_catalog_number: media_catalog_number,
		lead_in: lead_in,
		is_cd: is_cd,
		num_tracks: num_tracks,
		tracks: tracks
	}
}

/**
 * helper read track data for cue-sheet metadata
 * @param       {POINTER} p_cue_sheet_track pointer to the track data
 * @param       {string[]} sb "string buffer" temporary buffer for reading string (may be reset)
 * @return      {CueSheetTrack}
 */
function _readCueSheetMetadata_track(p_cue_sheet_track, sb){

	// FLAC__StreamMetadata_CueSheet_Track:
	// 		FLAC__uint64 	offset
	// 		FLAC__byte 	number
	// 		char 	isrc [13]
	//		 unsigned 	type:1
	// 		unsigned 	pre_emphasis:1
	// 		FLAC__byte 	num_indices
	// 		FLAC__StreamMetadata_CueSheet_Index * 	indices

	var typePremph = Module.getValue(p_cue_sheet_track + 22,'i8');
	var num_indices = Module.getValue(p_cue_sheet_track + 23,'i8');

	var indices = [];
	var track = {
		offset: Module.getValue(p_cue_sheet_track,'i64'),
		number: Module.getValue(p_cue_sheet_track + 8,'i8') &255,
		isrc: _readConstChar(p_cue_sheet_track + 9, 13, sb),
		type: typePremph & 1? 'NON_AUDIO' : 'AUDIO',
		pre_emphasis: !!(typePremph & 2),
		num_indices: num_indices,
		indices: indices
	}

	var idx;
	if(num_indices > 0){
		idx = Module.getValue(p_cue_sheet_track + 24,'i32');

		//FLAC__StreamMetadata_CueSheet_Index:
		// 	FLAC__uint64 	offset
		// 	FLAC__byte 	number

		for(var i=0; i < num_indices; ++i){
			indices.push({
				offset: Module.getValue(idx + (i*16),'i64'),
				number: Module.getValue(idx + (i*16) + 8,'i8')
			});
		}
	}

	return track;
}

/**
 * HELPER read/extract picture meta-data from meta-data block
 * @param {POINTER} p_picture_metadata
 * @returns PictureMetadata
 */
function _readPictureMetadata(p_picture_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_PICTURE (6)

	// FLAC__StreamMetadata_Picture_Type 	type
	// char * 	mime_type
	// FLAC__byte * 	description
	// FLAC__uint32 	width
	// FLAC__uint32 	height
	// FLAC__uint32 	depth
	// FLAC__uint32 	colors
	// FLAC__uint32 	data_length
	// FLAC__byte * 	data

	var type = Module.getValue(p_picture_metadata,'i32');

	var mime = Module.getValue(p_picture_metadata + 4,'i32');

	var sb = [];
	var mime_type = _readNullTerminatedChar(mime, sb);

	var desc = Module.getValue(p_picture_metadata + 8,'i32');
	var description = _readNullTerminatedChar(desc, sb);

	var width  = Module.getValue(p_picture_metadata + 12,'i32');
	var height = Module.getValue(p_picture_metadata + 16,'i32');
	var depth  = Module.getValue(p_picture_metadata + 20,'i32');
	var colors = Module.getValue(p_picture_metadata + 24,'i32');
	var data_length = Module.getValue(p_picture_metadata + 28,'i32');

	var data = Module.getValue(p_picture_metadata + 32,'i32');

	var buffer = Uint8Array.from(Module.HEAPU8.subarray(data, data + data_length));

	return {
		type: type,
		mime_type: mime_type,
		description: description,
		width: width,
		height: height,
		depth: depth,
		colors: colors,
		data_length: data_length,
		data: buffer
	}
}

/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 *
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 * @param {boolean} applyFix
 * 				whether or not to apply the data repair heuristics
 * 				(handling duplicated/triplicated values in raw data)
 */
function __fix_write_buffer(heapOffset, newBuffer, applyFix){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = !applyFix? 1 : 2;//<- for FIX/workaround, NOTE: e.g. if 24-bit padding occurres, there is no fix/increase needed (more details comment below)
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	// FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated",
	//		or inserted "doubled" which should be ignored, i.e.
	//		x x x	-> x
	//		x x		-> <ignored>
	//		where x is 0 or 255
	// -> HACK for now: remove/"over-read" 2 of the values, for each of these triplets/doublications
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		// NOTE if e.g. 24-bit padding occurres, there does not seem to be no duplication/triplication of 255 or 0, so must not try to fix!
		if(applyFix && (buffer[i] === 0 || buffer[i] === 255)){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

/**
 * @interface FLAC__StreamDecoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_OK"}						0 	Initialization was successful.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}		1 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS"}			2 	A required callback was not supplied.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR"}	3 	An error occurred allocating memory.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE"}		4 	fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED"}		5 	FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
 */
var FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
var FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
var FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
var FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
var FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
var FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

/**
 * @interface FLAC__StreamEncoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_OK"}									0 	Initialization was successful.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR"}							1 	General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}					2 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS"}						3 	A required callback was not supplied.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS"}			4 	The encoder has an invalid setting for number of channels.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE"}				5 	The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE"}					6 	The encoder has an invalid setting for the input sample rate.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE"}					7 	The encoder has an invalid setting for the block size.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER"}					8 	The encoder has an invalid setting for the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION"}			9 	The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER"}	10 	The specified block size is less than the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE"}						11 	The encoder is bound to the Subset but other settings violate it.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA"}						12 	The metadata input to the encoder is invalid, in one of the following ways:
 *																						      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
 *																						      One of the metadata blocks contains an undefined type
 *																						      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
 *																						      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
 *																						      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED"}					13 	FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
 */
var FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
var FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
var FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
var FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
var FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
var FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 *
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

/**
 * Get coding options for the encoder / decoder instance:
 * returns FALSY when not set.
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @returns {CodingOptions} the coding options
 * @private
 * @memberOf Flac
 */
function _getOptions(p_coder){
	if(coders[p_coder]){
		return coders[p_coder]["options"];
	}
}

/**
 * Set coding options for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {CodingOptions} options
 * 			the coding options
 * @private
 * @memberOf Flac
 */
function _setOptions(p_coder, options){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder]["options"] = options;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK;
}, 'iiiiiii');

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: TypedArray, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
}, 'iiiii');

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var dec_opts = _getOptions(p_decoder);
	var frameInfo = _readFrameHdr(p_frame, dec_opts);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	//whether or not to apply data fixing heuristics (e.g. not needed for 24-bit samples)
	var isFix = frameInfo.bitsPerSample !== 24;

	//take padding bits into account for calculating buffer size
	// -> seems to be done for uneven byte sizes, i.e. 1 (8 bits) and 3 (24 bits)
	var padding = (frameInfo.bitsPerSample / 8)%2;
	if(padding > 0){
		block_size += frameInfo.blocksize * padding;
	}

	var data = [];//<- array for the data of each channel
	var bufferOffset, _buffer;

	for(var i=0; i < channels; ++i){

		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');

		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer, isFix);

		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	var res = write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return res !== false? FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE : FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
}, 'iiiii');

/**
 * Decoding error codes.
 *
 * <br>
 * If the error code is not known, value <code>FLAC__STREAM_DECODER_ERROR__UNKNOWN__</code> is used.
 *
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC"}			0   An error in the stream caused the decoder to lose synchronization.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER"}  			1   The decoder encountered a corrupted frame header.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH"}	2   The frame's data did not match the CRC in the footer.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM"}	3   The decoder encountered reserved fields in use in the stream.
 *
 *
 * @interface FLAC__StreamDecoderErrorStatus
 * @memberOf Flac
 */
var DecoderErrorCode = {
	0: 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC',
	1: 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER',
	2: 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH',
	3: 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM'
}

//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = addFunction(function(p_decoder, err, p_client_data){

	//err:
	var msg = DecoderErrorCode[err] || 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen;

	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
}, 'viii');

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block.
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var meta_data = {
		type: type,
		isLast: is_last,
		length: length,
		data: void(0)
	};

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO

		meta_data.data = _readStreamInfo(p_metadata+16);
		metadata_callback_fn(meta_data.data, meta_data);

	} else {

		var data;
		switch(type){
			case 1: //FLAC__METADATA_TYPE_PADDING
				data = _readPaddingMetadata(p_metadata+16);
				break;
			case 2: //FLAC__METADATA_TYPE_APPLICATION
				data =  readApplicationMetadata(p_metadata+16);
				break;
			case 3: //FLAC__METADATA_TYPE_SEEKTABLE
				data = _readSeekTableMetadata(p_metadata+16);
				break;

			case 4: //FLAC__METADATA_TYPE_VORBIS_COMMENT
				data = _readVorbisComment(p_metadata+16);
				break;

			case 5: //FLAC__METADATA_TYPE_CUESHEET
				data = _readCueSheetMetadata(p_metadata+16);
				break;

			case 6: //FLAC__METADATA_TYPE_PICTURE
				data = _readPictureMetadata(p_metadata+16);
				break;
			default: { //NOTE this should not happen, and the raw data is very likely not correct!
				var cod_opts = _getOptions(p_coder);
				if(cod_opts && cod_opts.enableRawMetadata){
					var buffer = Uint8Array.from(HEAPU8.subarray(p_metadata+16, p_metadata+16+length));
					meta_data.raw = buffer;
				}
			}

		}

		meta_data.data = data;
		metadata_callback_fn(void(0), meta_data);
	}

}, 'viii');


////////////// helper fields and functions for event handling
// see exported on()/off() functions
var listeners = {};
var persistedEvents = [];
var add_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(!list){
		list = [listener];
		listeners[eventName] = list;
	} else {
		list.push(listener);
	}
	check_and_trigger_persisted_event(eventName, listener);
};
var check_and_trigger_persisted_event = function(eventName, listener){
	var activated;
	for(var i=persistedEvents.length-1; i >= 0; --i){
		activated = persistedEvents[i];
		if(activated && activated.event === eventName){
			listener.apply(null, activated.args);
			break;
		}
	}
};
var remove_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(list){
		for(var i=list.length-1; i >= 0; --i){
			if(list[i] === listener){
				list.splice(i, 1);
			}
		}
	}
};
/**
 * HELPER: fire an event
 * @param  {string} eventName
 * 										the event name
 * @param  {any[]} [args] OPITIONAL
 * 										the arguments when triggering the listeners
 * @param  {boolean} [isPersist] OPTIONAL (positinal argument!)
 * 										if TRUE, handlers for this event that will be registered after this will get triggered immediately
 * 										(i.e. event is "persistent": once triggered it stays "active")
 *
 */
var do_fire_event = function (eventName, args, isPersist){
	if(_exported['on'+eventName]){
		_exported['on'+eventName].apply(null, args);
	}
	var list = listeners[eventName];
	if(list){
		for(var i=0, size=list.length; i < size; ++i){
			list[i].apply(null, args)
		}
	}
	if(isPersist){
		persistedEvents.push({event: eventName, args: args});
	}
}

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 *
 * <br/><br/>
 * <p>
 * NOTE most functions are named analogous to the original C library functions,
 *      so that its documentation may be used for further reading.
 * </p>
 *
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 *
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Additional options for encoding or decoding
	 * @interface CodingOptions
	 * @memberOf Flac
	 * @property {boolean}  [analyseSubframes] for decoding: include subframes metadata in write-callback metadata, DEFAULT: false
	 * @property {boolean}  [analyseResiduals] for decoding: include residual data in subframes metadata in write-callback metadata, NOTE {@link #analyseSubframes} muste also be enabled, DEFAULT: false
	 * @property {boolean}  [enableRawMetadata] DEBUG option for decoding: enable receiving raw metadata for unknown metadata types in second argument in the metadata-callback, DEFAULT: false
	 *
	 * @see Flac#setOptions
	 * @see Flac~metadata_callback_fn
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	/**
	 * FLAC raw metadata
	 *
	 * @interface MetadataBlock
	 * @memberOf Flac
	 * @property {Flac.FLAC__MetadataType}  type the type of the metadata
	 * @property {boolean}  isLast if it is the last block of metadata
	 * @property {number}  length the length of the metadata block (bytes)
	 * @property {Flac.StreamMetadata | Flac.PaddingMetadata | Flac.ApplicationMetadata | Flac.SeekTableMetadata | Flac.CueSheetMetadata | Flac.PictureMetadata}  [data] the metadata (omitted for unknown metadata types)
	 * @property {Uint8Array}  [raw] raw metadata (for debugging: enable via {@link Flac#setOptions})
	 */
	/**
	 * FLAC padding metadata block
	 *
	 * @interface PaddingMetadata
	 * @memberOf Flac
	 * @property {number}  dummy Conceptually this is an empty struct since we don't store the padding bytes. Empty structs are not allowed by some C compilers, hence the dummy.
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_PADDING
	 */
	/**
	 * FLAC application metadata block
	 *
	 * NOTE the application meta data type is not really supported, i.e. the
	 *      (binary) data is only a pointer to the memory heap.
	 *
	 * @interface ApplicationMetadata
	 * @memberOf Flac
	 * @property {number}  id the application ID
	 * @property {number}  data (pointer)
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_APPLICATION
	 * @see <a href="https://xiph.org/flac/format.html#metadata_block_application">application block format specification</a>
	 */
	/**
	 * FLAC seek table metadata block
	 *
	 * <p>
	 * From the format specification:
	 *
	 * The seek points must be sorted by ascending sample number.
	 *
	 * Each seek point's sample number must be the first sample of the target frame.
	 *
	 * Each seek point's sample number must be unique within the table
	 *
	 * Existence of a SEEKTABLE block implies a correct setting of total_samples in the stream_info block.
	 *
	 * Behavior is undefined when more than one SEEKTABLE block is present in a stream.
	 *
	 * @interface SeekTableMetadata
	 * @memberOf Flac
	 * @property {number}  num_points the number of seek points
	 * @property {Flac.SeekPoint[]}  points the seek points
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_SEEKTABLE
	 */
	/**
	 * FLAC seek point data
	 *
	 * @interface SeekPoint
	 * @memberOf Flac
	 * @property {number}  sample_number The sample number of the target frame. NOTE <code>-1</code> for a placeholder point.
	 * @property {number}  stream_offset The offset, in bytes, of the target frame with respect to beginning of the first frame.
	 * @property {number}  frame_samples The number of samples in the target frame.
	 *
	 * @see Flac.SeekTableMetadata
	 */
	/**
	 * FLAC vorbis comment metadata block
	 *
	 * @interface VorbisCommentMetadata
	 * @memberOf Flac
	 * @property {string}  vendor_string the vendor string
	 * @property {number}  num_comments the number of comments
	 * @property {string[]}  comments the comments
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_VORBIS_COMMENT
	 */
	 /**
	 * FLAC cue sheet metadata block
	 *
	 * @interface CueSheetMetadata
	 * @memberOf Flac
	 * @property {string}  media_catalog_number Media catalog number, in ASCII printable characters 0x20-0x7e. In general, the media catalog number may be 0 to 128 bytes long.
	 * @property {number}  lead_in The number of lead-in samples.
	 * @property {boolean}  is_cd true if CUESHEET corresponds to a Compact Disc, else false.
	 * @property {number}  num_tracks The number of tracks.
	 * @property {Flac.CueSheetTrack[]}  tracks the tracks
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_CUESHEET
	 */
	 /**
	 * FLAC cue sheet track data
	 *
	 * @interface CueSheetTrack
	 * @memberOf Flac
	 * @property {number}  offset Track offset in samples, relative to the beginning of the FLAC audio stream.
	 * @property {number}  number The track number.
	 * @property {string}  isrc Track ISRC. This is a 12-digit alphanumeric code.
	 * @property {"AUDIO" | "NON_AUDIO"}  type The track type: audio or non-audio.
	 * @property {boolean}  pre_emphasis The pre-emphasis flag
	 * @property {number}  num_indices The number of track index points.
	 * @property {Flac.CueSheetTracIndex}  indices The track index points.
	 *
	 * @see Flac.CueSheetMetadata
	 */
	/**
	 * FLAC track index data for cue sheet metadata
	 *
	 * @interface CueSheetTracIndex
	 * @memberOf Flac
	 * @property {number}  offset Offset in samples, relative to the track offset, of the index point.
	 * @property {number}  number The index point number.
	 *
	 * @see Flac.CueSheetTrack
	 */
	/**
	 * FLAC picture metadata block
	 *
	 * @interface PictureMetadata
	 * @memberOf Flac
	 * @property {Flac.FLAC__StreamMetadata_Picture_Type}  type The kind of picture stored.
	 * @property {string}  mime_type Picture data's MIME type, in ASCII printable characters 0x20-0x7e, NUL terminated. For best compatibility with players, use picture data of MIME type image/jpeg or image/png. A MIME type of '–>' is also allowed, in which case the picture data should be a complete URL.
	 * @property {string}  description Picture's description.
	 * @property {number}  width Picture's width in pixels.
	 * @property {number}  height Picture's height in pixels.
	 * @property {number}  depth Picture's color depth in bits-per-pixel.
	 * @property {number}  colors For indexed palettes (like GIF), picture's number of colors (the number of palette entries), or 0 for non-indexed (i.e. 2^depth).
	 * @property {number}  data_length Length of binary picture data in bytes.
	 * @property {Uint8Array}  data Binary picture data.
	 */
	/**
	 * An enumeration of the PICTURE types (see FLAC__StreamMetadataPicture and id3 v2.4 APIC tag).
	 *
	 * @interface FLAC__StreamMetadata_Picture_Type
	 * @memberOf Flac
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER"} 					0		Other
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD"} 		1		32x32 pixels 'file icon' (PNG only)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON"} 				2		Other file icon
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER"} 			3		Cover (front)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER"} 				4		Cover (back)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE"} 			5		Leaflet page
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA"} 					6		Media (e.g. label side of CD)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST"} 			7		Lead artist/lead performer/soloist
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST"} 					8		Artist/performer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR"} 				9		Conductor
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BAND"} 					10		Band/Orchestra
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER"} 				11		Composer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST"} 				12		Lyricist/text writer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION"} 		13		Recording Location
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING"} 		14		During recording
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE"} 		15		During performance
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE"} 	16		Movie/video screen capture
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FISH"} 					17		A bright coloured fish
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION"} 			18		Illustration
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE"} 			19		Band/artist logotype
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE"} 		20		Publisher/Studio logotype
	 *
	 * @see Flac.PictureMetadata
	 */

	/**
	 * An enumeration of the available metadata block types.
	 *
	 * @interface FLAC__MetadataType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__METADATA_TYPE_STREAMINFO"} 		0	STREAMINFO block
	 * @property {"FLAC__METADATA_TYPE_PADDING"} 			1	PADDING block
	 * @property {"FLAC__METADATA_TYPE_APPLICATION"} 		2	APPLICATION block
	 * @property {"FLAC__METADATA_TYPE_SEEKTABLE"} 			3	SEEKTABLE block
	 * @property {"FLAC__METADATA_TYPE_VORBIS_COMMENT"} 	4	VORBISCOMMENT block (a.k.a. FLAC tags)
	 * @property {"FLAC__METADATA_TYPE_CUESHEET"} 			5	CUESHEET block
	 * @property {"FLAC__METADATA_TYPE_PICTURE"} 			6	PICTURE block
	 * @property {"FLAC__METADATA_TYPE_UNDEFINED"} 			7	marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	 * @property {"FLAC__MAX_METADATA_TYPE"} 				126	No type will ever be greater than this. There is not enough room in the protocol block.
	 *
	 * @see Flac.MetadataBlock
	 * @see <a href="https://xiph.org/flac/format.html">FLAC format documentation</a>
	 */
	/**
	 * @function
	 * @public
	 * @memberOf Flac#
	 * @copydoc Flac._setOptions
	 */
	setOptions: _setOptions,
	/**
	 * @function
	 * @public
	 * @memberOf Flac#
	 * @copydoc Flac._getOptions
	 */
	getOptions: _getOptions,
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 *
	 * @returns {boolean} <code>true</code>, if Flac is ready to be used
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #onready
	 * @see #on
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Hook for handler function that gets called, when asynchronous initialization has finished.
	 *
	 * NOTE that if the execution environment does not support <code>Object#defineProperty</code>, then
	 *      this function is not called, after {@link #isReady} is <code>true</code>.
	 *      In this case, {@link #isReady} should be checked, before setting <code>onready</code>
	 *      and if it is <code>true</code>, handler should be executed immediately instead of setting <code>onready</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 * @param {Flac.event:ReadyEvent} event the ready-event object
	 * @see #isReady
	 * @see #on
	 * @default undefined
	 * @example
	 *  // [1] if Object.defineProperty() IS supported:
	 *  Flac.onready = function(event){
	 *     //gets executed when library becomes ready, or immediately, if it already is ready...
	 *	   doSomethingWithFlac();
	 *  };
	 *
	 *  // [2] if Object.defineProperty() is NOT supported:
	 *	// do check Flac.isReady(), and only set handler, if not ready yet
	 *  // (otherwise immediately excute handler code)
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(event){
	 *       //gets executed when library becomes ready...
	 *		 doSomethingWithFlac();
	 *    };
	 *  } else {
	 * 		// Flac is already ready: immediately start processing
	 *		doSomethingWithFlac();
	 *	}
	 */
	onready: void(0),
	/**
	 * Ready event: is fired when the library has been initialized and is ready to be used
	 * (e.g. asynchronous loading of binary / WASM modules has been completed).
	 *
	 * Before this event is fired, use of functions related to encoding and decoding may
	 * cause errors.
	 *
	 * @event ReadyEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"ready"} type 	the type of the event <code>"ready"</code>
	 * @property {Flac} target 	the initalized FLAC library instance
	 *
	 * @see #isReady
	 * @see #on
	 */
	/**
	 * Created event: is fired when an encoder or decoder was created.
	 *
	 * @event CreatedEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"created"} type 	the type of the event <code>"created"</code>
	 * @property {Flac.CoderChangedEventData} target 	the information for the created encoder or decoder
	 *
	 * @see #on
	 */
	/**
	 * Destroyed event: is fired when an encoder or decoder was destroyed.
	 *
	 * @event DestroyedEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"destroyed"} type 	the type of the event <code>"destroyed"</code>
	 * @property {Flac.CoderChangedEventData} target 	the information for the destroyed encoder or decoder
	 *
	 * @see #on
	 */
	/**
	 * Life cycle event data for signaling life cycle changes of encoder or decoder instances
	 * @interface CoderChangedEventData
	 * @memberOf Flac
	 * @property {number}  id  the ID for the encoder or decoder instance
	 * @property {"encoder" | "decoder"}  type  signifies whether the event is for an encoder or decoder instance
	 * @property {any}  [data]  specific data for the life cycle change
	 *
	 * @see Flac.event:CreatedEvent
	 * @see Flac.event:DestroyedEvent
	 */
	/**
	 * Add an event listener for module-events.
	 * Supported events:
	 * <ul>
	 *  <li> <code>"ready"</code> &rarr; {@link Flac.event:ReadyEvent}: emitted when module is ready for usage (i.e. {@link #isReady} is true)<br/>
	 *             <em>NOTE listener will get immediately triggered if module is already <code>"ready"</code></em>
	 *  </li>
	 *  <li> <code>"created"</code> &rarr; {@link Flac.event:CreatedEvent}: emitted when an encoder or decoder instance was created<br/>
	 *  </li>
	 *  <li> <code>"destroyed"</code> &rarr; {@link Flac.event:DestroyedEvent}: emitted when an encoder or decoder instance was destroyed<br/>
	 *  </li>
	 * </ul>
	 *
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #off
	 * @see #onready
	 * @see Flac.event:ReadyEvent
	 * @see Flac.event:CreatedEvent
	 * @see Flac.event:DestroyedEvent
	 * @example
	 *  Flac.on('ready', function(event){
	 *     //gets executed when library is ready, or becomes ready...
	 *  });
	 */
	on: add_event_listener,
	/**
	 * Remove an event listener for module-events.
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #on
	 */
	off: remove_event_listener,

	/**
	 * Set the "verify" flag. If true, the encoder will verify it's own encoded output by feeding it through an internal decoder and comparing the original signal against the decoded signal. If a mismatch occurs, the process call will return false. Note that this will slow the encoding process by the extra time required for decoding and comparison.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {boolean} is_verify enable/disable checksum verification during encoding
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 * @see #FLAC__stream_encoder_get_verify
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: function(encoder, is_verify){
		is_verify = is_verify? 1 : 0;
		Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
	},
	/**
	 * Set the compression level
	 *
	 * The compression level is roughly proportional to the amount of effort the encoder expends to compress the file. A higher level usually means more computation but higher compression. The default level is suitable for most applications.
	 *
	 * Currently the levels range from 0 (fastest, least compression) to 8 (slowest, most compression). A value larger than 8 will be treated as 8.
	 *
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Flac.CompressionLevel} compression_level the desired Flac compression level: [0, 8]
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 * @see Flac.CompressionLevel
	 * @see <a href="https://xiph.org/flac/api/group__flac__stream__encoder.html#gae49cf32f5256cb47eecd33779493ac85">FLAC API for FLAC__stream_encoder_set_compression_level()</a>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**
	 * Set the blocksize to use while encoding.
	 * The number of samples to use per frame. Use 0 to let the encoder estimate a blocksize; this is usually best.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {number} block_size  the number of samples to use per frame
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),


	/**
	 * Get the state of the verify stream decoder. Useful when the stream encoder state is FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {Flac.FLAC__StreamDecoderState} the verify stream decoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_verify_decoder_state: Module.cwrap('FLAC__stream_encoder_get_verify_decoder_state', 'number', ['number']),

	/**
	 * Get the "verify" flag for the encoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} the verify flag for the encoder
	 *
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_encoder_set_verify
	 */
	FLAC__stream_encoder_get_verify: Module.cwrap('FLAC__stream_encoder_get_verify', 'number', ['number']),
/*

TODO export other encoder API functions?:

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)

FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)

FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:


const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)

FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	 /**
	 * Set the compression level
	 *
	 * The compression level is roughly proportional to the amount of effort the encoder expends to compress the file. A higher level usually means more computation but higher compression. The default level is suitable for most applications.
	 *
	 * Currently the levels range from 0 (fastest, least compression) to 8 (slowest, most compression). A value larger than 8 will be treated as 8.
	 *
	 * This function automatically calls the following other set functions with appropriate values, so the client does not need to unless it specifically wants to override them:
	 * <pre>
	 *     FLAC__stream_encoder_set_do_mid_side_stereo()
	 *     FLAC__stream_encoder_set_loose_mid_side_stereo()
	 *     FLAC__stream_encoder_set_apodization()
	 *     FLAC__stream_encoder_set_max_lpc_order()
	 *     FLAC__stream_encoder_set_qlp_coeff_precision()
	 *     FLAC__stream_encoder_set_do_qlp_coeff_prec_search()
	 *     FLAC__stream_encoder_set_do_escape_coding()
	 *     FLAC__stream_encoder_set_do_exhaustive_model_search()
	 *     FLAC__stream_encoder_set_min_residual_partition_order()
	 *     FLAC__stream_encoder_set_max_residual_partition_order()
	 *     FLAC__stream_encoder_set_rice_parameter_search_dist()
	 * </pre>
	 * The actual values set for each level are:
	 * | level  | do mid-side stereo  | loose mid-side stereo  | apodization                                    | max lpc order  | qlp coeff precision  | qlp coeff prec search  | escape coding  | exhaustive model search  | min residual partition order  | max residual partition order  | rice parameter search dist   |
	 * |--------|---------------------|------------------------|------------------------------------------------|----------------|----------------------|------------------------|----------------|--------------------------|-------------------------------|-------------------------------|------------------------------|
	 * | 0      | false               | false                  | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 1      | true                | true                   | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 2      | true                | false                  | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 3      | false               | false                  | tukey(0.5)                                     | 6              | 0                    | false                  | false          | false                    | 0                             | 4                             | 0                            |
	 * | 4      | true                | true                   | tukey(0.5)                                     | 8              | 0                    | false                  | false          | false                    | 0                             | 4                             | 0                            |
	 * | 5      | true                | false                  | tukey(0.5)                                     | 8              | 0                    | false                  | false          | false                    | 0                             | 5                             | 0                            |
	 * | 6      | true                | false                  | tukey(0.5);partial_tukey(2)                    | 8              | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 * | 7      | true                | false                  | tukey(0.5);partial_tukey(2)                    | 12             | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 * | 8      | true                | false                  | tukey(0.5);partial_tukey(2);punchout_tukey(3)  | 12             | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 *
	 * @interface CompressionLevel
	 * @memberOf Flac
	 *
	 * @property {"FLAC__COMPRESSION_LEVEL_0"} 		0	compression level 0
	 * @property {"FLAC__COMPRESSION_LEVEL_1"} 		1	compression level 1
	 * @property {"FLAC__COMPRESSION_LEVEL_2"} 		2	compression level 2
	 * @property {"FLAC__COMPRESSION_LEVEL_3"} 		3	compression level 3
	 * @property {"FLAC__COMPRESSION_LEVEL_4"} 		4	compression level 4
	 * @property {"FLAC__COMPRESSION_LEVEL_5"} 		5	compression level 5
	 * @property {"FLAC__COMPRESSION_LEVEL_6"} 		6	compression level 6
	 * @property {"FLAC__COMPRESSION_LEVEL_7"} 		7	compression level 7
	 * @property {"FLAC__COMPRESSION_LEVEL_8"} 		8	compression level 8
	 */
	/**
	 * Create an encoder.
	 *
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {Flac.CompressionLevel} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 *
	 *
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			do_fire_event('created', [{type: 'created', target: {id: encoder, type: 'encoder'}}], false);
			return encoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_encoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_encoder: function(){
		console.warn('Flac.init_libflac_encoder() is deprecated, use Flac.create_libflac_encoder() instead!');
		return this.create_libflac_encoder.apply(this, arguments);
	},

	/**
	 * Create a decoder.
	 *
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 *
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			do_fire_event('created', [{type: 'created', target: {id: decoder, type: 'decoder'}}], false);
			return decoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_decoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_decoder: function(){
		console.warn('Flac.init_libflac_decoder() is deprecated, use Flac.create_libflac_decoder() instead!');
		return this.create_libflac_decoder.apply(this, arguments);
	},
	/**
	 * The callback for writing the encoded FLAC data.
	 *
	 * @callback Flac~encoder_write_callback_fn
	 * @param {Uint8Array} data the encoded FLAC data
	 * @param {number} numberOfBytes the number of bytes in data
	 * @param {number} samples the number of samples encoded in data
	 * @param {number} currentFrame the number of the (current) encoded frame in data
	 * @returns {void | false} returning <code>false</code> indicates that an
	 * 								unrecoverable error occurred and decoding should be aborted
	 */
	/**
	 * The callback for the metadata of the encoded/decoded Flac data.
	 *
	 * By default, only the STREAMINFO metadata is enabled.
	 *
	 * For other metadata types {@link Flac.FLAC__MetadataType} they need to be enabled,
	 * see e.g. {@link Flac#FLAC__stream_decoder_set_metadata_respond}
	 *
	 * @callback Flac~metadata_callback_fn
	 * @param {Flac.StreamMetadata | undefined} metadata the FLAC meta data, NOTE only STREAMINFO is returned in first argument, for other types use 2nd argument's <code>metadataBlock.data<code>
	 * @param {Flac.MetadataBlock} metadataBlock the detailed meta data block
	 *
	 * @see Flac#init_decoder_stream
	 * @see Flac#init_encoder_stream
	 * @see Flac.CodingOptions
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	/**
	 * FLAC meta data
	 * @interface Metadata
	 * @memberOf Flac
	 * @property {number}  sampleRate the sample rate (Hz)
	 * @property {number}  channels the number of channels
	 * @property {number}  bitsPerSample bits per sample
	 */
	/**
	 * FLAC stream meta data
	 * @interface StreamMetadata
	 * @memberOf Flac
	 * @augments Flac.Metadata
	 * @property {number}  min_blocksize the minimal block size (bytes)
	 * @property {number}  max_blocksize the maximal block size (bytes)
	 * @property {number}  min_framesize the minimal frame size (bytes)
	 * @property {number}  max_framesize the maximal frame size (bytes)
	 * @property {number}  total_samples the total number of (encoded/decoded) samples
	 * @property {string}  md5sum  the MD5 checksum for the decoded data (if validation is active)
	 */
	/**
	 * Initialize the encoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~encoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the encoder will be initialized to
	 * 				write to an OGG container, see {@link Flac.init_encoder_ogg_stream}:
	 * 				<code>true</code> will set a default serial number (<code>1</code>),
	 * 				if specified as number, it will be used as the stream's serial number within the ogg container.
	 *
	 * @returns {Flac.FLAC__StreamEncoderInitStatus} the encoder status (<code>0</code> for <code>FLAC__STREAM_ENCODER_INIT_STATUS_OK</code>)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		var is_ogg = (ogg_serial_number === true);
		client_data = client_data|0;

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_encoder_init_stream'
		var func_name = 'FLAC__stream_encoder_init_stream';
		var args_types = ['number', 'number', 'number', 'number', 'number', 'number'];
		var args = [
			encoder,
			enc_write_fn_ptr,
			0,//	FLAC__StreamEncoderSeekCallback
			0,//	FLAC__StreamEncoderTellCallback
			__metadata_callback_fn_ptr,
			client_data
		];

		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

		} else if(is_ogg){//else: set default serial number for stream in OGG container

			//NOTE from FLAC docs: "It is recommended to set a serial number explicitly as the default of '0' may collide with other streams."
			ogg_serial_number = 1;
		}

		if(is_ogg){
			//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
			//	Module.ccall('FLAC__stream_encoder_init_ogg_stream'
			func_name = 'FLAC__stream_encoder_init_ogg_stream';

			//2nd arg: FLAC__StreamEncoderReadCallback ptr -> duplicate first entry & insert at [1]
			args.unshift(args[0]);
			args[1] = 0;//	FLAC__StreamEncoderReadCallback

			args_types.unshift(args_types[0]);
			args_types[1] = 'number';


			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if encoder already has been initialized
			Module.ccall(
				'FLAC__stream_encoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ encoder, ogg_serial_number ]
			);
		}

		var init_status = Module.ccall(func_name, 'number', args_types, args);

		return init_status;
	},
	/**
	 * Initialize the encoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container
	 * 				DEFAULT: <code>1</code>
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_encoder_stream
	 */
	init_encoder_ogg_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_encoder_stream(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Result / return value for {@link Flac~decoder_read_callback_fn} callback function
	 *
	 * @interface ReadResult
	 * @memberOf Flac
	 * @property {TypedArray}  buffer  a TypedArray (e.g. Uint8Array) with the read data
	 * @property {number}  readDataLength the number of read data bytes. A number of <code>0</code> (zero) indicates that the end-of-stream is reached.
	 * @property {boolean}  [error] OPTIONAL value of <code>true</code> indicates that an error occured (decoding will be aborted)
	 */
	/**
	 * Result / return value for {@link Flac~decoder_read_callback_fn} callback function for signifying that there is no more data to read
	 *
	 * @interface CompletedReadResult
	 * @memberOf Flac
	 * @augments Flac.ReadResult
	 * @property {TypedArray | undefined}  buffer  a TypedArray (e.g. Uint8Array) with the read data (will be ignored in case readDataLength is <code>0</code>)
	 * @property {0}  readDataLength the number of read data bytes: The number of <code>0</code> (zero) indicates that the end-of-stream is reached.
	 */
	/**
	 * The callback for reading the FLAC data that will be decoded.
	 *
	 * @callback Flac~decoder_read_callback_fn
	 * @param {number} numberOfBytes the maximal number of bytes that the read callback can return
	 * @returns {Flac.ReadResult | Flac.CompletedReadResult} the result of the reading action/request
	 */
	/**
	 * The callback for writing the decoded FLAC data.
	 *
	 * @callback Flac~decoder_write_callback_fn
	 * @param {Uint8Array[]} data array of the channels with the decoded PCM data as <code>Uint8Array</code>s
	 * @param {Flac.BlockMetadata} frameInfo the metadata information for the decoded data
	 */
	/**
	 * The callback for reporting decoding errors.
	 *
	 * @callback Flac~decoder_error_callback_fn
	 * @param {number} errorCode the error code
	 * @param {Flac.FLAC__StreamDecoderErrorStatus} errorDescription the string representation / description of the error
	 */
	/**
	 * FLAC block meta data
	 * @interface BlockMetadata
	 * @augments Flac.Metadata
	 * @memberOf Flac
	 *
	 * @property {number}  blocksize the block size (bytes)
	 * @property {number}  number the number of the decoded samples or frames
	 * @property {string}  numberType the type to which <code>number</code> refers to: either <code>"frames"</code> or <code>"samples"</code>
	 * @property {Flac.FLAC__ChannelAssignment} channelAssignment the channel assignment
	 * @property {string}  crc the MD5 checksum for the decoded data, if validation is enabled
	 * @property {Flac.SubFrameMetadata[]}  [subframes] the metadata of the subframes. The array length corresponds to the number of channels. NOTE will only be included if {@link Flac.CodingOptions CodingOptions.analyseSubframes} is enabled for the decoder.
	 *
	 * @see Flac.CodingOptions
	 * @see Flac#setOptions
	 */
	/**
	 * FLAC subframe metadata
	 * @interface SubFrameMetadata
	 * @memberOf Flac
	 *
	 * @property {Flac.FLAC__SubframeType}  type the type of the subframe
	 * @property {number|Flac.FixedSubFrameData|Flac.LPCSubFrameData}  data the type specific metadata for subframe
	 * @property {number}  wastedBits the wasted bits-per-sample
	 */
	/**
	 * metadata for FIXED subframe type
	 * @interface FixedSubFrameData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The polynomial order.
	 * @property {number[]}  warmup  Warmup samples to prime the predictor, length == order.
	 * @property {Flac.SubFramePartition}  partition  The residual coding method.
	 * @property {number[]}  [residual]  The residual signal, length == (blocksize minus order) samples.
	 * 									NOTE will only be included if {@link Flac.CodingOptions CodingOptions.analyseSubframes} is enabled for the decoder.
	 */
	/**
	 * metadata for LPC subframe type
	 * @interface LPCSubFrameData
	 * @augments Flac.FixedSubFrameData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The FIR order.
	 * @property {number[]}  qlp_coeff  FIR filter coefficients.
	 * @property {number}  qlp_coeff_precision  Quantized FIR filter coefficient precision in bits.
	 * @property {number}  quantization_level The qlp coeff shift needed.
	 */
	/**
	 * metadata for FIXED or LPC subframe partitions
	 * @interface SubFramePartition
	 * @memberOf Flac
	 *
	 * @property {Flac.FLAC__EntropyCodingMethodType}  type  the entropy coding method
	 * @property {Flac.SubFramePartitionData}  data  metadata for a Rice partitioned residual
	 */
	/**
	 * metadata for FIXED or LPC subframe partition data
	 * @interface SubFramePartitionData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The partition order, i.e. # of contexts = 2 ^ order.
	 * @property {Flac.SubFramePartitionContent}  contents  The context's Rice parameters and/or raw bits.
	 */
	/**
	 * metadata for FIXED or LPC subframe partition data content
	 * @interface SubFramePartitionContent
	 * @memberOf Flac
	 *
	 * @property {number[]}  parameters  The Rice parameters for each context.
	 * @property {number[]}  rawBits  Widths for escape-coded partitions. Will be non-zero for escaped partitions and zero for unescaped partitions.
	 * @property {number}  capacityByOrder  The capacity of the parameters and raw_bits arrays specified as an order, i.e. the number of array elements allocated is 2 ^ capacity_by_order.
	 */
	/**
	 * The types for FLAC subframes
	 *
	 * @interface FLAC__SubframeType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__SUBFRAME_TYPE_CONSTANT"} 	0	constant signal
	 * @property {"FLAC__SUBFRAME_TYPE_VERBATIM"} 	1	uncompressed signal
	 * @property {"FLAC__SUBFRAME_TYPE_FIXED"} 		2	fixed polynomial prediction
	 * @property {"FLAC__SUBFRAME_TYPE_LPC"} 		3	linear prediction
	 */
	/**
	 * The channel assignment for the (decoded) frame.
	 *
	 * @interface FLAC__ChannelAssignment
	 * @memberOf Flac
	 *
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT"} 		0	independent channels
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE"}  		1	left+side stereo
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE"} 		2	right+side stereo
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_MID_SIDE"}			3	mid+side stereo
	 */
	/**
	 * entropy coding methods
	 *
	 * @interface FLAC__EntropyCodingMethodType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE"} 	0	Residual is coded by partitioning into contexts, each with it's own 4-bit Rice parameter.
	 * @property {"FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2"} 	1	Residual is coded by partitioning into contexts, each with it's own 5-bit Rice parameter.
	 */
	/**
	 * Initialize the decoder.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~decoder_read_callback_fn} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}</pre>
	 *
	 * @param {Flac~decoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>write_callback_fn(data: Uint8Array[], frameInfo: Metadata)</pre>
	 *
	 * @param {Flac~decoder_error_callback_fn} error_callback_fn
	 * 				the error callback:
	 * 				<pre>error_callback_fn(errorCode: Number, errorDescription: String)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of FLAC data that will be decoded:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the decoder will be initilized to
	 * 				read from an OGG container, see {@link Flac.init_decoder_ogg_stream}:<br/>
	 * 				<code>true</code> will use the default serial number, if specified as number the
	 * 				corresponding stream with the serial number from the ogg container will be used.
	 *
	 * @returns {Flac.FLAC__StreamDecoderInitStatus} the decoder status(<code>0</code> for <code>FLAC__STREAM_DECODER_INIT_STATUS_OK</code>)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);

		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var is_ogg = (ogg_serial_number === true);
		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if decoder already has been initialized
			Module.ccall(
				'FLAC__stream_decoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ decoder, ogg_serial_number ]
			);
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_decoder_init_stream'
		//	Module.ccall('FLAC__stream_decoder_init_ogg_stream'
		var init_func_name = !is_ogg? 'FLAC__stream_decoder_init_stream' : 'FLAC__stream_decoder_init_ogg_stream';

		var init_status = Module.ccall(
				init_func_name, 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
					 decoder,
					 dec_read_fn_ptr,
					 0,// 	FLAC__StreamDecoderSeekCallback
					 0,// 	FLAC__StreamDecoderTellCallback
					 0,//	FLAC__StreamDecoderLengthCallback
					 0,//	FLAC__StreamDecoderEofCallback
					 dec_write_fn_ptr,
					 __metadata_callback_fn_ptr,
					 __error_callback_fn_ptr,
					 client_data
				]
		);

		return init_status;
	},
	/**
	 * Initialize the decoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container that should be decoded.<br/>
	 * 				The default behavior is to use the serial number of the first Ogg page. Setting a serial number here will explicitly specify which stream is to be decoded.
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_decoder_stream
	 */
	init_decoder_ogg_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_decoder_stream(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Encode / submit data for encoding.
	 *
	 * This version allows you to supply the input data where the channels are interleaved into a
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).
	 *
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 *
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// issue #11 (2): do use byteOffset and byteLength for copying the data in case the underlying buffer/ArrayBuffer of the TypedArray view is larger than the TypedArray
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Encode / submit data for encoding.
	 *
	 * Submit data for encoding. This version allows you to supply the input data via an array of pointers,
	 * each pointer pointing to an array of samples samples representing one channel.
	 * The samples need not be block-aligned, but each channel should have the same number of samples.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by FLAC__stream_encoder_set_bits_per_sample().
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray[]} channelBuffers
	 * 				an array for the audio data channels as typed arrays with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in one channel (i.e. one of the buffers)
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process: function(encoder, channelBuffers, num_of_samples){

		var ptrInfo = this._create_pointer_array(channelBuffers);
		var pointerPtr = ptrInfo.pointerPointer;

		var status = Module.ccall('FLAC__stream_encoder_process', 'number',
				['number', 'number', 'number'],
				[encoder, pointerPtr, num_of_samples]
		);

		this._destroy_pointer_array(ptrInfo);
		return status;
	},
	/**
	 * Decodes a single frame.
	 *
	 * To check decoding progress, use {@link #FLAC__stream_decoder_get_state}.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),

	/**
	 * Decodes data until end of metadata.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 * Decoder state code.
	 *
	 * @interface FLAC__StreamDecoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_METADATA"} 		0	The decoder is ready to search for metadata
	 * @property {"FLAC__STREAM_DECODER_READ_METADATA"}  			1	The decoder is ready to or is in the process of reading metadata
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC"} 	2	The decoder is ready to or is in the process of searching for the frame sync code
	 * @property {"FLAC__STREAM_DECODER_READ_FRAME"}				3	The decoder is ready to or is in the process of reading a frame
	 * @property {"FLAC__STREAM_DECODER_END_OF_STREAM"}				4	The decoder has reached the end of the stream
	 * @property {"FLAC__STREAM_DECODER_OGG_ERROR"}					5	An error occurred in the underlying Ogg layer
	 * @property {"FLAC__STREAM_DECODER_SEEK_ERROR"}				6	An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * @property {"FLAC__STREAM_DECODER_ABORTED"}					7	The decoder was aborted by the read callback
	 * @property {"FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR"}	8	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * @property {"FLAC__STREAM_DECODER_UNINITIALIZED"}				9	The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 *
	 */
	/**
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {Flac.FLAC__StreamDecoderState} the decoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),

	/**
	 * Encoder state code.
	 *
	 * @interface FLAC__StreamEncoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_ENCODER_OK"}								0 	The encoder is in the normal OK state and samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_UNINITIALIZED"}						1 	The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_OGG_ERROR"}							2 	An error occurred in the underlying Ogg layer.
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR"}				3 	An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA"}		4 	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * @property {"FLAC__STREAM_ENCODER_CLIENT_ERROR"}						5 	One of the callbacks returned a fatal error.
	 * @property {"FLAC__STREAM_ENCODER_IO_ERROR"}							6 	An I/O error occurred while opening/reading/writing a file. Check errno.
	 * @property {"FLAC__STREAM_ENCODER_FRAMING_ERROR"}						7 	An error occurred while writing the stream; usually, the write_callback returned an error.
	 * @property {"FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR"}			8 	Memory allocation failed.
	 *
	 */
	/**
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {Flac.FLAC__StreamEncoderState} the encoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),
	/**
	 * Direct the decoder to pass on all metadata blocks of type type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Flac.FLAC__MetadataType} type  the metadata type to be enabled
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	FLAC__stream_decoder_set_metadata_respond: Module.cwrap('FLAC__stream_decoder_set_metadata_respond', 'number', ['number', 'number']),
	/**
	 * Direct the decoder to pass on all APPLICATION metadata blocks of the given id.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {number} id  the ID of application metadata
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	FLAC__stream_decoder_set_metadata_respond_application: Module.cwrap('FLAC__stream_decoder_set_metadata_respond_application', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
	/**
	 * Direct the decoder to pass on all metadata blocks of any type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_application
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond
	 */
	FLAC__stream_decoder_set_metadata_respond_all: Module.cwrap('FLAC__stream_decoder_set_metadata_respond_all', 'number', ['number']),// (FLAC__StreamDecoder *decoder)
	/**
	 * Direct the decoder to filter out all metadata blocks of type type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Flac.FLAC__MetadataType} type  the metadata type to be ignored
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 */
	FLAC__stream_decoder_set_metadata_ignore: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)
	/**
	 * Direct the decoder to filter out all APPLICATION metadata blocks of the given id.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {number} id  the ID of application metadata
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 */
	FLAC__stream_decoder_set_metadata_ignore_application: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore_application', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
	/**
	 * Direct the decoder to filter out all metadata blocks of any type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_application
	 */
	FLAC__stream_decoder_set_metadata_ignore_all: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore_all', 'number', ['number']),// (FLAC__StreamDecoder *decoder)
	/**
	 * Set the metadata blocks to be emitted to the stream before encoding. A value of NULL, 0 implies no metadata; otherwise, supply an array of pointers to metadata blocks.
	 * The array is non-const since the encoder may need to change the is_last flag inside them, and in some cases update seek point offsets. Otherwise, the encoder
	 * will not modify or free the blocks. It is up to the caller to free the metadata blocks after encoding finishes.
	 *
	 * <p>
	 *     The encoder stores only copies of the pointers in the metadata array; the metadata blocks themselves must survive at least until after FLAC__stream_encoder_finish() returns.
	 *     Do not free the blocks until then.
	 *
	 *     The STREAMINFO block is always written and no STREAMINFO block may occur in the supplied array.
	 *
	 *     By default the encoder does not create a SEEKTABLE. If one is supplied in the metadata array, but the client has specified that it does not support seeking,
	 *     then the SEEKTABLE will be written verbatim. However by itself this is not very useful as the client will not know the stream offsets for the seekpoints ahead of time.
	 *     In order to get a proper seektable the client must support seeking. See next note.
	 *
	 *     SEEKTABLE blocks are handled specially. Since you will not know the values for the seek point stream offsets, you should pass in a SEEKTABLE 'template', that is,
	 *     a SEEKTABLE object with the required sample numbers (or placeholder points), with 0 for the frame_samples and stream_offset fields for each point.
	 *     If the client has specified that it supports seeking by providing a seek callback to FLAC__stream_encoder_init_stream() or both seek AND read callback to
	 *      FLAC__stream_encoder_init_ogg_stream() (or by using FLAC__stream_encoder_init*_file() or FLAC__stream_encoder_init*_FILE()), then while it is encoding the encoder will
	 *      fill the stream offsets in for you and when encoding is finished, it will seek back and write the real values into the SEEKTABLE block in the stream. There are helper
	 *      routines for manipulating seektable template blocks; see metadata.h: FLAC__metadata_object_seektable_template_*(). If the client does not support seeking,
	 *      the SEEKTABLE will have inaccurate offsets which will slow down or remove the ability to seek in the FLAC stream.
	 *
	 *     The encoder instance will modify the first SEEKTABLE block as it transforms the template to a valid seektable while encoding, but it is still up to the caller to free
	 *     all metadata blocks after encoding.
	 *
	 *     A VORBIS_COMMENT block may be supplied. The vendor string in it will be ignored. libFLAC will use it's own vendor string. libFLAC will not modify the passed-in
	 *     VORBIS_COMMENT's vendor string, it will simply write it's own into the stream. If no VORBIS_COMMENT block is present in the metadata array, libFLAC will write an
	 *     empty one, containing only the vendor string.
	 *
	 *     The Ogg FLAC mapping requires that the VORBIS_COMMENT block be the second metadata block of the stream. The encoder already supplies the STREAMINFO block automatically.
	 *
	 *     If metadata does not contain a VORBIS_COMMENT block, the encoder will supply that too. Otherwise, if metadata does contain a VORBIS_COMMENT block and it is not the first,
	 *     the init function will reorder metadata by moving the VORBIS_COMMENT block to the front; the relative ordering of the other blocks will remain as they were.
	 *
	 *     The Ogg FLAC mapping limits the number of metadata blocks per stream to 65535. If num_blocks exceeds this the function will return false.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Flac.PointerInfo} metadataBuffersPointer
	 *
	 * @param {number} num_blocks
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>. <code>false</code> if the encoder is already initialized, or if num_blocks > 65535 if encoding to Ogg FLAC, else true.
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac.FLAC__MetadataType
	 * @see Flac#_create_pointer_array
	 * @see Flac#_destroy_pointer_array
	 */
	FLAC__stream_encoder_set_metadata: function(encoder, metadataBuffersPointer, num_blocks){// ( FLAC__StreamEncoder *  encoder, FLAC__StreamMetadata **  metadata, unsigned  num_blocks)
		var status = Module.ccall('FLAC__stream_encoder_set_metadata', 'number',
				['number', 'number', 'number'],
				[encoder, metadataBuffersPointer.pointerPointer, num_blocks]
		);
		return status;
	},
	/**
	 * Helper object for allocating an array of buffers on the (memory) heap.
	 *
	 * @interface PointerInfo
	 * @memberOf Flac
	 * @property {number}  pointerPointer pointer to the array of (pointer) buffers
	 * @property {number[]}  dataPointer array of pointers to the allocated data arrays (i.e. buffers)
	 *
	 * @see Flac#_create_pointer_array
	 * @see Flac#_destroy_pointer_array
	 */
	/**
	 * Helper function for creating pointer (and allocating the data) to an array of buffers on the (memory) heap.
	 *
	 * Use the returned <code>PointerInfo.dataPointer</code> as argument, where the array-pointer is required.
	 *
	 * NOTE: afer use, the allocated buffers on the heap need be freed, see {@link #_destroy_pointer_array}.
	 *
	 * @param {Uint8Array[]} bufferArray
	 * 						the buffer for which to create
	 *
	 * @returns {Flac.PointerInfo} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#_destroy_pointer_array
	 */
	_create_pointer_array: function(bufferArray){
		var size=bufferArray.length;
		var ptrs = [], ptrData = new Uint32Array(size);
		var ptrOffsets = new DataView(ptrData.buffer);
		var buffer, numBytes, heapBytes, ptr;
		for(var i=0, size; i < size; ++i){
			buffer = bufferArray[i];
			// get the length of the data in bytes
			numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
			// malloc enough space for the data
			ptr = Module._malloc(numBytes);
			ptrs.push(ptr);
			// get a bytes-wise view on the newly allocated buffer
			heapBytes = new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
			// copy data into heapBytes
			heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// use FIX for issue #11 (2)
			ptrOffsets.setUint32(i*4, ptr, true);
		}
		var nPointerBytes = ptrData.length * ptrData.BYTES_PER_ELEMENT
		var pointerPtr = Module._malloc(nPointerBytes);
		var pointerHeap = new Uint8Array(Module.HEAPU8.buffer, pointerPtr, nPointerBytes);
		pointerHeap.set( new Uint8Array(ptrData.buffer) );

		return {
			dataPointer: ptrs,
			pointerPointer: pointerPtr
		};
	},
	/**
	 * Helper function for destroying/freeing a previously created pointer (and allocating the data) of an array of buffers on the (memory) heap.
	 *
	 * @param {Flac.PointerInfo} pointerInfo
	 * 						the pointer / allocation information that should be destroyed/freed
	 *
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#_create_pointer_array
	 */
	_destroy_pointer_array: function(pointerInfo){
		var pointerArray = pointerInfo.dataPointer;
		for(var i=0, size=pointerArray.length; i < size; ++i){
			Module._free(pointerArray[i]);
		}
		Module._free(pointerInfo.pointerPointer);
	},
	/**
	 * Get if MD5 verification is enabled for the decoder
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>true</code> if MD5 verification is enabled
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_decoder_set_md5_checking
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),

	/**
	 * Set the "MD5 signature checking" flag. If true, the decoder will compute the MD5 signature of the unencoded audio data while decoding and compare it to the signature from the STREAMINFO block,
	 * if it exists, during {@link Flac.FLAC__stream_decoder_finish FLAC__stream_decoder_finish()}.
	 *
	 * MD5 signature checking will be turned off (until the next {@link Flac.FLAC__stream_decoder_reset FLAC__stream_decoder_reset()}) if there is no signature in the STREAMINFO block or when a seek is attempted.
	 *
	 * Clients that do not use the MD5 check should leave this off to speed up decoding.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * @param {boolean} is_verify
	 * 				enable/disable checksum verification during decoding
	 * @returns {boolean} FALSE if the decoder is already initialized, else TRUE.
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_decoder_get_md5_checking
	 */
	FLAC__stream_decoder_set_md5_checking: function(decoder, is_verify){
		is_verify = is_verify? 1 : 0;
		return Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
	},

	/**
	 * Finish the encoding process.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} <code>false</code> if an error occurred processing the last frame;
	 * 					 or if verify mode is set, there was a verify mismatch; else <code>true</code>.
	 * 					 If <code>false</code>, caller should check the state with {@link Flac#FLAC__stream_encoder_get_state}
	 * 					 for more information about the error.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 *
	 * The decoder can be reused, after initializing it again.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else <code>true</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 *
	 * <p>
	 * NOTE: Needs to be re-initialized, before it can be used again
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} true if successful
	 *
	 * @see #init_decoder_stream
	 * @see #init_decoder_ogg_stream
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
		do_fire_event('destroyed', [{type: 'destroyed', target: {id: encoder, type: 'encoder'}}], false);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
		do_fire_event('destroyed', [{type: 'destroyed', target: {id: decoder, type: 'decoder'}}], false);
	}

};//END: var _exported = {

//if Properties are supported by JS execution environment:
// support "immediate triggering" onready function, if library is already initialized when setting onready callback
if(typeof Object.defineProperty === 'function'){
	//add internal field for storing onready callback:
	_exported._onready = void(0);
	//define getter & define setter with "immediate trigger" functionality:
	Object.defineProperty(_exported, 'onready', {
		get() { return this._onready; },
		set(newValue) {
			this._onready = newValue;
			if(newValue && this.isReady()){
				check_and_trigger_persisted_event('ready', newValue);
			}
		}
	});
} else {
	//if Properties are NOTE supported by JS execution environment:
	// pring usage warning for onready hook instead
	console.warn('WARN: note that setting Flac.onready handler after Flac.isReady() is already true, will have no effect, that is, the handler function will not be triggered!');
}

if(expLib && expLib.exports){
	expLib.exports = _exported;
}
return _exported;

}));//END: UMD wrapper
// end include: /home/tema/libflac.js/libflac_post.js

